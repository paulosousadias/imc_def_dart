// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// IMC Code Generator
// **************************************************************************

part of 'imc_def_gen.dart';

/// Entity State immutable class
///
class _$EntityState extends EntityState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final EntityStateEnumState state;
  @override
  final EntityStateBitfieldFlags flags;
  @override
  final String description;

  factory _$EntityState([void Function(EntityStateBuilder b)? updates]) =>
      (EntityStateBuilder()..update(updates)).build() as _$EntityState;

  factory _$EntityState.fromJson(core.Map<String, dynamic> json) {
    var val = EntityStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.state = json.containsKey('state') && json['state'] != null
        ? EntityStateEnumState(json['state'] as int)
        : EntityStateEnumState(0);
    val.flags = json.containsKey('flags') && json['flags'] != null
        ? EntityStateBitfieldFlags(json['flags'] as int)
        : EntityStateBitfieldFlags(0);
    val.description =
        json.containsKey('description') && json['description'] != null
            ? json['description'] as String
            : '';

    return val.build() as _$EntityState;
  }

  _$EntityState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.state,
      required this.flags,
      required this.description})
      : super._();

  @override
  EntityState rebuild(void Function(EntityStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  EntityStateBuilder toBuilder() => EntityStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is EntityState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        state == other.state &&
        flags == other.flags &&
        description == other.description;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                state.hashCode),
            flags.hashCode),
        description.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('EntityState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('state', '$state (Enumerated) [${state.toPrettyString()}]')
          ..add('flags', '$flags (Bitfield) [${flags.toPrettyString()}]')
          ..add('description', description))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'EntityState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'state': state.value,
        'flags': flags.value,
        'description': description,
      };
}

/// Entity State builder class
///
class EntityStateBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<EntityState, EntityStateBuilder> {
  _$EntityState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  EntityStateEnumState _state = EntityStateEnumState(0);
  EntityStateEnumState get state => _$this._state;
  set state(EntityStateEnumState state) => _$this._state = state;

  EntityStateBitfieldFlags _flags = EntityStateBitfieldFlags(0);
  EntityStateBitfieldFlags get flags => _$this._flags;
  set flags(EntityStateBitfieldFlags flags) => _$this._flags = flags;

  String _description = '';
  String get description => _$this._description;
  set description(String description) => _$this._description = description;

  EntityStateBuilder();

  EntityStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  EntityStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$EntityState.fromJson(json);
    replace(v);
  }

  @override
  EntityStateBuilder fromJson(core.Map<String, dynamic> json) =>
      EntityStateBuilder.fromJson(json);

  @override
  EntityStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      EntityStateBuilder()..copyFromHeader(headerFrom);

  EntityStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _state = _$v!.state;
      _flags = _$v!.flags;
      _description = _$v!.description;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(EntityState other) {
    _$v = other as _$EntityState;
  }

  @override
  void update(void Function(EntityStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  EntityState build() {
    final result = _$v ??
        _$EntityState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            state: state,
            flags: flags,
            description: description);
    replace(result);
    return result;
  }
}

/// Query Entity State immutable class
///
class _$QueryEntityState extends QueryEntityState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  factory _$QueryEntityState(
          [void Function(QueryEntityStateBuilder b)? updates]) =>
      (QueryEntityStateBuilder()..update(updates)).build()
          as _$QueryEntityState;

  factory _$QueryEntityState.fromJson(core.Map<String, dynamic> json) {
    var val = QueryEntityStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    return val.build() as _$QueryEntityState;
  }

  _$QueryEntityState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId})
      : super._();

  @override
  QueryEntityState rebuild(void Function(QueryEntityStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  QueryEntityStateBuilder toBuilder() =>
      QueryEntityStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is QueryEntityState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc($jc($jc(0, timestamp?.hashCode ?? null.hashCode), src.hashCode),
                srcEnt.hashCode),
            dst.hashCode),
        dstEnt.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('QueryEntityState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'QueryEntityState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
      };
}

/// Query Entity State builder class
///
class QueryEntityStateBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<QueryEntityState, QueryEntityStateBuilder> {
  _$QueryEntityState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  QueryEntityStateBuilder();

  QueryEntityStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  QueryEntityStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$QueryEntityState.fromJson(json);
    replace(v);
  }

  @override
  QueryEntityStateBuilder fromJson(core.Map<String, dynamic> json) =>
      QueryEntityStateBuilder.fromJson(json);

  @override
  QueryEntityStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      QueryEntityStateBuilder()..copyFromHeader(headerFrom);

  QueryEntityStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(QueryEntityState other) {
    _$v = other as _$QueryEntityState;
  }

  @override
  void update(void Function(QueryEntityStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  QueryEntityState build() {
    final result = _$v ??
        _$QueryEntityState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt);
    replace(result);
    return result;
  }
}

/// Entity Information immutable class
///
class _$EntityInfo extends EntityInfo {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int id;
  @override
  final String label;
  @override
  final String component;
  @override
  final int actTime;
  @override
  final int deactTime;

  factory _$EntityInfo([void Function(EntityInfoBuilder b)? updates]) =>
      (EntityInfoBuilder()..update(updates)).build() as _$EntityInfo;

  factory _$EntityInfo.fromJson(core.Map<String, dynamic> json) {
    var val = EntityInfoBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.id = json.containsKey('id') ? json['id'] as int : 0;
    val.label = json.containsKey('label') && json['label'] != null
        ? json['label'] as String
        : '';
    val.component = json.containsKey('component') && json['component'] != null
        ? json['component'] as String
        : '';
    val.actTime = json.containsKey('act_time') ? json['act_time'] as int : 0;
    val.deactTime =
        json.containsKey('deact_time') ? json['deact_time'] as int : 0;

    return val.build() as _$EntityInfo;
  }

  _$EntityInfo._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.id,
      required this.label,
      required this.component,
      required this.actTime,
      required this.deactTime})
      : super._();

  @override
  EntityInfo rebuild(void Function(EntityInfoBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  EntityInfoBuilder toBuilder() => EntityInfoBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is EntityInfo &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        id == other.id &&
        label == other.label &&
        component == other.component &&
        actTime == other.actTime &&
        deactTime == other.deactTime;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            0,
                                            timestamp?.hashCode ??
                                                null.hashCode),
                                        src.hashCode),
                                    srcEnt.hashCode),
                                dst.hashCode),
                            dstEnt.hashCode),
                        id.hashCode),
                    label.hashCode),
                component.hashCode),
            actTime.hashCode),
        deactTime.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('EntityInfo')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('id', '$id')
          ..add('label', label)
          ..add('component', component)
          ..add('actTime', '$actTime (s)')
          ..add('deactTime', '$deactTime (s)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'EntityInfo',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'id': id,
        'label': label,
        'component': component,
        'act_time': actTime,
        'deact_time': deactTime,
      };
}

/// Entity Information builder class
///
class EntityInfoBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<EntityInfo, EntityInfoBuilder> {
  _$EntityInfo? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _id = 0;
  int get id => _$this._id;
  set id(int id) => _$this._id = id;

  String _label = '';
  String get label => _$this._label;
  set label(String label) => _$this._label = label;

  String _component = '';
  String get component => _$this._component;
  set component(String component) => _$this._component = component;

  int _actTime = 0;
  int get actTime => _$this._actTime;
  set actTime(int actTime) => _$this._actTime = actTime;

  int _deactTime = 0;
  int get deactTime => _$this._deactTime;
  set deactTime(int deactTime) => _$this._deactTime = deactTime;

  EntityInfoBuilder();

  EntityInfoBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  EntityInfoBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$EntityInfo.fromJson(json);
    replace(v);
  }

  @override
  EntityInfoBuilder fromJson(core.Map<String, dynamic> json) =>
      EntityInfoBuilder.fromJson(json);

  @override
  EntityInfoBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      EntityInfoBuilder()..copyFromHeader(headerFrom);

  EntityInfoBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _id = _$v!.id;
      _label = _$v!.label;
      _component = _$v!.component;
      _actTime = _$v!.actTime;
      _deactTime = _$v!.deactTime;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(EntityInfo other) {
    _$v = other as _$EntityInfo;
  }

  @override
  void update(void Function(EntityInfoBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  EntityInfo build() {
    final result = _$v ??
        _$EntityInfo._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            id: id,
            label: label,
            component: component,
            actTime: actTime,
            deactTime: deactTime);
    replace(result);
    return result;
  }
}

/// Query Entity Information immutable class
///
class _$QueryEntityInfo extends QueryEntityInfo {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int id;

  factory _$QueryEntityInfo(
          [void Function(QueryEntityInfoBuilder b)? updates]) =>
      (QueryEntityInfoBuilder()..update(updates)).build() as _$QueryEntityInfo;

  factory _$QueryEntityInfo.fromJson(core.Map<String, dynamic> json) {
    var val = QueryEntityInfoBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.id = json.containsKey('id') ? json['id'] as int : 0;

    return val.build() as _$QueryEntityInfo;
  }

  _$QueryEntityInfo._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.id})
      : super._();

  @override
  QueryEntityInfo rebuild(void Function(QueryEntityInfoBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  QueryEntityInfoBuilder toBuilder() => QueryEntityInfoBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is QueryEntityInfo &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('QueryEntityInfo')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('id', '$id'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'QueryEntityInfo',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'id': id,
      };
}

/// Query Entity Information builder class
///
class QueryEntityInfoBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<QueryEntityInfo, QueryEntityInfoBuilder> {
  _$QueryEntityInfo? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _id = 0;
  int get id => _$this._id;
  set id(int id) => _$this._id = id;

  QueryEntityInfoBuilder();

  QueryEntityInfoBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  QueryEntityInfoBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$QueryEntityInfo.fromJson(json);
    replace(v);
  }

  @override
  QueryEntityInfoBuilder fromJson(core.Map<String, dynamic> json) =>
      QueryEntityInfoBuilder.fromJson(json);

  @override
  QueryEntityInfoBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      QueryEntityInfoBuilder()..copyFromHeader(headerFrom);

  QueryEntityInfoBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _id = _$v!.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(QueryEntityInfo other) {
    _$v = other as _$QueryEntityInfo;
  }

  @override
  void update(void Function(QueryEntityInfoBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  QueryEntityInfo build() {
    final result = _$v ??
        _$QueryEntityInfo._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            id: id);
    replace(result);
    return result;
  }
}

/// Entity List immutable class
///
class _$EntityList extends EntityList {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final EntityListEnumOp op;
  @override
  final String list;

  factory _$EntityList([void Function(EntityListBuilder b)? updates]) =>
      (EntityListBuilder()..update(updates)).build() as _$EntityList;

  factory _$EntityList.fromJson(core.Map<String, dynamic> json) {
    var val = EntityListBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.op = json.containsKey('op') && json['op'] != null
        ? EntityListEnumOp(json['op'] as int)
        : EntityListEnumOp(0);
    val.list = json.containsKey('list') && json['list'] != null
        ? json['list'] as String
        : '';

    return val.build() as _$EntityList;
  }

  _$EntityList._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.op,
      required this.list})
      : super._();

  @override
  EntityList rebuild(void Function(EntityListBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  EntityListBuilder toBuilder() => EntityListBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is EntityList &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        op == other.op &&
        list == other.list;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            op.hashCode),
        list.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('EntityList')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]')
          ..add('list', '$list (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'EntityList',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'op': op.value,
        'list': list,
      };
}

/// Entity List builder class
///
class EntityListBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<EntityList, EntityListBuilder> {
  _$EntityList? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  EntityListEnumOp _op = EntityListEnumOp(0);
  EntityListEnumOp get op => _$this._op;
  set op(EntityListEnumOp op) => _$this._op = op;

  String _list = '';
  String get list => _$this._list;
  set list(String list) => _$this._list = list;

  EntityListBuilder();

  EntityListBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  EntityListBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$EntityList.fromJson(json);
    replace(v);
  }

  @override
  EntityListBuilder fromJson(core.Map<String, dynamic> json) =>
      EntityListBuilder.fromJson(json);

  @override
  EntityListBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      EntityListBuilder()..copyFromHeader(headerFrom);

  EntityListBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _op = _$v!.op;
      _list = _$v!.list;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(EntityList other) {
    _$v = other as _$EntityList;
  }

  @override
  void update(void Function(EntityListBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  EntityList build() {
    final result = _$v ??
        _$EntityList._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            op: op,
            list: list);
    replace(result);
    return result;
  }
}

/// CPU Usage immutable class
///
class _$CpuUsage extends CpuUsage {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int value;

  factory _$CpuUsage([void Function(CpuUsageBuilder b)? updates]) =>
      (CpuUsageBuilder()..update(updates)).build() as _$CpuUsage;

  factory _$CpuUsage.fromJson(core.Map<String, dynamic> json) {
    var val = CpuUsageBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as int : 0;

    return val.build() as _$CpuUsage;
  }

  _$CpuUsage._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  CpuUsage rebuild(void Function(CpuUsageBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  CpuUsageBuilder toBuilder() => CpuUsageBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is CpuUsage &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        value == other.value;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('CpuUsage')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (%)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'CpuUsage',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// CPU Usage builder class
///
class CpuUsageBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<CpuUsage, CpuUsageBuilder> {
  _$CpuUsage? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _value = 0;
  int get value => _$this._value;
  set value(int value) => _$this._value = value;

  CpuUsageBuilder();

  CpuUsageBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  CpuUsageBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$CpuUsage.fromJson(json);
    replace(v);
  }

  @override
  CpuUsageBuilder fromJson(core.Map<String, dynamic> json) =>
      CpuUsageBuilder.fromJson(json);

  @override
  CpuUsageBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      CpuUsageBuilder()..copyFromHeader(headerFrom);

  CpuUsageBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(CpuUsage other) {
    _$v = other as _$CpuUsage;
  }

  @override
  void update(void Function(CpuUsageBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  CpuUsage build() {
    final result = _$v ??
        _$CpuUsage._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Transport Bindings immutable class
///
class _$TransportBindings extends TransportBindings {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String consumer;
  @override
  final int messageId;

  factory _$TransportBindings(
          [void Function(TransportBindingsBuilder b)? updates]) =>
      (TransportBindingsBuilder()..update(updates)).build()
          as _$TransportBindings;

  factory _$TransportBindings.fromJson(core.Map<String, dynamic> json) {
    var val = TransportBindingsBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.consumer = json.containsKey('consumer') && json['consumer'] != null
        ? json['consumer'] as String
        : '';
    val.messageId =
        json.containsKey('message_id') ? json['message_id'] as int : 0;

    return val.build() as _$TransportBindings;
  }

  _$TransportBindings._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.consumer,
      required this.messageId})
      : super._();

  @override
  TransportBindings rebuild(
          void Function(TransportBindingsBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  TransportBindingsBuilder toBuilder() =>
      TransportBindingsBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is TransportBindings &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        consumer == other.consumer &&
        messageId == other.messageId;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            consumer.hashCode),
        messageId.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('TransportBindings')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('consumer', consumer)
          ..add('messageId', '$messageId'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'TransportBindings',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'consumer': consumer,
        'message_id': messageId,
      };
}

/// Transport Bindings builder class
///
class TransportBindingsBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<TransportBindings, TransportBindingsBuilder> {
  _$TransportBindings? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _consumer = '';
  String get consumer => _$this._consumer;
  set consumer(String consumer) => _$this._consumer = consumer;

  int _messageId = 0;
  int get messageId => _$this._messageId;
  set messageId(int messageId) => _$this._messageId = messageId;

  TransportBindingsBuilder();

  TransportBindingsBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  TransportBindingsBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$TransportBindings.fromJson(json);
    replace(v);
  }

  @override
  TransportBindingsBuilder fromJson(core.Map<String, dynamic> json) =>
      TransportBindingsBuilder.fromJson(json);

  @override
  TransportBindingsBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      TransportBindingsBuilder()..copyFromHeader(headerFrom);

  TransportBindingsBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _consumer = _$v!.consumer;
      _messageId = _$v!.messageId;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(TransportBindings other) {
    _$v = other as _$TransportBindings;
  }

  @override
  void update(void Function(TransportBindingsBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  TransportBindings build() {
    final result = _$v ??
        _$TransportBindings._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            consumer: consumer,
            messageId: messageId);
    replace(result);
    return result;
  }
}

/// Restart System immutable class
///
class _$RestartSystem extends RestartSystem {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final RestartSystemEnumType type;

  factory _$RestartSystem([void Function(RestartSystemBuilder b)? updates]) =>
      (RestartSystemBuilder()..update(updates)).build() as _$RestartSystem;

  factory _$RestartSystem.fromJson(core.Map<String, dynamic> json) {
    var val = RestartSystemBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.type = json.containsKey('type') && json['type'] != null
        ? RestartSystemEnumType(json['type'] as int)
        : RestartSystemEnumType(0);

    return val.build() as _$RestartSystem;
  }

  _$RestartSystem._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.type})
      : super._();

  @override
  RestartSystem rebuild(void Function(RestartSystemBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  RestartSystemBuilder toBuilder() => RestartSystemBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is RestartSystem &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        type == other.type;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        type.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('RestartSystem')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('type', '$type (Enumerated) [${type.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'RestartSystem',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'type': type.value,
      };
}

/// Restart System builder class
///
class RestartSystemBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<RestartSystem, RestartSystemBuilder> {
  _$RestartSystem? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  RestartSystemEnumType _type = RestartSystemEnumType(0);
  RestartSystemEnumType get type => _$this._type;
  set type(RestartSystemEnumType type) => _$this._type = type;

  RestartSystemBuilder();

  RestartSystemBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  RestartSystemBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$RestartSystem.fromJson(json);
    replace(v);
  }

  @override
  RestartSystemBuilder fromJson(core.Map<String, dynamic> json) =>
      RestartSystemBuilder.fromJson(json);

  @override
  RestartSystemBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      RestartSystemBuilder()..copyFromHeader(headerFrom);

  RestartSystemBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _type = _$v!.type;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(RestartSystem other) {
    _$v = other as _$RestartSystem;
  }

  @override
  void update(void Function(RestartSystemBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  RestartSystem build() {
    final result = _$v ??
        _$RestartSystem._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            type: type);
    replace(result);
    return result;
  }
}

/// Device Calibration Control immutable class
///
class _$DevCalibrationControl extends DevCalibrationControl {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final DevCalibrationControlEnumOp op;

  factory _$DevCalibrationControl(
          [void Function(DevCalibrationControlBuilder b)? updates]) =>
      (DevCalibrationControlBuilder()..update(updates)).build()
          as _$DevCalibrationControl;

  factory _$DevCalibrationControl.fromJson(core.Map<String, dynamic> json) {
    var val = DevCalibrationControlBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.op = json.containsKey('op') && json['op'] != null
        ? DevCalibrationControlEnumOp(json['op'] as int)
        : DevCalibrationControlEnumOp(0);

    return val.build() as _$DevCalibrationControl;
  }

  _$DevCalibrationControl._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.op})
      : super._();

  @override
  DevCalibrationControl rebuild(
          void Function(DevCalibrationControlBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DevCalibrationControlBuilder toBuilder() =>
      DevCalibrationControlBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is DevCalibrationControl &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        op == other.op;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        op.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('DevCalibrationControl')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'DevCalibrationControl',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'op': op.value,
      };
}

/// Device Calibration Control builder class
///
class DevCalibrationControlBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<DevCalibrationControl,
            DevCalibrationControlBuilder> {
  _$DevCalibrationControl? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  DevCalibrationControlEnumOp _op = DevCalibrationControlEnumOp(0);
  DevCalibrationControlEnumOp get op => _$this._op;
  set op(DevCalibrationControlEnumOp op) => _$this._op = op;

  DevCalibrationControlBuilder();

  DevCalibrationControlBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DevCalibrationControlBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$DevCalibrationControl.fromJson(json);
    replace(v);
  }

  @override
  DevCalibrationControlBuilder fromJson(core.Map<String, dynamic> json) =>
      DevCalibrationControlBuilder.fromJson(json);

  @override
  DevCalibrationControlBuilder newInstance(
          [ImcBuilderHeaderPart? headerFrom]) =>
      DevCalibrationControlBuilder()..copyFromHeader(headerFrom);

  DevCalibrationControlBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _op = _$v!.op;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(DevCalibrationControl other) {
    _$v = other as _$DevCalibrationControl;
  }

  @override
  void update(void Function(DevCalibrationControlBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  DevCalibrationControl build() {
    final result = _$v ??
        _$DevCalibrationControl._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            op: op);
    replace(result);
    return result;
  }
}

/// Device Calibration State immutable class
///
class _$DevCalibrationState extends DevCalibrationState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int totalSteps;
  @override
  final int stepNumber;
  @override
  final String step;
  @override
  final DevCalibrationStateBitfieldFlags flags;

  factory _$DevCalibrationState(
          [void Function(DevCalibrationStateBuilder b)? updates]) =>
      (DevCalibrationStateBuilder()..update(updates)).build()
          as _$DevCalibrationState;

  factory _$DevCalibrationState.fromJson(core.Map<String, dynamic> json) {
    var val = DevCalibrationStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.totalSteps =
        json.containsKey('total_steps') ? json['total_steps'] as int : 0;
    val.stepNumber =
        json.containsKey('step_number') ? json['step_number'] as int : 0;
    val.step = json.containsKey('step') && json['step'] != null
        ? json['step'] as String
        : '';
    val.flags = json.containsKey('flags') && json['flags'] != null
        ? DevCalibrationStateBitfieldFlags(json['flags'] as int)
        : DevCalibrationStateBitfieldFlags(0);

    return val.build() as _$DevCalibrationState;
  }

  _$DevCalibrationState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.totalSteps,
      required this.stepNumber,
      required this.step,
      required this.flags})
      : super._();

  @override
  DevCalibrationState rebuild(
          void Function(DevCalibrationStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DevCalibrationStateBuilder toBuilder() =>
      DevCalibrationStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is DevCalibrationState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        totalSteps == other.totalSteps &&
        stepNumber == other.stepNumber &&
        step == other.step &&
        flags == other.flags;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    totalSteps.hashCode),
                stepNumber.hashCode),
            step.hashCode),
        flags.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('DevCalibrationState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('totalSteps', '$totalSteps')
          ..add('stepNumber', '$stepNumber')
          ..add('step', step)
          ..add('flags', '$flags (Bitfield) [${flags.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'DevCalibrationState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'total_steps': totalSteps,
        'step_number': stepNumber,
        'step': step,
        'flags': flags.value,
      };
}

/// Device Calibration State builder class
///
class DevCalibrationStateBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<DevCalibrationState,
            DevCalibrationStateBuilder> {
  _$DevCalibrationState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _totalSteps = 0;
  int get totalSteps => _$this._totalSteps;
  set totalSteps(int totalSteps) => _$this._totalSteps = totalSteps;

  int _stepNumber = 0;
  int get stepNumber => _$this._stepNumber;
  set stepNumber(int stepNumber) => _$this._stepNumber = stepNumber;

  String _step = '';
  String get step => _$this._step;
  set step(String step) => _$this._step = step;

  DevCalibrationStateBitfieldFlags _flags = DevCalibrationStateBitfieldFlags(0);
  DevCalibrationStateBitfieldFlags get flags => _$this._flags;
  set flags(DevCalibrationStateBitfieldFlags flags) => _$this._flags = flags;

  DevCalibrationStateBuilder();

  DevCalibrationStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DevCalibrationStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$DevCalibrationState.fromJson(json);
    replace(v);
  }

  @override
  DevCalibrationStateBuilder fromJson(core.Map<String, dynamic> json) =>
      DevCalibrationStateBuilder.fromJson(json);

  @override
  DevCalibrationStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      DevCalibrationStateBuilder()..copyFromHeader(headerFrom);

  DevCalibrationStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _totalSteps = _$v!.totalSteps;
      _stepNumber = _$v!.stepNumber;
      _step = _$v!.step;
      _flags = _$v!.flags;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(DevCalibrationState other) {
    _$v = other as _$DevCalibrationState;
  }

  @override
  void update(void Function(DevCalibrationStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  DevCalibrationState build() {
    final result = _$v ??
        _$DevCalibrationState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            totalSteps: totalSteps,
            stepNumber: stepNumber,
            step: step,
            flags: flags);
    replace(result);
    return result;
  }
}

/// Entity Activation State immutable class
///
class _$EntityActivationState extends EntityActivationState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final EntityActivationStateEnumState state;
  @override
  final String error;

  factory _$EntityActivationState(
          [void Function(EntityActivationStateBuilder b)? updates]) =>
      (EntityActivationStateBuilder()..update(updates)).build()
          as _$EntityActivationState;

  factory _$EntityActivationState.fromJson(core.Map<String, dynamic> json) {
    var val = EntityActivationStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.state = json.containsKey('state') && json['state'] != null
        ? EntityActivationStateEnumState(json['state'] as int)
        : EntityActivationStateEnumState(0);
    val.error = json.containsKey('error') && json['error'] != null
        ? json['error'] as String
        : '';

    return val.build() as _$EntityActivationState;
  }

  _$EntityActivationState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.state,
      required this.error})
      : super._();

  @override
  EntityActivationState rebuild(
          void Function(EntityActivationStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  EntityActivationStateBuilder toBuilder() =>
      EntityActivationStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is EntityActivationState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        state == other.state &&
        error == other.error;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            state.hashCode),
        error.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('EntityActivationState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('state', '$state (Enumerated) [${state.toPrettyString()}]')
          ..add('error', error))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'EntityActivationState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'state': state.value,
        'error': error,
      };
}

/// Entity Activation State builder class
///
class EntityActivationStateBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<EntityActivationState,
            EntityActivationStateBuilder> {
  _$EntityActivationState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  EntityActivationStateEnumState _state = EntityActivationStateEnumState(0);
  EntityActivationStateEnumState get state => _$this._state;
  set state(EntityActivationStateEnumState state) => _$this._state = state;

  String _error = '';
  String get error => _$this._error;
  set error(String error) => _$this._error = error;

  EntityActivationStateBuilder();

  EntityActivationStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  EntityActivationStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$EntityActivationState.fromJson(json);
    replace(v);
  }

  @override
  EntityActivationStateBuilder fromJson(core.Map<String, dynamic> json) =>
      EntityActivationStateBuilder.fromJson(json);

  @override
  EntityActivationStateBuilder newInstance(
          [ImcBuilderHeaderPart? headerFrom]) =>
      EntityActivationStateBuilder()..copyFromHeader(headerFrom);

  EntityActivationStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _state = _$v!.state;
      _error = _$v!.error;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(EntityActivationState other) {
    _$v = other as _$EntityActivationState;
  }

  @override
  void update(void Function(EntityActivationStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  EntityActivationState build() {
    final result = _$v ??
        _$EntityActivationState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            state: state,
            error: error);
    replace(result);
    return result;
  }
}

/// Query Entity Activation State immutable class
///
class _$QueryEntityActivationState extends QueryEntityActivationState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  factory _$QueryEntityActivationState(
          [void Function(QueryEntityActivationStateBuilder b)? updates]) =>
      (QueryEntityActivationStateBuilder()..update(updates)).build()
          as _$QueryEntityActivationState;

  factory _$QueryEntityActivationState.fromJson(
      core.Map<String, dynamic> json) {
    var val = QueryEntityActivationStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    return val.build() as _$QueryEntityActivationState;
  }

  _$QueryEntityActivationState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId})
      : super._();

  @override
  QueryEntityActivationState rebuild(
          void Function(QueryEntityActivationStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  QueryEntityActivationStateBuilder toBuilder() =>
      QueryEntityActivationStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is QueryEntityActivationState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc($jc($jc(0, timestamp?.hashCode ?? null.hashCode), src.hashCode),
                srcEnt.hashCode),
            dst.hashCode),
        dstEnt.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('QueryEntityActivationState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'QueryEntityActivationState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
      };
}

/// Query Entity Activation State builder class
///
class QueryEntityActivationStateBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<QueryEntityActivationState,
            QueryEntityActivationStateBuilder> {
  _$QueryEntityActivationState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  QueryEntityActivationStateBuilder();

  QueryEntityActivationStateBuilder.fromHeader(
      ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  QueryEntityActivationStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$QueryEntityActivationState.fromJson(json);
    replace(v);
  }

  @override
  QueryEntityActivationStateBuilder fromJson(core.Map<String, dynamic> json) =>
      QueryEntityActivationStateBuilder.fromJson(json);

  @override
  QueryEntityActivationStateBuilder newInstance(
          [ImcBuilderHeaderPart? headerFrom]) =>
      QueryEntityActivationStateBuilder()..copyFromHeader(headerFrom);

  QueryEntityActivationStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(QueryEntityActivationState other) {
    _$v = other as _$QueryEntityActivationState;
  }

  @override
  void update(void Function(QueryEntityActivationStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  QueryEntityActivationState build() {
    final result = _$v ??
        _$QueryEntityActivationState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt);
    replace(result);
    return result;
  }
}

/// Vehicle Operational Limits immutable class
///
class _$VehicleOperationalLimits extends VehicleOperationalLimits {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final VehicleOperationalLimitsEnumOp op;
  @override
  final double speedMin;
  @override
  final double speedMax;
  @override
  final double longAccel;
  @override
  final double altMaxMsl;
  @override
  final double diveFractionMax;
  @override
  final double climbFractionMax;
  @override
  final double bankMax;
  @override
  final double pMax;
  @override
  final double pitchMin;
  @override
  final double pitchMax;
  @override
  final double qMax;
  @override
  final double gMin;
  @override
  final double gMax;
  @override
  final double gLatMax;
  @override
  final double rpmMin;
  @override
  final double rpmMax;
  @override
  final double rpmRateMax;

  factory _$VehicleOperationalLimits(
          [void Function(VehicleOperationalLimitsBuilder b)? updates]) =>
      (VehicleOperationalLimitsBuilder()..update(updates)).build()
          as _$VehicleOperationalLimits;

  factory _$VehicleOperationalLimits.fromJson(core.Map<String, dynamic> json) {
    var val = VehicleOperationalLimitsBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.op = json.containsKey('op') && json['op'] != null
        ? VehicleOperationalLimitsEnumOp(json['op'] as int)
        : VehicleOperationalLimitsEnumOp(0);
    val.speedMin =
        json.containsKey('speed_min') ? json['speed_min'] as double : 0;
    val.speedMax =
        json.containsKey('speed_max') ? json['speed_max'] as double : 0;
    val.longAccel =
        json.containsKey('long_accel') ? json['long_accel'] as double : 0;
    val.altMaxMsl =
        json.containsKey('alt_max_msl') ? json['alt_max_msl'] as double : 0;
    val.diveFractionMax = json.containsKey('dive_fraction_max')
        ? json['dive_fraction_max'] as double
        : 0;
    val.climbFractionMax = json.containsKey('climb_fraction_max')
        ? json['climb_fraction_max'] as double
        : 0;
    val.bankMax = json.containsKey('bank_max') ? json['bank_max'] as double : 0;
    val.pMax = json.containsKey('p_max') ? json['p_max'] as double : 0;
    val.pitchMin =
        json.containsKey('pitch_min') ? json['pitch_min'] as double : 0;
    val.pitchMax =
        json.containsKey('pitch_max') ? json['pitch_max'] as double : 0;
    val.qMax = json.containsKey('q_max') ? json['q_max'] as double : 0;
    val.gMin = json.containsKey('g_min') ? json['g_min'] as double : 0;
    val.gMax = json.containsKey('g_max') ? json['g_max'] as double : 0;
    val.gLatMax =
        json.containsKey('g_lat_max') ? json['g_lat_max'] as double : 0;
    val.rpmMin = json.containsKey('rpm_min') ? json['rpm_min'] as double : 0;
    val.rpmMax = json.containsKey('rpm_max') ? json['rpm_max'] as double : 0;
    val.rpmRateMax =
        json.containsKey('rpm_rate_max') ? json['rpm_rate_max'] as double : 0;

    return val.build() as _$VehicleOperationalLimits;
  }

  _$VehicleOperationalLimits._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.op,
      required this.speedMin,
      required this.speedMax,
      required this.longAccel,
      required this.altMaxMsl,
      required this.diveFractionMax,
      required this.climbFractionMax,
      required this.bankMax,
      required this.pMax,
      required this.pitchMin,
      required this.pitchMax,
      required this.qMax,
      required this.gMin,
      required this.gMax,
      required this.gLatMax,
      required this.rpmMin,
      required this.rpmMax,
      required this.rpmRateMax})
      : super._();

  @override
  VehicleOperationalLimits rebuild(
          void Function(VehicleOperationalLimitsBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  VehicleOperationalLimitsBuilder toBuilder() =>
      VehicleOperationalLimitsBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is VehicleOperationalLimits &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        op == other.op &&
        (speedMin == other.speedMin || speedMin - other.speedMin <= 1E-7) &&
        (speedMax == other.speedMax || speedMax - other.speedMax <= 1E-7) &&
        (longAccel == other.longAccel || longAccel - other.longAccel <= 1E-7) &&
        (altMaxMsl == other.altMaxMsl || altMaxMsl - other.altMaxMsl <= 1E-7) &&
        (diveFractionMax == other.diveFractionMax ||
            diveFractionMax - other.diveFractionMax <= 1E-7) &&
        (climbFractionMax == other.climbFractionMax ||
            climbFractionMax - other.climbFractionMax <= 1E-7) &&
        (bankMax == other.bankMax || bankMax - other.bankMax <= 1E-7) &&
        (pMax == other.pMax || pMax - other.pMax <= 1E-7) &&
        (pitchMin == other.pitchMin || pitchMin - other.pitchMin <= 1E-7) &&
        (pitchMax == other.pitchMax || pitchMax - other.pitchMax <= 1E-7) &&
        (qMax == other.qMax || qMax - other.qMax <= 1E-7) &&
        (gMin == other.gMin || gMin - other.gMin <= 1E-7) &&
        (gMax == other.gMax || gMax - other.gMax <= 1E-7) &&
        (gLatMax == other.gLatMax || gLatMax - other.gLatMax <= 1E-7) &&
        (rpmMin == other.rpmMin || rpmMin - other.rpmMin <= 1E-7) &&
        (rpmMax == other.rpmMax || rpmMax - other.rpmMax <= 1E-7) &&
        (rpmRateMax == other.rpmRateMax ||
            rpmRateMax - other.rpmRateMax <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc($jc($jc($jc(0, timestamp?.hashCode ?? null.hashCode), src.hashCode), srcEnt.hashCode), dst.hashCode),
                                                                                dstEnt.hashCode),
                                                                            op.hashCode),
                                                                        speedMin.hashCode),
                                                                    speedMax.hashCode),
                                                                longAccel.hashCode),
                                                            altMaxMsl.hashCode),
                                                        diveFractionMax.hashCode),
                                                    climbFractionMax.hashCode),
                                                bankMax.hashCode),
                                            pMax.hashCode),
                                        pitchMin.hashCode),
                                    pitchMax.hashCode),
                                qMax.hashCode),
                            gMin.hashCode),
                        gMax.hashCode),
                    gLatMax.hashCode),
                rpmMin.hashCode),
            rpmMax.hashCode),
        rpmRateMax.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('VehicleOperationalLimits')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]')
          ..add('speedMin', '$speedMin (m/s)')
          ..add('speedMax', '$speedMax (m/s)')
          ..add('longAccel', '$longAccel (m/s/s)')
          ..add('altMaxMsl', '$altMaxMsl (m)')
          ..add('diveFractionMax', '$diveFractionMax')
          ..add('climbFractionMax', '$climbFractionMax')
          ..add(
              'bankMax', '$bankMax (rad) [${bankMax * 180.0 / math.pi} (deg)]')
          ..add('pMax', '$pMax (rad/s) [${pMax * 180.0 / math.pi} (deg/s)]')
          ..add('pitchMin',
              '$pitchMin (rad) [${pitchMin * 180.0 / math.pi} (deg)]')
          ..add('pitchMax',
              '$pitchMax (rad) [${pitchMax * 180.0 / math.pi} (deg)]')
          ..add('qMax', '$qMax (rad/s) [${qMax * 180.0 / math.pi} (deg/s)]')
          ..add('gMin', '$gMin (g)')
          ..add('gMax', '$gMax (g)')
          ..add('gLatMax', '$gLatMax (g)')
          ..add('rpmMin', '$rpmMin (rpm)')
          ..add('rpmMax', '$rpmMax (rpm)')
          ..add('rpmRateMax', '$rpmRateMax (rpm/s)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'VehicleOperationalLimits',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'op': op.value,
        'speed_min': speedMin,
        'speed_max': speedMax,
        'long_accel': longAccel,
        'alt_max_msl': altMaxMsl,
        'dive_fraction_max': diveFractionMax,
        'climb_fraction_max': climbFractionMax,
        'bank_max': bankMax,
        'p_max': pMax,
        'pitch_min': pitchMin,
        'pitch_max': pitchMax,
        'q_max': qMax,
        'g_min': gMin,
        'g_max': gMax,
        'g_lat_max': gLatMax,
        'rpm_min': rpmMin,
        'rpm_max': rpmMax,
        'rpm_rate_max': rpmRateMax,
      };
}

/// Vehicle Operational Limits builder class
///
class VehicleOperationalLimitsBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<VehicleOperationalLimits,
            VehicleOperationalLimitsBuilder> {
  _$VehicleOperationalLimits? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  VehicleOperationalLimitsEnumOp _op = VehicleOperationalLimitsEnumOp(0);
  VehicleOperationalLimitsEnumOp get op => _$this._op;
  set op(VehicleOperationalLimitsEnumOp op) => _$this._op = op;

  double _speedMin = 0;
  double get speedMin => _$this._speedMin;
  set speedMin(double speedMin) => _$this._speedMin = speedMin;

  double _speedMax = 0;
  double get speedMax => _$this._speedMax;
  set speedMax(double speedMax) => _$this._speedMax = speedMax;

  double _longAccel = 0;
  double get longAccel => _$this._longAccel;
  set longAccel(double longAccel) => _$this._longAccel = longAccel;

  double _altMaxMsl = 0;
  double get altMaxMsl => _$this._altMaxMsl;
  set altMaxMsl(double altMaxMsl) => _$this._altMaxMsl = altMaxMsl;

  double _diveFractionMax = 0;
  double get diveFractionMax => _$this._diveFractionMax;
  set diveFractionMax(double diveFractionMax) =>
      _$this._diveFractionMax = diveFractionMax;

  double _climbFractionMax = 0;
  double get climbFractionMax => _$this._climbFractionMax;
  set climbFractionMax(double climbFractionMax) =>
      _$this._climbFractionMax = climbFractionMax;

  double _bankMax = 0;
  double get bankMax => _$this._bankMax;
  set bankMax(double bankMax) => _$this._bankMax = bankMax;

  double _pMax = 0;
  double get pMax => _$this._pMax;
  set pMax(double pMax) => _$this._pMax = pMax;

  double _pitchMin = 0;
  double get pitchMin => _$this._pitchMin;
  set pitchMin(double pitchMin) => _$this._pitchMin = pitchMin;

  double _pitchMax = 0;
  double get pitchMax => _$this._pitchMax;
  set pitchMax(double pitchMax) => _$this._pitchMax = pitchMax;

  double _qMax = 0;
  double get qMax => _$this._qMax;
  set qMax(double qMax) => _$this._qMax = qMax;

  double _gMin = 0;
  double get gMin => _$this._gMin;
  set gMin(double gMin) => _$this._gMin = gMin;

  double _gMax = 0;
  double get gMax => _$this._gMax;
  set gMax(double gMax) => _$this._gMax = gMax;

  double _gLatMax = 0;
  double get gLatMax => _$this._gLatMax;
  set gLatMax(double gLatMax) => _$this._gLatMax = gLatMax;

  double _rpmMin = 0;
  double get rpmMin => _$this._rpmMin;
  set rpmMin(double rpmMin) => _$this._rpmMin = rpmMin;

  double _rpmMax = 0;
  double get rpmMax => _$this._rpmMax;
  set rpmMax(double rpmMax) => _$this._rpmMax = rpmMax;

  double _rpmRateMax = 0;
  double get rpmRateMax => _$this._rpmRateMax;
  set rpmRateMax(double rpmRateMax) => _$this._rpmRateMax = rpmRateMax;

  VehicleOperationalLimitsBuilder();

  VehicleOperationalLimitsBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  VehicleOperationalLimitsBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$VehicleOperationalLimits.fromJson(json);
    replace(v);
  }

  @override
  VehicleOperationalLimitsBuilder fromJson(core.Map<String, dynamic> json) =>
      VehicleOperationalLimitsBuilder.fromJson(json);

  @override
  VehicleOperationalLimitsBuilder newInstance(
          [ImcBuilderHeaderPart? headerFrom]) =>
      VehicleOperationalLimitsBuilder()..copyFromHeader(headerFrom);

  VehicleOperationalLimitsBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _op = _$v!.op;
      _speedMin = _$v!.speedMin;
      _speedMax = _$v!.speedMax;
      _longAccel = _$v!.longAccel;
      _altMaxMsl = _$v!.altMaxMsl;
      _diveFractionMax = _$v!.diveFractionMax;
      _climbFractionMax = _$v!.climbFractionMax;
      _bankMax = _$v!.bankMax;
      _pMax = _$v!.pMax;
      _pitchMin = _$v!.pitchMin;
      _pitchMax = _$v!.pitchMax;
      _qMax = _$v!.qMax;
      _gMin = _$v!.gMin;
      _gMax = _$v!.gMax;
      _gLatMax = _$v!.gLatMax;
      _rpmMin = _$v!.rpmMin;
      _rpmMax = _$v!.rpmMax;
      _rpmRateMax = _$v!.rpmRateMax;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(VehicleOperationalLimits other) {
    _$v = other as _$VehicleOperationalLimits;
  }

  @override
  void update(void Function(VehicleOperationalLimitsBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  VehicleOperationalLimits build() {
    final result = _$v ??
        _$VehicleOperationalLimits._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            op: op,
            speedMin: speedMin,
            speedMax: speedMax,
            longAccel: longAccel,
            altMaxMsl: altMaxMsl,
            diveFractionMax: diveFractionMax,
            climbFractionMax: climbFractionMax,
            bankMax: bankMax,
            pMax: pMax,
            pitchMin: pitchMin,
            pitchMax: pitchMax,
            qMax: qMax,
            gMin: gMin,
            gMax: gMax,
            gLatMax: gLatMax,
            rpmMin: rpmMin,
            rpmMax: rpmMax,
            rpmRateMax: rpmRateMax);
    replace(result);
    return result;
  }
}

/// Message List immutable class
///
class _$MsgList extends MsgList {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final List<ImcMessage> msgs;

  factory _$MsgList([void Function(MsgListBuilder b)? updates]) =>
      (MsgListBuilder()..update(updates)).build() as _$MsgList;

  factory _$MsgList.fromJson(core.Map<String, dynamic> json) {
    var val = MsgListBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    var msgs = <ImcMessage>[];
    if (json.containsKey('msgs') && json['msgs'] != null) {
      var listJson = json['msgs'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as ImcMessage?;
          if (m != null) msgs.add(m);
        }
      }
    }
    val.msgs = msgs;

    return val.build() as _$MsgList;
  }

  _$MsgList._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.msgs})
      : super._();

  @override
  MsgList rebuild(void Function(MsgListBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  MsgListBuilder toBuilder() => MsgListBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is MsgList &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        DeepCollectionEquality().equals(msgs, other.msgs);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        msgs.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('MsgList')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('msgs', '$msgs'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'MsgList',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'msgs': [
          ...msgs.map((m) => m.toJson(false)),
        ],
      };
}

/// Message List builder class
///
class MsgListBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<MsgList, MsgListBuilder> {
  _$MsgList? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  List<ImcMessage> _msgs = <ImcMessage>[];
  List<ImcMessage> get msgs => _$this._msgs;
  set msgs(List<ImcMessage> msgs) => _$this._msgs = msgs;

  MsgListBuilder();

  MsgListBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  MsgListBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$MsgList.fromJson(json);
    replace(v);
  }

  @override
  MsgListBuilder fromJson(core.Map<String, dynamic> json) =>
      MsgListBuilder.fromJson(json);

  @override
  MsgListBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      MsgListBuilder()..copyFromHeader(headerFrom);

  MsgListBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _msgs = _$v!.msgs;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(MsgList other) {
    _$v = other as _$MsgList;
  }

  @override
  void update(void Function(MsgListBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  MsgList build() {
    final result = _$v ??
        _$MsgList._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            msgs: msgs);
    replace(result);
    return result;
  }
}

/// Simulated State immutable class
///
class _$SimulatedState extends SimulatedState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double lat;
  @override
  final double lon;
  @override
  final double height;
  @override
  final double x;
  @override
  final double y;
  @override
  final double z;
  @override
  final double phi;
  @override
  final double theta;
  @override
  final double psi;
  @override
  final double u;
  @override
  final double v;
  @override
  final double w;
  @override
  final double p;
  @override
  final double q;
  @override
  final double r;
  @override
  final double svx;
  @override
  final double svy;
  @override
  final double svz;

  factory _$SimulatedState([void Function(SimulatedStateBuilder b)? updates]) =>
      (SimulatedStateBuilder()..update(updates)).build() as _$SimulatedState;

  factory _$SimulatedState.fromJson(core.Map<String, dynamic> json) {
    var val = SimulatedStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.height = json.containsKey('height') ? json['height'] as double : 0;
    val.x = json.containsKey('x') ? json['x'] as double : 0;
    val.y = json.containsKey('y') ? json['y'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.phi = json.containsKey('phi') ? json['phi'] as double : 0;
    val.theta = json.containsKey('theta') ? json['theta'] as double : 0;
    val.psi = json.containsKey('psi') ? json['psi'] as double : 0;
    val.u = json.containsKey('u') ? json['u'] as double : 0;
    val.v = json.containsKey('v') ? json['v'] as double : 0;
    val.w = json.containsKey('w') ? json['w'] as double : 0;
    val.p = json.containsKey('p') ? json['p'] as double : 0;
    val.q = json.containsKey('q') ? json['q'] as double : 0;
    val.r = json.containsKey('r') ? json['r'] as double : 0;
    val.svx = json.containsKey('svx') ? json['svx'] as double : 0;
    val.svy = json.containsKey('svy') ? json['svy'] as double : 0;
    val.svz = json.containsKey('svz') ? json['svz'] as double : 0;

    return val.build() as _$SimulatedState;
  }

  _$SimulatedState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.lat,
      required this.lon,
      required this.height,
      required this.x,
      required this.y,
      required this.z,
      required this.phi,
      required this.theta,
      required this.psi,
      required this.u,
      required this.v,
      required this.w,
      required this.p,
      required this.q,
      required this.r,
      required this.svx,
      required this.svy,
      required this.svz})
      : super._();

  @override
  SimulatedState rebuild(void Function(SimulatedStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SimulatedStateBuilder toBuilder() => SimulatedStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is SimulatedState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (height == other.height || height - other.height <= 1E-7) &&
        (x == other.x || x - other.x <= 1E-7) &&
        (y == other.y || y - other.y <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        (phi == other.phi || phi - other.phi <= 1E-7) &&
        (theta == other.theta || theta - other.theta <= 1E-7) &&
        (psi == other.psi || psi - other.psi <= 1E-7) &&
        (u == other.u || u - other.u <= 1E-7) &&
        (v == other.v || v - other.v <= 1E-7) &&
        (w == other.w || w - other.w <= 1E-7) &&
        (p == other.p || p - other.p <= 1E-7) &&
        (q == other.q || q - other.q <= 1E-7) &&
        (r == other.r || r - other.r <= 1E-7) &&
        (svx == other.svx || svx - other.svx <= 1E-7) &&
        (svy == other.svy || svy - other.svy <= 1E-7) &&
        (svz == other.svz || svz - other.svz <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc($jc($jc($jc(0, timestamp?.hashCode ?? null.hashCode), src.hashCode), srcEnt.hashCode), dst.hashCode),
                                                                                dstEnt.hashCode),
                                                                            lat.hashCode),
                                                                        lon.hashCode),
                                                                    height.hashCode),
                                                                x.hashCode),
                                                            y.hashCode),
                                                        z.hashCode),
                                                    phi.hashCode),
                                                theta.hashCode),
                                            psi.hashCode),
                                        u.hashCode),
                                    v.hashCode),
                                w.hashCode),
                            p.hashCode),
                        q.hashCode),
                    r.hashCode),
                svx.hashCode),
            svy.hashCode),
        svz.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('SimulatedState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('height', '$height (m)')
          ..add('x', '$x (m)')
          ..add('y', '$y (m)')
          ..add('z', '$z (m)')
          ..add('phi', '$phi (rad) [${phi * 180.0 / math.pi} (deg)]')
          ..add('theta', '$theta (rad) [${theta * 180.0 / math.pi} (deg)]')
          ..add('psi', '$psi (rad) [${psi * 180.0 / math.pi} (deg)]')
          ..add('u', '$u (m/s)')
          ..add('v', '$v (m/s)')
          ..add('w', '$w (m/s)')
          ..add('p', '$p (rad/s) [${p * 180.0 / math.pi} (deg/s)]')
          ..add('q', '$q (rad/s) [${q * 180.0 / math.pi} (deg/s)]')
          ..add('r', '$r (rad/s) [${r * 180.0 / math.pi} (deg/s)]')
          ..add('svx', '$svx (m/s)')
          ..add('svy', '$svy (m/s)')
          ..add('svz', '$svz (m/s)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'SimulatedState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'lat': lat,
        'lon': lon,
        'height': height,
        'x': x,
        'y': y,
        'z': z,
        'phi': phi,
        'theta': theta,
        'psi': psi,
        'u': u,
        'v': v,
        'w': w,
        'p': p,
        'q': q,
        'r': r,
        'svx': svx,
        'svy': svy,
        'svz': svz,
      };
}

/// Simulated State builder class
///
class SimulatedStateBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<SimulatedState, SimulatedStateBuilder> {
  _$SimulatedState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _height = 0;
  double get height => _$this._height;
  set height(double height) => _$this._height = height;

  double _x = 0;
  double get x => _$this._x;
  set x(double x) => _$this._x = x;

  double _y = 0;
  double get y => _$this._y;
  set y(double y) => _$this._y = y;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  double _phi = 0;
  double get phi => _$this._phi;
  set phi(double phi) => _$this._phi = phi;

  double _theta = 0;
  double get theta => _$this._theta;
  set theta(double theta) => _$this._theta = theta;

  double _psi = 0;
  double get psi => _$this._psi;
  set psi(double psi) => _$this._psi = psi;

  double _u = 0;
  double get u => _$this._u;
  set u(double u) => _$this._u = u;

  double _v = 0;
  double get v => _$this._v;
  set v(double v) => _$this._v = v;

  double _w = 0;
  double get w => _$this._w;
  set w(double w) => _$this._w = w;

  double _p = 0;
  double get p => _$this._p;
  set p(double p) => _$this._p = p;

  double _q = 0;
  double get q => _$this._q;
  set q(double q) => _$this._q = q;

  double _r = 0;
  double get r => _$this._r;
  set r(double r) => _$this._r = r;

  double _svx = 0;
  double get svx => _$this._svx;
  set svx(double svx) => _$this._svx = svx;

  double _svy = 0;
  double get svy => _$this._svy;
  set svy(double svy) => _$this._svy = svy;

  double _svz = 0;
  double get svz => _$this._svz;
  set svz(double svz) => _$this._svz = svz;

  SimulatedStateBuilder();

  SimulatedStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SimulatedStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$SimulatedState.fromJson(json);
    replace(v);
  }

  @override
  SimulatedStateBuilder fromJson(core.Map<String, dynamic> json) =>
      SimulatedStateBuilder.fromJson(json);

  @override
  SimulatedStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SimulatedStateBuilder()..copyFromHeader(headerFrom);

  SimulatedStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _height = _$v!.height;
      _x = _$v!.x;
      _y = _$v!.y;
      _z = _$v!.z;
      _phi = _$v!.phi;
      _theta = _$v!.theta;
      _psi = _$v!.psi;
      _u = _$v!.u;
      _v = _$v!.v;
      _w = _$v!.w;
      _p = _$v!.p;
      _q = _$v!.q;
      _r = _$v!.r;
      _svx = _$v!.svx;
      _svy = _$v!.svy;
      _svz = _$v!.svz;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(SimulatedState other) {
    _$v = other as _$SimulatedState;
  }

  @override
  void update(void Function(SimulatedStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  SimulatedState build() {
    final result = _$v ??
        _$SimulatedState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            lat: lat,
            lon: lon,
            height: height,
            x: x,
            y: y,
            z: z,
            phi: phi,
            theta: theta,
            psi: psi,
            u: u,
            v: v,
            w: w,
            p: p,
            q: q,
            r: r,
            svx: svx,
            svy: svy,
            svz: svz);
    replace(result);
    return result;
  }
}

/// Leak Simulation immutable class
///
class _$LeakSimulation extends LeakSimulation {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final LeakSimulationEnumOp op;
  @override
  final String entities;

  factory _$LeakSimulation([void Function(LeakSimulationBuilder b)? updates]) =>
      (LeakSimulationBuilder()..update(updates)).build() as _$LeakSimulation;

  factory _$LeakSimulation.fromJson(core.Map<String, dynamic> json) {
    var val = LeakSimulationBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.op = json.containsKey('op') && json['op'] != null
        ? LeakSimulationEnumOp(json['op'] as int)
        : LeakSimulationEnumOp(0);
    val.entities = json.containsKey('entities') && json['entities'] != null
        ? json['entities'] as String
        : '';

    return val.build() as _$LeakSimulation;
  }

  _$LeakSimulation._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.op,
      required this.entities})
      : super._();

  @override
  LeakSimulation rebuild(void Function(LeakSimulationBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  LeakSimulationBuilder toBuilder() => LeakSimulationBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is LeakSimulation &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        op == other.op &&
        entities == other.entities;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            op.hashCode),
        entities.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('LeakSimulation')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]')
          ..add('entities', entities))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'LeakSimulation',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'op': op.value,
        'entities': entities,
      };
}

/// Leak Simulation builder class
///
class LeakSimulationBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<LeakSimulation, LeakSimulationBuilder> {
  _$LeakSimulation? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  LeakSimulationEnumOp _op = LeakSimulationEnumOp(0);
  LeakSimulationEnumOp get op => _$this._op;
  set op(LeakSimulationEnumOp op) => _$this._op = op;

  String _entities = '';
  String get entities => _$this._entities;
  set entities(String entities) => _$this._entities = entities;

  LeakSimulationBuilder();

  LeakSimulationBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  LeakSimulationBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$LeakSimulation.fromJson(json);
    replace(v);
  }

  @override
  LeakSimulationBuilder fromJson(core.Map<String, dynamic> json) =>
      LeakSimulationBuilder.fromJson(json);

  @override
  LeakSimulationBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      LeakSimulationBuilder()..copyFromHeader(headerFrom);

  LeakSimulationBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _op = _$v!.op;
      _entities = _$v!.entities;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(LeakSimulation other) {
    _$v = other as _$LeakSimulation;
  }

  @override
  void update(void Function(LeakSimulationBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  LeakSimulation build() {
    final result = _$v ??
        _$LeakSimulation._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            op: op,
            entities: entities);
    replace(result);
    return result;
  }
}

/// Underwater Acoustics Simulation immutable class
///
class _$UASimulation extends UASimulation {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final UASimulationEnumType type;
  @override
  final int speed;
  @override
  final List<int> data;

  factory _$UASimulation([void Function(UASimulationBuilder b)? updates]) =>
      (UASimulationBuilder()..update(updates)).build() as _$UASimulation;

  factory _$UASimulation.fromJson(core.Map<String, dynamic> json) {
    var val = UASimulationBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.type = json.containsKey('type') && json['type'] != null
        ? UASimulationEnumType(json['type'] as int)
        : UASimulationEnumType(0);
    val.speed = json.containsKey('speed') ? json['speed'] as int : 0;
    val.data = json.containsKey('data')
        ? base64.decode(json['data'] as String)
        : <int>[];

    return val.build() as _$UASimulation;
  }

  _$UASimulation._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.type,
      required this.speed,
      required this.data})
      : super._();

  @override
  UASimulation rebuild(void Function(UASimulationBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  UASimulationBuilder toBuilder() => UASimulationBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is UASimulation &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        type == other.type &&
        speed == other.speed &&
        ListEquality().equals(data, other.data);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                type.hashCode),
            speed.hashCode),
        data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('UASimulation')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('type', '$type (Enumerated) [${type.toPrettyString()}]')
          ..add('speed', '$speed (bps)')
          ..add('data', '$data'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'UASimulation',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'type': type.value,
        'speed': speed,
        'data': base64.encode(data),
      };
}

/// Underwater Acoustics Simulation builder class
///
class UASimulationBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<UASimulation, UASimulationBuilder> {
  _$UASimulation? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  UASimulationEnumType _type = UASimulationEnumType(0);
  UASimulationEnumType get type => _$this._type;
  set type(UASimulationEnumType type) => _$this._type = type;

  int _speed = 0;
  int get speed => _$this._speed;
  set speed(int speed) => _$this._speed = speed;

  List<int> _data = <int>[];
  List<int> get data => _$this._data;
  set data(List<int> data) => _$this._data = data;

  UASimulationBuilder();

  UASimulationBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  UASimulationBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$UASimulation.fromJson(json);
    replace(v);
  }

  @override
  UASimulationBuilder fromJson(core.Map<String, dynamic> json) =>
      UASimulationBuilder.fromJson(json);

  @override
  UASimulationBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      UASimulationBuilder()..copyFromHeader(headerFrom);

  UASimulationBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _type = _$v!.type;
      _speed = _$v!.speed;
      _data = _$v!.data;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(UASimulation other) {
    _$v = other as _$UASimulation;
  }

  @override
  void update(void Function(UASimulationBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  UASimulation build() {
    final result = _$v ??
        _$UASimulation._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            type: type,
            speed: speed,
            data: data);
    replace(result);
    return result;
  }
}

/// Dynamics Simulation Parameters immutable class
///
class _$DynamicsSimParam extends DynamicsSimParam {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final DynamicsSimParamEnumOp op;
  @override
  final double tas2accPgain;
  @override
  final double bank2pPgain;

  factory _$DynamicsSimParam(
          [void Function(DynamicsSimParamBuilder b)? updates]) =>
      (DynamicsSimParamBuilder()..update(updates)).build()
          as _$DynamicsSimParam;

  factory _$DynamicsSimParam.fromJson(core.Map<String, dynamic> json) {
    var val = DynamicsSimParamBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.op = json.containsKey('op') && json['op'] != null
        ? DynamicsSimParamEnumOp(json['op'] as int)
        : DynamicsSimParamEnumOp(0);
    val.tas2accPgain =
        json.containsKey('tas2acc_pgain') ? json['tas2acc_pgain'] as double : 0;
    val.bank2pPgain =
        json.containsKey('bank2p_pgain') ? json['bank2p_pgain'] as double : 0;

    return val.build() as _$DynamicsSimParam;
  }

  _$DynamicsSimParam._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.op,
      required this.tas2accPgain,
      required this.bank2pPgain})
      : super._();

  @override
  DynamicsSimParam rebuild(void Function(DynamicsSimParamBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DynamicsSimParamBuilder toBuilder() =>
      DynamicsSimParamBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is DynamicsSimParam &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        op == other.op &&
        (tas2accPgain == other.tas2accPgain ||
            tas2accPgain - other.tas2accPgain <= 1E-7) &&
        (bank2pPgain == other.bank2pPgain ||
            bank2pPgain - other.bank2pPgain <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                op.hashCode),
            tas2accPgain.hashCode),
        bank2pPgain.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('DynamicsSimParam')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]')
          ..add('tas2accPgain', '$tas2accPgain')
          ..add('bank2pPgain', '$bank2pPgain'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'DynamicsSimParam',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'op': op.value,
        'tas2acc_pgain': tas2accPgain,
        'bank2p_pgain': bank2pPgain,
      };
}

/// Dynamics Simulation Parameters builder class
///
class DynamicsSimParamBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<DynamicsSimParam, DynamicsSimParamBuilder> {
  _$DynamicsSimParam? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  DynamicsSimParamEnumOp _op = DynamicsSimParamEnumOp(0);
  DynamicsSimParamEnumOp get op => _$this._op;
  set op(DynamicsSimParamEnumOp op) => _$this._op = op;

  double _tas2accPgain = 0;
  double get tas2accPgain => _$this._tas2accPgain;
  set tas2accPgain(double tas2accPgain) => _$this._tas2accPgain = tas2accPgain;

  double _bank2pPgain = 0;
  double get bank2pPgain => _$this._bank2pPgain;
  set bank2pPgain(double bank2pPgain) => _$this._bank2pPgain = bank2pPgain;

  DynamicsSimParamBuilder();

  DynamicsSimParamBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DynamicsSimParamBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$DynamicsSimParam.fromJson(json);
    replace(v);
  }

  @override
  DynamicsSimParamBuilder fromJson(core.Map<String, dynamic> json) =>
      DynamicsSimParamBuilder.fromJson(json);

  @override
  DynamicsSimParamBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      DynamicsSimParamBuilder()..copyFromHeader(headerFrom);

  DynamicsSimParamBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _op = _$v!.op;
      _tas2accPgain = _$v!.tas2accPgain;
      _bank2pPgain = _$v!.bank2pPgain;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(DynamicsSimParam other) {
    _$v = other as _$DynamicsSimParam;
  }

  @override
  void update(void Function(DynamicsSimParamBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  DynamicsSimParam build() {
    final result = _$v ??
        _$DynamicsSimParam._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            op: op,
            tas2accPgain: tas2accPgain,
            bank2pPgain: bank2pPgain);
    replace(result);
    return result;
  }
}

/// Storage Usage immutable class
///
class _$StorageUsage extends StorageUsage {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int available;
  @override
  final int value;

  factory _$StorageUsage([void Function(StorageUsageBuilder b)? updates]) =>
      (StorageUsageBuilder()..update(updates)).build() as _$StorageUsage;

  factory _$StorageUsage.fromJson(core.Map<String, dynamic> json) {
    var val = StorageUsageBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.available =
        json.containsKey('available') ? json['available'] as int : 0;
    val.value = json.containsKey('value') ? json['value'] as int : 0;

    return val.build() as _$StorageUsage;
  }

  _$StorageUsage._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.available,
      required this.value})
      : super._();

  @override
  StorageUsage rebuild(void Function(StorageUsageBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  StorageUsageBuilder toBuilder() => StorageUsageBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is StorageUsage &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        available == other.available &&
        value == other.value;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            available.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('StorageUsage')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('available', '$available (MiB)')
          ..add('value', '$value (%)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'StorageUsage',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'available': available,
        'value': value,
      };
}

/// Storage Usage builder class
///
class StorageUsageBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<StorageUsage, StorageUsageBuilder> {
  _$StorageUsage? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _available = 0;
  int get available => _$this._available;
  set available(int available) => _$this._available = available;

  int _value = 0;
  int get value => _$this._value;
  set value(int value) => _$this._value = value;

  StorageUsageBuilder();

  StorageUsageBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  StorageUsageBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$StorageUsage.fromJson(json);
    replace(v);
  }

  @override
  StorageUsageBuilder fromJson(core.Map<String, dynamic> json) =>
      StorageUsageBuilder.fromJson(json);

  @override
  StorageUsageBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      StorageUsageBuilder()..copyFromHeader(headerFrom);

  StorageUsageBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _available = _$v!.available;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(StorageUsage other) {
    _$v = other as _$StorageUsage;
  }

  @override
  void update(void Function(StorageUsageBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  StorageUsage build() {
    final result = _$v ??
        _$StorageUsage._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            available: available,
            value: value);
    replace(result);
    return result;
  }
}

/// Cache Control immutable class
///
class _$CacheControl extends CacheControl {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final CacheControlEnumOp op;
  @override
  final String snapshot;
  @override
  final ImcMessage? message;

  factory _$CacheControl([void Function(CacheControlBuilder b)? updates]) =>
      (CacheControlBuilder()..update(updates)).build() as _$CacheControl;

  factory _$CacheControl.fromJson(core.Map<String, dynamic> json) {
    var val = CacheControlBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.op = json.containsKey('op') && json['op'] != null
        ? CacheControlEnumOp(json['op'] as int)
        : CacheControlEnumOp(0);
    val.snapshot = json.containsKey('snapshot') && json['snapshot'] != null
        ? json['snapshot'] as String
        : '';

    ImcMessage? message;
    if (json.containsKey('message') && json['message'] != null) {
      var msgJson = json['message'] as core.Map<String, dynamic>;
      if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
        var msgType = msgJson['abbrev'] as String;
        var builder = messagesBuilders[msgType]?.call();
        builder = builder?.fromJson(msgJson);
        message = builder?.build() as ImcMessage?;
      }
    }
    val.message = message;

    return val.build() as _$CacheControl;
  }

  _$CacheControl._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.op,
      required this.snapshot,
      this.message})
      : super._();

  @override
  CacheControl rebuild(void Function(CacheControlBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  CacheControlBuilder toBuilder() => CacheControlBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is CacheControl &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        op == other.op &&
        snapshot == other.snapshot &&
        message == other.message;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                op.hashCode),
            snapshot.hashCode),
        message?.hashCode ?? null.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('CacheControl')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]')
          ..add('snapshot', snapshot)
          ..add('message', '$message'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'CacheControl',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'op': op.value,
        'snapshot': snapshot,
        'message': message?.toJson(false),
      };
}

/// Cache Control builder class
///
class CacheControlBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<CacheControl, CacheControlBuilder> {
  _$CacheControl? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  CacheControlEnumOp _op = CacheControlEnumOp(0);
  CacheControlEnumOp get op => _$this._op;
  set op(CacheControlEnumOp op) => _$this._op = op;

  String _snapshot = '';
  String get snapshot => _$this._snapshot;
  set snapshot(String snapshot) => _$this._snapshot = snapshot;

  ImcMessage? _message;
  ImcMessage? get message => _$this._message;
  set message(ImcMessage? message) => _$this._message = message;

  CacheControlBuilder();

  CacheControlBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  CacheControlBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$CacheControl.fromJson(json);
    replace(v);
  }

  @override
  CacheControlBuilder fromJson(core.Map<String, dynamic> json) =>
      CacheControlBuilder.fromJson(json);

  @override
  CacheControlBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      CacheControlBuilder()..copyFromHeader(headerFrom);

  CacheControlBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _op = _$v!.op;
      _snapshot = _$v!.snapshot;
      _message = _$v!.message;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(CacheControl other) {
    _$v = other as _$CacheControl;
  }

  @override
  void update(void Function(CacheControlBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  CacheControl build() {
    final result = _$v ??
        _$CacheControl._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            op: op,
            snapshot: snapshot,
            message: message);
    replace(result);
    return result;
  }
}

/// Logging Control immutable class
///
class _$LoggingControl extends LoggingControl {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final LoggingControlEnumOp op;
  @override
  final String name;

  factory _$LoggingControl([void Function(LoggingControlBuilder b)? updates]) =>
      (LoggingControlBuilder()..update(updates)).build() as _$LoggingControl;

  factory _$LoggingControl.fromJson(core.Map<String, dynamic> json) {
    var val = LoggingControlBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.op = json.containsKey('op') && json['op'] != null
        ? LoggingControlEnumOp(json['op'] as int)
        : LoggingControlEnumOp(0);
    val.name = json.containsKey('name') && json['name'] != null
        ? json['name'] as String
        : '';

    return val.build() as _$LoggingControl;
  }

  _$LoggingControl._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.op,
      required this.name})
      : super._();

  @override
  LoggingControl rebuild(void Function(LoggingControlBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  LoggingControlBuilder toBuilder() => LoggingControlBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is LoggingControl &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        op == other.op &&
        name == other.name;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            op.hashCode),
        name.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('LoggingControl')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]')
          ..add('name', name))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'LoggingControl',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'op': op.value,
        'name': name,
      };
}

/// Logging Control builder class
///
class LoggingControlBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<LoggingControl, LoggingControlBuilder> {
  _$LoggingControl? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  LoggingControlEnumOp _op = LoggingControlEnumOp(0);
  LoggingControlEnumOp get op => _$this._op;
  set op(LoggingControlEnumOp op) => _$this._op = op;

  String _name = '';
  String get name => _$this._name;
  set name(String name) => _$this._name = name;

  LoggingControlBuilder();

  LoggingControlBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  LoggingControlBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$LoggingControl.fromJson(json);
    replace(v);
  }

  @override
  LoggingControlBuilder fromJson(core.Map<String, dynamic> json) =>
      LoggingControlBuilder.fromJson(json);

  @override
  LoggingControlBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      LoggingControlBuilder()..copyFromHeader(headerFrom);

  LoggingControlBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _op = _$v!.op;
      _name = _$v!.name;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(LoggingControl other) {
    _$v = other as _$LoggingControl;
  }

  @override
  void update(void Function(LoggingControlBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  LoggingControl build() {
    final result = _$v ??
        _$LoggingControl._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            op: op,
            name: name);
    replace(result);
    return result;
  }
}

/// Log Book Entry immutable class
///
class _$LogBookEntry extends LogBookEntry {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final LogBookEntryEnumType type;
  @override
  final double htime;
  @override
  final String context;
  @override
  final String text;

  factory _$LogBookEntry([void Function(LogBookEntryBuilder b)? updates]) =>
      (LogBookEntryBuilder()..update(updates)).build() as _$LogBookEntry;

  factory _$LogBookEntry.fromJson(core.Map<String, dynamic> json) {
    var val = LogBookEntryBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.type = json.containsKey('type') && json['type'] != null
        ? LogBookEntryEnumType(json['type'] as int)
        : LogBookEntryEnumType(0);
    val.htime = json.containsKey('htime') ? json['htime'] as double : 0;
    val.context = json.containsKey('context') && json['context'] != null
        ? json['context'] as String
        : '';
    val.text = json.containsKey('text') && json['text'] != null
        ? json['text'] as String
        : '';

    return val.build() as _$LogBookEntry;
  }

  _$LogBookEntry._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.type,
      required this.htime,
      required this.context,
      required this.text})
      : super._();

  @override
  LogBookEntry rebuild(void Function(LogBookEntryBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  LogBookEntryBuilder toBuilder() => LogBookEntryBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is LogBookEntry &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        type == other.type &&
        (htime == other.htime || htime - other.htime <= 1E-7) &&
        context == other.context &&
        text == other.text;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    type.hashCode),
                htime.hashCode),
            context.hashCode),
        text.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('LogBookEntry')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('type', '$type (Enumerated) [${type.toPrettyString()}]')
          ..add('htime', '$htime (s)')
          ..add('context', context)
          ..add('text', text))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'LogBookEntry',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'type': type.value,
        'htime': htime,
        'context': context,
        'text': text,
      };
}

/// Log Book Entry builder class
///
class LogBookEntryBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<LogBookEntry, LogBookEntryBuilder> {
  _$LogBookEntry? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  LogBookEntryEnumType _type = LogBookEntryEnumType(0);
  LogBookEntryEnumType get type => _$this._type;
  set type(LogBookEntryEnumType type) => _$this._type = type;

  double _htime = 0;
  double get htime => _$this._htime;
  set htime(double htime) => _$this._htime = htime;

  String _context = '';
  String get context => _$this._context;
  set context(String context) => _$this._context = context;

  String _text = '';
  String get text => _$this._text;
  set text(String text) => _$this._text = text;

  LogBookEntryBuilder();

  LogBookEntryBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  LogBookEntryBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$LogBookEntry.fromJson(json);
    replace(v);
  }

  @override
  LogBookEntryBuilder fromJson(core.Map<String, dynamic> json) =>
      LogBookEntryBuilder.fromJson(json);

  @override
  LogBookEntryBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      LogBookEntryBuilder()..copyFromHeader(headerFrom);

  LogBookEntryBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _type = _$v!.type;
      _htime = _$v!.htime;
      _context = _$v!.context;
      _text = _$v!.text;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(LogBookEntry other) {
    _$v = other as _$LogBookEntry;
  }

  @override
  void update(void Function(LogBookEntryBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  LogBookEntry build() {
    final result = _$v ??
        _$LogBookEntry._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            type: type,
            htime: htime,
            context: context,
            text: text);
    replace(result);
    return result;
  }
}

/// Log Book Control immutable class
///
class _$LogBookControl extends LogBookControl {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final LogBookControlEnumCommand command;
  @override
  final double htime;
  @override
  final List<LogBookEntry> msg;

  factory _$LogBookControl([void Function(LogBookControlBuilder b)? updates]) =>
      (LogBookControlBuilder()..update(updates)).build() as _$LogBookControl;

  factory _$LogBookControl.fromJson(core.Map<String, dynamic> json) {
    var val = LogBookControlBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.command = json.containsKey('command') && json['command'] != null
        ? LogBookControlEnumCommand(json['command'] as int)
        : LogBookControlEnumCommand(0);
    val.htime = json.containsKey('htime') ? json['htime'] as double : 0;
    var msg = <LogBookEntry>[];
    if (json.containsKey('msg') && json['msg'] != null) {
      var listJson = json['msg'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as LogBookEntry?;
          if (m != null) msg.add(m);
        }
      }
    }
    val.msg = msg;

    return val.build() as _$LogBookControl;
  }

  _$LogBookControl._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.command,
      required this.htime,
      required this.msg})
      : super._();

  @override
  LogBookControl rebuild(void Function(LogBookControlBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  LogBookControlBuilder toBuilder() => LogBookControlBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is LogBookControl &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        command == other.command &&
        (htime == other.htime || htime - other.htime <= 1E-7) &&
        DeepCollectionEquality().equals(msg, other.msg);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                command.hashCode),
            htime.hashCode),
        msg.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('LogBookControl')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add(
              'command', '$command (Enumerated) [${command.toPrettyString()}]')
          ..add('htime', '$htime (s)')
          ..add('msg', '$msg'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'LogBookControl',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'command': command.value,
        'htime': htime,
        'msg': [
          ...msg.map((m) => m.toJson(false)),
        ],
      };
}

/// Log Book Control builder class
///
class LogBookControlBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<LogBookControl, LogBookControlBuilder> {
  _$LogBookControl? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  LogBookControlEnumCommand _command = LogBookControlEnumCommand(0);
  LogBookControlEnumCommand get command => _$this._command;
  set command(LogBookControlEnumCommand command) => _$this._command = command;

  double _htime = 0;
  double get htime => _$this._htime;
  set htime(double htime) => _$this._htime = htime;

  List<LogBookEntry> _msg = <LogBookEntry>[];
  List<LogBookEntry> get msg => _$this._msg;
  set msg(List<LogBookEntry> msg) => _$this._msg = msg;

  LogBookControlBuilder();

  LogBookControlBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  LogBookControlBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$LogBookControl.fromJson(json);
    replace(v);
  }

  @override
  LogBookControlBuilder fromJson(core.Map<String, dynamic> json) =>
      LogBookControlBuilder.fromJson(json);

  @override
  LogBookControlBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      LogBookControlBuilder()..copyFromHeader(headerFrom);

  LogBookControlBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _command = _$v!.command;
      _htime = _$v!.htime;
      _msg = _$v!.msg;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(LogBookControl other) {
    _$v = other as _$LogBookControl;
  }

  @override
  void update(void Function(LogBookControlBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  LogBookControl build() {
    final result = _$v ??
        _$LogBookControl._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            command: command,
            htime: htime,
            msg: msg);
    replace(result);
    return result;
  }
}

/// Replay Control immutable class
///
class _$ReplayControl extends ReplayControl {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final ReplayControlEnumOp op;
  @override
  final String file;

  factory _$ReplayControl([void Function(ReplayControlBuilder b)? updates]) =>
      (ReplayControlBuilder()..update(updates)).build() as _$ReplayControl;

  factory _$ReplayControl.fromJson(core.Map<String, dynamic> json) {
    var val = ReplayControlBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.op = json.containsKey('op') && json['op'] != null
        ? ReplayControlEnumOp(json['op'] as int)
        : ReplayControlEnumOp(0);
    val.file = json.containsKey('file') && json['file'] != null
        ? json['file'] as String
        : '';

    return val.build() as _$ReplayControl;
  }

  _$ReplayControl._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.op,
      required this.file})
      : super._();

  @override
  ReplayControl rebuild(void Function(ReplayControlBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  ReplayControlBuilder toBuilder() => ReplayControlBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is ReplayControl &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        op == other.op &&
        file == other.file;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            op.hashCode),
        file.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('ReplayControl')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]')
          ..add('file', file))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'ReplayControl',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'op': op.value,
        'file': file,
      };
}

/// Replay Control builder class
///
class ReplayControlBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<ReplayControl, ReplayControlBuilder> {
  _$ReplayControl? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  ReplayControlEnumOp _op = ReplayControlEnumOp(0);
  ReplayControlEnumOp get op => _$this._op;
  set op(ReplayControlEnumOp op) => _$this._op = op;

  String _file = '';
  String get file => _$this._file;
  set file(String file) => _$this._file = file;

  ReplayControlBuilder();

  ReplayControlBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  ReplayControlBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$ReplayControl.fromJson(json);
    replace(v);
  }

  @override
  ReplayControlBuilder fromJson(core.Map<String, dynamic> json) =>
      ReplayControlBuilder.fromJson(json);

  @override
  ReplayControlBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      ReplayControlBuilder()..copyFromHeader(headerFrom);

  ReplayControlBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _op = _$v!.op;
      _file = _$v!.file;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(ReplayControl other) {
    _$v = other as _$ReplayControl;
  }

  @override
  void update(void Function(ReplayControlBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  ReplayControl build() {
    final result = _$v ??
        _$ReplayControl._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            op: op,
            file: file);
    replace(result);
    return result;
  }
}

/// Clock Control immutable class
///
class _$ClockControl extends ClockControl {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final ClockControlEnumOp op;
  @override
  final double clock;
  @override
  final int tz;

  factory _$ClockControl([void Function(ClockControlBuilder b)? updates]) =>
      (ClockControlBuilder()..update(updates)).build() as _$ClockControl;

  factory _$ClockControl.fromJson(core.Map<String, dynamic> json) {
    var val = ClockControlBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.op = json.containsKey('op') && json['op'] != null
        ? ClockControlEnumOp(json['op'] as int)
        : ClockControlEnumOp(0);
    val.clock = json.containsKey('clock') ? json['clock'] as double : 0;
    val.tz = json.containsKey('tz') ? json['tz'] as int : 0;

    return val.build() as _$ClockControl;
  }

  _$ClockControl._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.op,
      required this.clock,
      required this.tz})
      : super._();

  @override
  ClockControl rebuild(void Function(ClockControlBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  ClockControlBuilder toBuilder() => ClockControlBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is ClockControl &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        op == other.op &&
        (clock == other.clock || clock - other.clock <= 1E-7) &&
        tz == other.tz;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                op.hashCode),
            clock.hashCode),
        tz.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('ClockControl')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]')
          ..add('clock', '$clock (s)')
          ..add('tz', '$tz'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'ClockControl',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'op': op.value,
        'clock': clock,
        'tz': tz,
      };
}

/// Clock Control builder class
///
class ClockControlBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<ClockControl, ClockControlBuilder> {
  _$ClockControl? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  ClockControlEnumOp _op = ClockControlEnumOp(0);
  ClockControlEnumOp get op => _$this._op;
  set op(ClockControlEnumOp op) => _$this._op = op;

  double _clock = 0;
  double get clock => _$this._clock;
  set clock(double clock) => _$this._clock = clock;

  int _tz = 0;
  int get tz => _$this._tz;
  set tz(int tz) => _$this._tz = tz;

  ClockControlBuilder();

  ClockControlBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  ClockControlBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$ClockControl.fromJson(json);
    replace(v);
  }

  @override
  ClockControlBuilder fromJson(core.Map<String, dynamic> json) =>
      ClockControlBuilder.fromJson(json);

  @override
  ClockControlBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      ClockControlBuilder()..copyFromHeader(headerFrom);

  ClockControlBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _op = _$v!.op;
      _clock = _$v!.clock;
      _tz = _$v!.tz;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(ClockControl other) {
    _$v = other as _$ClockControl;
  }

  @override
  void update(void Function(ClockControlBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  ClockControl build() {
    final result = _$v ??
        _$ClockControl._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            op: op,
            clock: clock,
            tz: tz);
    replace(result);
    return result;
  }
}

/// Historic CTD immutable class
///
class _$HistoricCTD extends HistoricCTD {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double conductivity;
  @override
  final double temperature;
  @override
  final double depth;

  factory _$HistoricCTD([void Function(HistoricCTDBuilder b)? updates]) =>
      (HistoricCTDBuilder()..update(updates)).build() as _$HistoricCTD;

  factory _$HistoricCTD.fromJson(core.Map<String, dynamic> json) {
    var val = HistoricCTDBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.conductivity =
        json.containsKey('conductivity') ? json['conductivity'] as double : 0;
    val.temperature =
        json.containsKey('temperature') ? json['temperature'] as double : 0;
    val.depth = json.containsKey('depth') ? json['depth'] as double : 0;

    return val.build() as _$HistoricCTD;
  }

  _$HistoricCTD._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.conductivity,
      required this.temperature,
      required this.depth})
      : super._();

  @override
  HistoricCTD rebuild(void Function(HistoricCTDBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  HistoricCTDBuilder toBuilder() => HistoricCTDBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is HistoricCTD &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (conductivity == other.conductivity ||
            conductivity - other.conductivity <= 1E-7) &&
        (temperature == other.temperature ||
            temperature - other.temperature <= 1E-7) &&
        (depth == other.depth || depth - other.depth <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                conductivity.hashCode),
            temperature.hashCode),
        depth.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('HistoricCTD')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('conductivity', '$conductivity (S/m)')
          ..add('temperature', '$temperature (°C)')
          ..add('depth', '$depth (m)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'HistoricCTD',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'conductivity': conductivity,
        'temperature': temperature,
        'depth': depth,
      };
}

/// Historic CTD builder class
///
class HistoricCTDBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<HistoricCTD, HistoricCTDBuilder> {
  _$HistoricCTD? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _conductivity = 0;
  double get conductivity => _$this._conductivity;
  set conductivity(double conductivity) => _$this._conductivity = conductivity;

  double _temperature = 0;
  double get temperature => _$this._temperature;
  set temperature(double temperature) => _$this._temperature = temperature;

  double _depth = 0;
  double get depth => _$this._depth;
  set depth(double depth) => _$this._depth = depth;

  HistoricCTDBuilder();

  HistoricCTDBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  HistoricCTDBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$HistoricCTD.fromJson(json);
    replace(v);
  }

  @override
  HistoricCTDBuilder fromJson(core.Map<String, dynamic> json) =>
      HistoricCTDBuilder.fromJson(json);

  @override
  HistoricCTDBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      HistoricCTDBuilder()..copyFromHeader(headerFrom);

  HistoricCTDBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _conductivity = _$v!.conductivity;
      _temperature = _$v!.temperature;
      _depth = _$v!.depth;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(HistoricCTD other) {
    _$v = other as _$HistoricCTD;
  }

  @override
  void update(void Function(HistoricCTDBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  HistoricCTD build() {
    final result = _$v ??
        _$HistoricCTD._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            conductivity: conductivity,
            temperature: temperature,
            depth: depth);
    replace(result);
    return result;
  }
}

/// Historic Telemetry immutable class
///
class _$HistoricTelemetry extends HistoricTelemetry {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double altitude;
  @override
  final int roll;
  @override
  final int pitch;
  @override
  final int yaw;
  @override
  final int speed;

  factory _$HistoricTelemetry(
          [void Function(HistoricTelemetryBuilder b)? updates]) =>
      (HistoricTelemetryBuilder()..update(updates)).build()
          as _$HistoricTelemetry;

  factory _$HistoricTelemetry.fromJson(core.Map<String, dynamic> json) {
    var val = HistoricTelemetryBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.altitude =
        json.containsKey('altitude') ? json['altitude'] as double : 0;
    val.roll = json.containsKey('roll') ? json['roll'] as int : 0;
    val.pitch = json.containsKey('pitch') ? json['pitch'] as int : 0;
    val.yaw = json.containsKey('yaw') ? json['yaw'] as int : 0;
    val.speed = json.containsKey('speed') ? json['speed'] as int : 0;

    return val.build() as _$HistoricTelemetry;
  }

  _$HistoricTelemetry._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.altitude,
      required this.roll,
      required this.pitch,
      required this.yaw,
      required this.speed})
      : super._();

  @override
  HistoricTelemetry rebuild(
          void Function(HistoricTelemetryBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  HistoricTelemetryBuilder toBuilder() =>
      HistoricTelemetryBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is HistoricTelemetry &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (altitude == other.altitude || altitude - other.altitude <= 1E-7) &&
        roll == other.roll &&
        pitch == other.pitch &&
        yaw == other.yaw &&
        speed == other.speed;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            0,
                                            timestamp?.hashCode ??
                                                null.hashCode),
                                        src.hashCode),
                                    srcEnt.hashCode),
                                dst.hashCode),
                            dstEnt.hashCode),
                        altitude.hashCode),
                    roll.hashCode),
                pitch.hashCode),
            yaw.hashCode),
        speed.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('HistoricTelemetry')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('altitude', '$altitude (m)')
          ..add('roll', '$roll')
          ..add('pitch', '$pitch')
          ..add('yaw', '$yaw')
          ..add('speed', '$speed (dm)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'HistoricTelemetry',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'altitude': altitude,
        'roll': roll,
        'pitch': pitch,
        'yaw': yaw,
        'speed': speed,
      };
}

/// Historic Telemetry builder class
///
class HistoricTelemetryBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<HistoricTelemetry, HistoricTelemetryBuilder> {
  _$HistoricTelemetry? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _altitude = 0;
  double get altitude => _$this._altitude;
  set altitude(double altitude) => _$this._altitude = altitude;

  int _roll = 0;
  int get roll => _$this._roll;
  set roll(int roll) => _$this._roll = roll;

  int _pitch = 0;
  int get pitch => _$this._pitch;
  set pitch(int pitch) => _$this._pitch = pitch;

  int _yaw = 0;
  int get yaw => _$this._yaw;
  set yaw(int yaw) => _$this._yaw = yaw;

  int _speed = 0;
  int get speed => _$this._speed;
  set speed(int speed) => _$this._speed = speed;

  HistoricTelemetryBuilder();

  HistoricTelemetryBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  HistoricTelemetryBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$HistoricTelemetry.fromJson(json);
    replace(v);
  }

  @override
  HistoricTelemetryBuilder fromJson(core.Map<String, dynamic> json) =>
      HistoricTelemetryBuilder.fromJson(json);

  @override
  HistoricTelemetryBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      HistoricTelemetryBuilder()..copyFromHeader(headerFrom);

  HistoricTelemetryBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _altitude = _$v!.altitude;
      _roll = _$v!.roll;
      _pitch = _$v!.pitch;
      _yaw = _$v!.yaw;
      _speed = _$v!.speed;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(HistoricTelemetry other) {
    _$v = other as _$HistoricTelemetry;
  }

  @override
  void update(void Function(HistoricTelemetryBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  HistoricTelemetry build() {
    final result = _$v ??
        _$HistoricTelemetry._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            altitude: altitude,
            roll: roll,
            pitch: pitch,
            yaw: yaw,
            speed: speed);
    replace(result);
    return result;
  }
}

/// Historic Sonar Data immutable class
///
class _$HistoricSonarData extends HistoricSonarData {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double altitude;
  @override
  final double width;
  @override
  final double length;
  @override
  final double bearing;
  @override
  final int pxl;
  @override
  final HistoricSonarDataEnumEncoding encoding;
  @override
  final List<int> sonarData;

  factory _$HistoricSonarData(
          [void Function(HistoricSonarDataBuilder b)? updates]) =>
      (HistoricSonarDataBuilder()..update(updates)).build()
          as _$HistoricSonarData;

  factory _$HistoricSonarData.fromJson(core.Map<String, dynamic> json) {
    var val = HistoricSonarDataBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.altitude =
        json.containsKey('altitude') ? json['altitude'] as double : 0;
    val.width = json.containsKey('width') ? json['width'] as double : 0;
    val.length = json.containsKey('length') ? json['length'] as double : 0;
    val.bearing = json.containsKey('bearing') ? json['bearing'] as double : 0;
    val.pxl = json.containsKey('pxl') ? json['pxl'] as int : 0;
    val.encoding = json.containsKey('encoding') && json['encoding'] != null
        ? HistoricSonarDataEnumEncoding(json['encoding'] as int)
        : HistoricSonarDataEnumEncoding(0);
    val.sonarData = json.containsKey('sonar_data')
        ? base64.decode(json['sonar_data'] as String)
        : <int>[];

    return val.build() as _$HistoricSonarData;
  }

  _$HistoricSonarData._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.altitude,
      required this.width,
      required this.length,
      required this.bearing,
      required this.pxl,
      required this.encoding,
      required this.sonarData})
      : super._();

  @override
  HistoricSonarData rebuild(
          void Function(HistoricSonarDataBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  HistoricSonarDataBuilder toBuilder() =>
      HistoricSonarDataBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is HistoricSonarData &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (altitude == other.altitude || altitude - other.altitude <= 1E-7) &&
        (width == other.width || width - other.width <= 1E-7) &&
        (length == other.length || length - other.length <= 1E-7) &&
        (bearing == other.bearing || bearing - other.bearing <= 1E-7) &&
        pxl == other.pxl &&
        encoding == other.encoding &&
        ListEquality().equals(sonarData, other.sonarData);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    0,
                                                    timestamp?.hashCode ??
                                                        null.hashCode),
                                                src.hashCode),
                                            srcEnt.hashCode),
                                        dst.hashCode),
                                    dstEnt.hashCode),
                                altitude.hashCode),
                            width.hashCode),
                        length.hashCode),
                    bearing.hashCode),
                pxl.hashCode),
            encoding.hashCode),
        sonarData.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('HistoricSonarData')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('altitude', '$altitude (m)')
          ..add('width', '$width (m)')
          ..add('length', '$length (m)')
          ..add('bearing', '$bearing')
          ..add('pxl', '$pxl')
          ..add('encoding',
              '$encoding (Enumerated) [${encoding.toPrettyString()}]')
          ..add('sonarData', '$sonarData'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'HistoricSonarData',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'altitude': altitude,
        'width': width,
        'length': length,
        'bearing': bearing,
        'pxl': pxl,
        'encoding': encoding.value,
        'sonar_data': base64.encode(sonarData),
      };
}

/// Historic Sonar Data builder class
///
class HistoricSonarDataBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<HistoricSonarData, HistoricSonarDataBuilder> {
  _$HistoricSonarData? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _altitude = 0;
  double get altitude => _$this._altitude;
  set altitude(double altitude) => _$this._altitude = altitude;

  double _width = 0;
  double get width => _$this._width;
  set width(double width) => _$this._width = width;

  double _length = 0;
  double get length => _$this._length;
  set length(double length) => _$this._length = length;

  double _bearing = 0;
  double get bearing => _$this._bearing;
  set bearing(double bearing) => _$this._bearing = bearing;

  int _pxl = 0;
  int get pxl => _$this._pxl;
  set pxl(int pxl) => _$this._pxl = pxl;

  HistoricSonarDataEnumEncoding _encoding = HistoricSonarDataEnumEncoding(0);
  HistoricSonarDataEnumEncoding get encoding => _$this._encoding;
  set encoding(HistoricSonarDataEnumEncoding encoding) =>
      _$this._encoding = encoding;

  List<int> _sonarData = <int>[];
  List<int> get sonarData => _$this._sonarData;
  set sonarData(List<int> sonarData) => _$this._sonarData = sonarData;

  HistoricSonarDataBuilder();

  HistoricSonarDataBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  HistoricSonarDataBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$HistoricSonarData.fromJson(json);
    replace(v);
  }

  @override
  HistoricSonarDataBuilder fromJson(core.Map<String, dynamic> json) =>
      HistoricSonarDataBuilder.fromJson(json);

  @override
  HistoricSonarDataBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      HistoricSonarDataBuilder()..copyFromHeader(headerFrom);

  HistoricSonarDataBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _altitude = _$v!.altitude;
      _width = _$v!.width;
      _length = _$v!.length;
      _bearing = _$v!.bearing;
      _pxl = _$v!.pxl;
      _encoding = _$v!.encoding;
      _sonarData = _$v!.sonarData;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(HistoricSonarData other) {
    _$v = other as _$HistoricSonarData;
  }

  @override
  void update(void Function(HistoricSonarDataBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  HistoricSonarData build() {
    final result = _$v ??
        _$HistoricSonarData._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            altitude: altitude,
            width: width,
            length: length,
            bearing: bearing,
            pxl: pxl,
            encoding: encoding,
            sonarData: sonarData);
    replace(result);
    return result;
  }
}

/// Historic Event immutable class
///
class _$HistoricEvent extends HistoricEvent {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String text;
  @override
  final HistoricEventEnumType type;

  factory _$HistoricEvent([void Function(HistoricEventBuilder b)? updates]) =>
      (HistoricEventBuilder()..update(updates)).build() as _$HistoricEvent;

  factory _$HistoricEvent.fromJson(core.Map<String, dynamic> json) {
    var val = HistoricEventBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.text = json.containsKey('text') && json['text'] != null
        ? json['text'] as String
        : '';
    val.type = json.containsKey('type') && json['type'] != null
        ? HistoricEventEnumType(json['type'] as int)
        : HistoricEventEnumType(0);

    return val.build() as _$HistoricEvent;
  }

  _$HistoricEvent._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.text,
      required this.type})
      : super._();

  @override
  HistoricEvent rebuild(void Function(HistoricEventBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  HistoricEventBuilder toBuilder() => HistoricEventBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is HistoricEvent &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        text == other.text &&
        type == other.type;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            text.hashCode),
        type.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('HistoricEvent')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('text', text)
          ..add('type', '$type (Enumerated) [${type.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'HistoricEvent',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'text': text,
        'type': type.value,
      };
}

/// Historic Event builder class
///
class HistoricEventBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<HistoricEvent, HistoricEventBuilder> {
  _$HistoricEvent? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _text = '';
  String get text => _$this._text;
  set text(String text) => _$this._text = text;

  HistoricEventEnumType _type = HistoricEventEnumType(0);
  HistoricEventEnumType get type => _$this._type;
  set type(HistoricEventEnumType type) => _$this._type = type;

  HistoricEventBuilder();

  HistoricEventBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  HistoricEventBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$HistoricEvent.fromJson(json);
    replace(v);
  }

  @override
  HistoricEventBuilder fromJson(core.Map<String, dynamic> json) =>
      HistoricEventBuilder.fromJson(json);

  @override
  HistoricEventBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      HistoricEventBuilder()..copyFromHeader(headerFrom);

  HistoricEventBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _text = _$v!.text;
      _type = _$v!.type;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(HistoricEvent other) {
    _$v = other as _$HistoricEvent;
  }

  @override
  void update(void Function(HistoricEventBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  HistoricEvent build() {
    final result = _$v ??
        _$HistoricEvent._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            text: text,
            type: type);
    replace(result);
    return result;
  }
}

/// Vertical Profile immutable class
///
class _$VerticalProfile extends VerticalProfile {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final VerticalProfileEnumParameter parameter;
  @override
  final int numSamples;
  @override
  final List<ProfileSample> samples;
  @override
  final double lat;
  @override
  final double lon;

  factory _$VerticalProfile(
          [void Function(VerticalProfileBuilder b)? updates]) =>
      (VerticalProfileBuilder()..update(updates)).build() as _$VerticalProfile;

  factory _$VerticalProfile.fromJson(core.Map<String, dynamic> json) {
    var val = VerticalProfileBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.parameter = json.containsKey('parameter') && json['parameter'] != null
        ? VerticalProfileEnumParameter(json['parameter'] as int)
        : VerticalProfileEnumParameter(0);
    val.numSamples =
        json.containsKey('numSamples') ? json['numSamples'] as int : 0;
    var samples = <ProfileSample>[];
    if (json.containsKey('samples') && json['samples'] != null) {
      var listJson = json['samples'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as ProfileSample?;
          if (m != null) samples.add(m);
        }
      }
    }
    val.samples = samples;
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;

    return val.build() as _$VerticalProfile;
  }

  _$VerticalProfile._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.parameter,
      required this.numSamples,
      required this.samples,
      required this.lat,
      required this.lon})
      : super._();

  @override
  VerticalProfile rebuild(void Function(VerticalProfileBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  VerticalProfileBuilder toBuilder() => VerticalProfileBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is VerticalProfile &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        parameter == other.parameter &&
        numSamples == other.numSamples &&
        DeepCollectionEquality().equals(samples, other.samples) &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            0,
                                            timestamp?.hashCode ??
                                                null.hashCode),
                                        src.hashCode),
                                    srcEnt.hashCode),
                                dst.hashCode),
                            dstEnt.hashCode),
                        parameter.hashCode),
                    numSamples.hashCode),
                samples.hashCode),
            lat.hashCode),
        lon.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('VerticalProfile')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('parameter',
              '$parameter (Enumerated) [${parameter.toPrettyString()}]')
          ..add('numSamples', '$numSamples')
          ..add('samples', '$samples')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'VerticalProfile',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'parameter': parameter.value,
        'numSamples': numSamples,
        'samples': [
          ...samples.map((m) => m.toJson(false)),
        ],
        'lat': lat,
        'lon': lon,
      };
}

/// Vertical Profile builder class
///
class VerticalProfileBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<VerticalProfile, VerticalProfileBuilder> {
  _$VerticalProfile? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  VerticalProfileEnumParameter _parameter = VerticalProfileEnumParameter(0);
  VerticalProfileEnumParameter get parameter => _$this._parameter;
  set parameter(VerticalProfileEnumParameter parameter) =>
      _$this._parameter = parameter;

  int _numSamples = 0;
  int get numSamples => _$this._numSamples;
  set numSamples(int numSamples) => _$this._numSamples = numSamples;

  List<ProfileSample> _samples = <ProfileSample>[];
  List<ProfileSample> get samples => _$this._samples;
  set samples(List<ProfileSample> samples) => _$this._samples = samples;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  VerticalProfileBuilder();

  VerticalProfileBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  VerticalProfileBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$VerticalProfile.fromJson(json);
    replace(v);
  }

  @override
  VerticalProfileBuilder fromJson(core.Map<String, dynamic> json) =>
      VerticalProfileBuilder.fromJson(json);

  @override
  VerticalProfileBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      VerticalProfileBuilder()..copyFromHeader(headerFrom);

  VerticalProfileBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _parameter = _$v!.parameter;
      _numSamples = _$v!.numSamples;
      _samples = _$v!.samples;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(VerticalProfile other) {
    _$v = other as _$VerticalProfile;
  }

  @override
  void update(void Function(VerticalProfileBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  VerticalProfile build() {
    final result = _$v ??
        _$VerticalProfile._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            parameter: parameter,
            numSamples: numSamples,
            samples: samples,
            lat: lat,
            lon: lon);
    replace(result);
    return result;
  }
}

/// Profile Sample immutable class
///
class _$ProfileSample extends ProfileSample {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int depth;
  @override
  final double avg;

  factory _$ProfileSample([void Function(ProfileSampleBuilder b)? updates]) =>
      (ProfileSampleBuilder()..update(updates)).build() as _$ProfileSample;

  factory _$ProfileSample.fromJson(core.Map<String, dynamic> json) {
    var val = ProfileSampleBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.depth = json.containsKey('depth') ? json['depth'] as int : 0;
    val.avg = json.containsKey('avg') ? json['avg'] as double : 0;

    return val.build() as _$ProfileSample;
  }

  _$ProfileSample._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.depth,
      required this.avg})
      : super._();

  @override
  ProfileSample rebuild(void Function(ProfileSampleBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  ProfileSampleBuilder toBuilder() => ProfileSampleBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is ProfileSample &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        depth == other.depth &&
        (avg == other.avg || avg - other.avg <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            depth.hashCode),
        avg.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('ProfileSample')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('depth', '$depth (dm)')
          ..add('avg', '$avg'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'ProfileSample',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'depth': depth,
        'avg': avg,
      };
}

/// Profile Sample builder class
///
class ProfileSampleBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<ProfileSample, ProfileSampleBuilder> {
  _$ProfileSample? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _depth = 0;
  int get depth => _$this._depth;
  set depth(int depth) => _$this._depth = depth;

  double _avg = 0;
  double get avg => _$this._avg;
  set avg(double avg) => _$this._avg = avg;

  ProfileSampleBuilder();

  ProfileSampleBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  ProfileSampleBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$ProfileSample.fromJson(json);
    replace(v);
  }

  @override
  ProfileSampleBuilder fromJson(core.Map<String, dynamic> json) =>
      ProfileSampleBuilder.fromJson(json);

  @override
  ProfileSampleBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      ProfileSampleBuilder()..copyFromHeader(headerFrom);

  ProfileSampleBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _depth = _$v!.depth;
      _avg = _$v!.avg;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(ProfileSample other) {
    _$v = other as _$ProfileSample;
  }

  @override
  void update(void Function(ProfileSampleBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  ProfileSample build() {
    final result = _$v ??
        _$ProfileSample._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            depth: depth,
            avg: avg);
    replace(result);
    return result;
  }
}

/// Heartbeat immutable class
///
class _$Heartbeat extends Heartbeat {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  factory _$Heartbeat([void Function(HeartbeatBuilder b)? updates]) =>
      (HeartbeatBuilder()..update(updates)).build() as _$Heartbeat;

  factory _$Heartbeat.fromJson(core.Map<String, dynamic> json) {
    var val = HeartbeatBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    return val.build() as _$Heartbeat;
  }

  _$Heartbeat._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId})
      : super._();

  @override
  Heartbeat rebuild(void Function(HeartbeatBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  HeartbeatBuilder toBuilder() => HeartbeatBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Heartbeat &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc($jc($jc(0, timestamp?.hashCode ?? null.hashCode), src.hashCode),
                srcEnt.hashCode),
            dst.hashCode),
        dstEnt.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Heartbeat')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Heartbeat',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
      };
}

/// Heartbeat builder class
///
class HeartbeatBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Heartbeat, HeartbeatBuilder> {
  _$Heartbeat? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  HeartbeatBuilder();

  HeartbeatBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  HeartbeatBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Heartbeat.fromJson(json);
    replace(v);
  }

  @override
  HeartbeatBuilder fromJson(core.Map<String, dynamic> json) =>
      HeartbeatBuilder.fromJson(json);

  @override
  HeartbeatBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      HeartbeatBuilder()..copyFromHeader(headerFrom);

  HeartbeatBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Heartbeat other) {
    _$v = other as _$Heartbeat;
  }

  @override
  void update(void Function(HeartbeatBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Heartbeat build() {
    final result = _$v ??
        _$Heartbeat._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt);
    replace(result);
    return result;
  }
}

/// Announce immutable class
///
class _$Announce extends Announce {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String sysName;
  @override
  final SystemTypeEnum sysType;
  @override
  final int owner;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double height;
  @override
  final String services;

  factory _$Announce([void Function(AnnounceBuilder b)? updates]) =>
      (AnnounceBuilder()..update(updates)).build() as _$Announce;

  factory _$Announce.fromJson(core.Map<String, dynamic> json) {
    var val = AnnounceBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.sysName = json.containsKey('sys_name') && json['sys_name'] != null
        ? json['sys_name'] as String
        : '';
    val.sysType = json.containsKey('sys_type') && json['sys_type'] != null
        ? SystemTypeEnum(json['sys_type'] as int)
        : SystemTypeEnum(0);
    val.owner = json.containsKey('owner') ? json['owner'] as int : 0;
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.height = json.containsKey('height') ? json['height'] as double : 0;
    val.services = json.containsKey('services') && json['services'] != null
        ? json['services'] as String
        : '';

    return val.build() as _$Announce;
  }

  _$Announce._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.sysName,
      required this.sysType,
      required this.owner,
      required this.lat,
      required this.lon,
      required this.height,
      required this.services})
      : super._();

  @override
  Announce rebuild(void Function(AnnounceBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  AnnounceBuilder toBuilder() => AnnounceBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Announce &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        sysName == other.sysName &&
        sysType == other.sysType &&
        owner == other.owner &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (height == other.height || height - other.height <= 1E-7) &&
        services == other.services;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    0,
                                                    timestamp?.hashCode ??
                                                        null.hashCode),
                                                src.hashCode),
                                            srcEnt.hashCode),
                                        dst.hashCode),
                                    dstEnt.hashCode),
                                sysName.hashCode),
                            sysType.hashCode),
                        owner.hashCode),
                    lat.hashCode),
                lon.hashCode),
            height.hashCode),
        services.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Announce')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('sysName', sysName)
          ..add(
              'sysType', '$sysType (Enumerated) [${sysType.toPrettyString()}]')
          ..add('owner', '$owner')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('height', '$height (m)')
          ..add('services', services))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Announce',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'sys_name': sysName,
        'sys_type': sysType.value,
        'owner': owner,
        'lat': lat,
        'lon': lon,
        'height': height,
        'services': services,
      };
}

/// Announce builder class
///
class AnnounceBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Announce, AnnounceBuilder> {
  _$Announce? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _sysName = '';
  String get sysName => _$this._sysName;
  set sysName(String sysName) => _$this._sysName = sysName;

  SystemTypeEnum _sysType = SystemTypeEnum(0);
  SystemTypeEnum get sysType => _$this._sysType;
  set sysType(SystemTypeEnum sysType) => _$this._sysType = sysType;

  int _owner = 0;
  int get owner => _$this._owner;
  set owner(int owner) => _$this._owner = owner;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _height = 0;
  double get height => _$this._height;
  set height(double height) => _$this._height = height;

  String _services = '';
  String get services => _$this._services;
  set services(String services) => _$this._services = services;

  AnnounceBuilder();

  AnnounceBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  AnnounceBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Announce.fromJson(json);
    replace(v);
  }

  @override
  AnnounceBuilder fromJson(core.Map<String, dynamic> json) =>
      AnnounceBuilder.fromJson(json);

  @override
  AnnounceBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      AnnounceBuilder()..copyFromHeader(headerFrom);

  AnnounceBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _sysName = _$v!.sysName;
      _sysType = _$v!.sysType;
      _owner = _$v!.owner;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _height = _$v!.height;
      _services = _$v!.services;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Announce other) {
    _$v = other as _$Announce;
  }

  @override
  void update(void Function(AnnounceBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Announce build() {
    final result = _$v ??
        _$Announce._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            sysName: sysName,
            sysType: sysType,
            owner: owner,
            lat: lat,
            lon: lon,
            height: height,
            services: services);
    replace(result);
    return result;
  }
}

/// Announce Service immutable class
///
class _$AnnounceService extends AnnounceService {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String service;
  @override
  final AnnounceServiceBitfieldServiceType serviceType;

  factory _$AnnounceService(
          [void Function(AnnounceServiceBuilder b)? updates]) =>
      (AnnounceServiceBuilder()..update(updates)).build() as _$AnnounceService;

  factory _$AnnounceService.fromJson(core.Map<String, dynamic> json) {
    var val = AnnounceServiceBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.service = json.containsKey('service') && json['service'] != null
        ? json['service'] as String
        : '';
    val.serviceType =
        json.containsKey('service_type') && json['service_type'] != null
            ? AnnounceServiceBitfieldServiceType(json['service_type'] as int)
            : AnnounceServiceBitfieldServiceType(0);

    return val.build() as _$AnnounceService;
  }

  _$AnnounceService._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.service,
      required this.serviceType})
      : super._();

  @override
  AnnounceService rebuild(void Function(AnnounceServiceBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  AnnounceServiceBuilder toBuilder() => AnnounceServiceBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is AnnounceService &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        service == other.service &&
        serviceType == other.serviceType;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            service.hashCode),
        serviceType.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('AnnounceService')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('service', service)
          ..add('serviceType',
              '$serviceType (Bitfield) [${serviceType.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'AnnounceService',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'service': service,
        'service_type': serviceType.value,
      };
}

/// Announce Service builder class
///
class AnnounceServiceBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<AnnounceService, AnnounceServiceBuilder> {
  _$AnnounceService? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _service = '';
  String get service => _$this._service;
  set service(String service) => _$this._service = service;

  AnnounceServiceBitfieldServiceType _serviceType =
      AnnounceServiceBitfieldServiceType(0);
  AnnounceServiceBitfieldServiceType get serviceType => _$this._serviceType;
  set serviceType(AnnounceServiceBitfieldServiceType serviceType) =>
      _$this._serviceType = serviceType;

  AnnounceServiceBuilder();

  AnnounceServiceBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  AnnounceServiceBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$AnnounceService.fromJson(json);
    replace(v);
  }

  @override
  AnnounceServiceBuilder fromJson(core.Map<String, dynamic> json) =>
      AnnounceServiceBuilder.fromJson(json);

  @override
  AnnounceServiceBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      AnnounceServiceBuilder()..copyFromHeader(headerFrom);

  AnnounceServiceBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _service = _$v!.service;
      _serviceType = _$v!.serviceType;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(AnnounceService other) {
    _$v = other as _$AnnounceService;
  }

  @override
  void update(void Function(AnnounceServiceBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  AnnounceService build() {
    final result = _$v ??
        _$AnnounceService._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            service: service,
            serviceType: serviceType);
    replace(result);
    return result;
  }
}

/// Receive Signal Strength Information immutable class
///
class _$RSSI extends RSSI {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$RSSI([void Function(RSSIBuilder b)? updates]) =>
      (RSSIBuilder()..update(updates)).build() as _$RSSI;

  factory _$RSSI.fromJson(core.Map<String, dynamic> json) {
    var val = RSSIBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$RSSI;
  }

  _$RSSI._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  RSSI rebuild(void Function(RSSIBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  RSSIBuilder toBuilder() => RSSIBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is RSSI &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('RSSI')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (%)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'RSSI',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Receive Signal Strength Information builder class
///
class RSSIBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<RSSI, RSSIBuilder> {
  _$RSSI? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  RSSIBuilder();

  RSSIBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  RSSIBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$RSSI.fromJson(json);
    replace(v);
  }

  @override
  RSSIBuilder fromJson(core.Map<String, dynamic> json) =>
      RSSIBuilder.fromJson(json);

  @override
  RSSIBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      RSSIBuilder()..copyFromHeader(headerFrom);

  RSSIBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(RSSI other) {
    _$v = other as _$RSSI;
  }

  @override
  void update(void Function(RSSIBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  RSSI build() {
    final result = _$v ??
        _$RSSI._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Voltage Standing Wave Ratio immutable class
///
class _$VSWR extends VSWR {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$VSWR([void Function(VSWRBuilder b)? updates]) =>
      (VSWRBuilder()..update(updates)).build() as _$VSWR;

  factory _$VSWR.fromJson(core.Map<String, dynamic> json) {
    var val = VSWRBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$VSWR;
  }

  _$VSWR._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  VSWR rebuild(void Function(VSWRBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  VSWRBuilder toBuilder() => VSWRBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is VSWR &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('VSWR')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'VSWR',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Voltage Standing Wave Ratio builder class
///
class VSWRBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<VSWR, VSWRBuilder> {
  _$VSWR? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  VSWRBuilder();

  VSWRBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  VSWRBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$VSWR.fromJson(json);
    replace(v);
  }

  @override
  VSWRBuilder fromJson(core.Map<String, dynamic> json) =>
      VSWRBuilder.fromJson(json);

  @override
  VSWRBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      VSWRBuilder()..copyFromHeader(headerFrom);

  VSWRBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(VSWR other) {
    _$v = other as _$VSWR;
  }

  @override
  void update(void Function(VSWRBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  VSWR build() {
    final result = _$v ??
        _$VSWR._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Link Level immutable class
///
class _$LinkLevel extends LinkLevel {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$LinkLevel([void Function(LinkLevelBuilder b)? updates]) =>
      (LinkLevelBuilder()..update(updates)).build() as _$LinkLevel;

  factory _$LinkLevel.fromJson(core.Map<String, dynamic> json) {
    var val = LinkLevelBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$LinkLevel;
  }

  _$LinkLevel._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  LinkLevel rebuild(void Function(LinkLevelBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  LinkLevelBuilder toBuilder() => LinkLevelBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is LinkLevel &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('LinkLevel')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'LinkLevel',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Link Level builder class
///
class LinkLevelBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<LinkLevel, LinkLevelBuilder> {
  _$LinkLevel? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  LinkLevelBuilder();

  LinkLevelBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  LinkLevelBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$LinkLevel.fromJson(json);
    replace(v);
  }

  @override
  LinkLevelBuilder fromJson(core.Map<String, dynamic> json) =>
      LinkLevelBuilder.fromJson(json);

  @override
  LinkLevelBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      LinkLevelBuilder()..copyFromHeader(headerFrom);

  LinkLevelBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(LinkLevel other) {
    _$v = other as _$LinkLevel;
  }

  @override
  void update(void Function(LinkLevelBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  LinkLevel build() {
    final result = _$v ??
        _$LinkLevel._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// SMS immutable class
///
class _$Sms extends Sms {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String number;
  @override
  final int timeout;
  @override
  final String contents;

  factory _$Sms([void Function(SmsBuilder b)? updates]) =>
      (SmsBuilder()..update(updates)).build() as _$Sms;

  factory _$Sms.fromJson(core.Map<String, dynamic> json) {
    var val = SmsBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.number = json.containsKey('number') && json['number'] != null
        ? json['number'] as String
        : '';
    val.timeout = json.containsKey('timeout') ? json['timeout'] as int : 0;
    val.contents = json.containsKey('contents') && json['contents'] != null
        ? json['contents'] as String
        : '';

    return val.build() as _$Sms;
  }

  _$Sms._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.number,
      required this.timeout,
      required this.contents})
      : super._();

  @override
  Sms rebuild(void Function(SmsBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SmsBuilder toBuilder() => SmsBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Sms &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        number == other.number &&
        timeout == other.timeout &&
        contents == other.contents;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                number.hashCode),
            timeout.hashCode),
        contents.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Sms')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('number', number)
          ..add('timeout', '$timeout')
          ..add('contents', contents))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Sms',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'number': number,
        'timeout': timeout,
        'contents': contents,
      };
}

/// SMS builder class
///
class SmsBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Sms, SmsBuilder> {
  _$Sms? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _number = '';
  String get number => _$this._number;
  set number(String number) => _$this._number = number;

  int _timeout = 0;
  int get timeout => _$this._timeout;
  set timeout(int timeout) => _$this._timeout = timeout;

  String _contents = '';
  String get contents => _$this._contents;
  set contents(String contents) => _$this._contents = contents;

  SmsBuilder();

  SmsBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SmsBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Sms.fromJson(json);
    replace(v);
  }

  @override
  SmsBuilder fromJson(core.Map<String, dynamic> json) =>
      SmsBuilder.fromJson(json);

  @override
  SmsBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SmsBuilder()..copyFromHeader(headerFrom);

  SmsBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _number = _$v!.number;
      _timeout = _$v!.timeout;
      _contents = _$v!.contents;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Sms other) {
    _$v = other as _$Sms;
  }

  @override
  void update(void Function(SmsBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Sms build() {
    final result = _$v ??
        _$Sms._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            number: number,
            timeout: timeout,
            contents: contents);
    replace(result);
    return result;
  }
}

/// SMS Transmit immutable class
///
class _$SmsTx extends SmsTx {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int seq;
  @override
  final String destination;
  @override
  final int timeout;
  @override
  final List<int> data;

  factory _$SmsTx([void Function(SmsTxBuilder b)? updates]) =>
      (SmsTxBuilder()..update(updates)).build() as _$SmsTx;

  factory _$SmsTx.fromJson(core.Map<String, dynamic> json) {
    var val = SmsTxBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.seq = json.containsKey('seq') ? json['seq'] as int : 0;
    val.destination =
        json.containsKey('destination') && json['destination'] != null
            ? json['destination'] as String
            : '';
    val.timeout = json.containsKey('timeout') ? json['timeout'] as int : 0;
    val.data = json.containsKey('data')
        ? base64.decode(json['data'] as String)
        : <int>[];

    return val.build() as _$SmsTx;
  }

  _$SmsTx._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.seq,
      required this.destination,
      required this.timeout,
      required this.data})
      : super._();

  @override
  SmsTx rebuild(void Function(SmsTxBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SmsTxBuilder toBuilder() => SmsTxBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is SmsTx &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        seq == other.seq &&
        destination == other.destination &&
        timeout == other.timeout &&
        ListEquality().equals(data, other.data);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    seq.hashCode),
                destination.hashCode),
            timeout.hashCode),
        data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('SmsTx')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('seq', '$seq')
          ..add('destination', destination)
          ..add('timeout', '$timeout (s)')
          ..add('data', '$data'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'SmsTx',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'seq': seq,
        'destination': destination,
        'timeout': timeout,
        'data': base64.encode(data),
      };
}

/// SMS Transmit builder class
///
class SmsTxBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<SmsTx, SmsTxBuilder> {
  _$SmsTx? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _seq = 0;
  int get seq => _$this._seq;
  set seq(int seq) => _$this._seq = seq;

  String _destination = '';
  String get destination => _$this._destination;
  set destination(String destination) => _$this._destination = destination;

  int _timeout = 0;
  int get timeout => _$this._timeout;
  set timeout(int timeout) => _$this._timeout = timeout;

  List<int> _data = <int>[];
  List<int> get data => _$this._data;
  set data(List<int> data) => _$this._data = data;

  SmsTxBuilder();

  SmsTxBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SmsTxBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$SmsTx.fromJson(json);
    replace(v);
  }

  @override
  SmsTxBuilder fromJson(core.Map<String, dynamic> json) =>
      SmsTxBuilder.fromJson(json);

  @override
  SmsTxBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SmsTxBuilder()..copyFromHeader(headerFrom);

  SmsTxBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _seq = _$v!.seq;
      _destination = _$v!.destination;
      _timeout = _$v!.timeout;
      _data = _$v!.data;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(SmsTx other) {
    _$v = other as _$SmsTx;
  }

  @override
  void update(void Function(SmsTxBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  SmsTx build() {
    final result = _$v ??
        _$SmsTx._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            seq: seq,
            destination: destination,
            timeout: timeout,
            data: data);
    replace(result);
    return result;
  }
}

/// SMS Receive immutable class
///
class _$SmsRx extends SmsRx {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String source;
  @override
  final List<int> data;

  factory _$SmsRx([void Function(SmsRxBuilder b)? updates]) =>
      (SmsRxBuilder()..update(updates)).build() as _$SmsRx;

  factory _$SmsRx.fromJson(core.Map<String, dynamic> json) {
    var val = SmsRxBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.source = json.containsKey('source') && json['source'] != null
        ? json['source'] as String
        : '';
    val.data = json.containsKey('data')
        ? base64.decode(json['data'] as String)
        : <int>[];

    return val.build() as _$SmsRx;
  }

  _$SmsRx._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.source,
      required this.data})
      : super._();

  @override
  SmsRx rebuild(void Function(SmsRxBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SmsRxBuilder toBuilder() => SmsRxBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is SmsRx &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        source == other.source &&
        ListEquality().equals(data, other.data);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            source.hashCode),
        data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('SmsRx')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('source', source)
          ..add('data', '$data'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'SmsRx',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'source': source,
        'data': base64.encode(data),
      };
}

/// SMS Receive builder class
///
class SmsRxBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<SmsRx, SmsRxBuilder> {
  _$SmsRx? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _source = '';
  String get source => _$this._source;
  set source(String source) => _$this._source = source;

  List<int> _data = <int>[];
  List<int> get data => _$this._data;
  set data(List<int> data) => _$this._data = data;

  SmsRxBuilder();

  SmsRxBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SmsRxBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$SmsRx.fromJson(json);
    replace(v);
  }

  @override
  SmsRxBuilder fromJson(core.Map<String, dynamic> json) =>
      SmsRxBuilder.fromJson(json);

  @override
  SmsRxBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SmsRxBuilder()..copyFromHeader(headerFrom);

  SmsRxBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _source = _$v!.source;
      _data = _$v!.data;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(SmsRx other) {
    _$v = other as _$SmsRx;
  }

  @override
  void update(void Function(SmsRxBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  SmsRx build() {
    final result = _$v ??
        _$SmsRx._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            source: source,
            data: data);
    replace(result);
    return result;
  }
}

/// SMS State immutable class
///
class _$SmsState extends SmsState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int seq;
  @override
  final SmsStateEnumState state;
  @override
  final String error;

  factory _$SmsState([void Function(SmsStateBuilder b)? updates]) =>
      (SmsStateBuilder()..update(updates)).build() as _$SmsState;

  factory _$SmsState.fromJson(core.Map<String, dynamic> json) {
    var val = SmsStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.seq = json.containsKey('seq') ? json['seq'] as int : 0;
    val.state = json.containsKey('state') && json['state'] != null
        ? SmsStateEnumState(json['state'] as int)
        : SmsStateEnumState(0);
    val.error = json.containsKey('error') && json['error'] != null
        ? json['error'] as String
        : '';

    return val.build() as _$SmsState;
  }

  _$SmsState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.seq,
      required this.state,
      required this.error})
      : super._();

  @override
  SmsState rebuild(void Function(SmsStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SmsStateBuilder toBuilder() => SmsStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is SmsState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        seq == other.seq &&
        state == other.state &&
        error == other.error;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                seq.hashCode),
            state.hashCode),
        error.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('SmsState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('seq', '$seq')
          ..add('state', '$state (Enumerated) [${state.toPrettyString()}]')
          ..add('error', error))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'SmsState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'seq': seq,
        'state': state.value,
        'error': error,
      };
}

/// SMS State builder class
///
class SmsStateBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<SmsState, SmsStateBuilder> {
  _$SmsState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _seq = 0;
  int get seq => _$this._seq;
  set seq(int seq) => _$this._seq = seq;

  SmsStateEnumState _state = SmsStateEnumState(0);
  SmsStateEnumState get state => _$this._state;
  set state(SmsStateEnumState state) => _$this._state = state;

  String _error = '';
  String get error => _$this._error;
  set error(String error) => _$this._error = error;

  SmsStateBuilder();

  SmsStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SmsStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$SmsState.fromJson(json);
    replace(v);
  }

  @override
  SmsStateBuilder fromJson(core.Map<String, dynamic> json) =>
      SmsStateBuilder.fromJson(json);

  @override
  SmsStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SmsStateBuilder()..copyFromHeader(headerFrom);

  SmsStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _seq = _$v!.seq;
      _state = _$v!.state;
      _error = _$v!.error;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(SmsState other) {
    _$v = other as _$SmsState;
  }

  @override
  void update(void Function(SmsStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  SmsState build() {
    final result = _$v ??
        _$SmsState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            seq: seq,
            state: state,
            error: error);
    replace(result);
    return result;
  }
}

/// Text Message immutable class
///
class _$TextMessage extends TextMessage {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String origin;
  @override
  final String text;

  factory _$TextMessage([void Function(TextMessageBuilder b)? updates]) =>
      (TextMessageBuilder()..update(updates)).build() as _$TextMessage;

  factory _$TextMessage.fromJson(core.Map<String, dynamic> json) {
    var val = TextMessageBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.origin = json.containsKey('origin') && json['origin'] != null
        ? json['origin'] as String
        : '';
    val.text = json.containsKey('text') && json['text'] != null
        ? json['text'] as String
        : '';

    return val.build() as _$TextMessage;
  }

  _$TextMessage._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.origin,
      required this.text})
      : super._();

  @override
  TextMessage rebuild(void Function(TextMessageBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  TextMessageBuilder toBuilder() => TextMessageBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is TextMessage &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        origin == other.origin &&
        text == other.text;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            origin.hashCode),
        text.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('TextMessage')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('origin', origin)
          ..add('text', text))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'TextMessage',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'origin': origin,
        'text': text,
      };
}

/// Text Message builder class
///
class TextMessageBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<TextMessage, TextMessageBuilder> {
  _$TextMessage? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _origin = '';
  String get origin => _$this._origin;
  set origin(String origin) => _$this._origin = origin;

  String _text = '';
  String get text => _$this._text;
  set text(String text) => _$this._text = text;

  TextMessageBuilder();

  TextMessageBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  TextMessageBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$TextMessage.fromJson(json);
    replace(v);
  }

  @override
  TextMessageBuilder fromJson(core.Map<String, dynamic> json) =>
      TextMessageBuilder.fromJson(json);

  @override
  TextMessageBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      TextMessageBuilder()..copyFromHeader(headerFrom);

  TextMessageBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _origin = _$v!.origin;
      _text = _$v!.text;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(TextMessage other) {
    _$v = other as _$TextMessage;
  }

  @override
  void update(void Function(TextMessageBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  TextMessage build() {
    final result = _$v ??
        _$TextMessage._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            origin: origin,
            text: text);
    replace(result);
    return result;
  }
}

/// Received Iridium Message immutable class
///
class _$IridiumMsgRx extends IridiumMsgRx {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String origin;
  @override
  final double htime;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final List<int> data;

  factory _$IridiumMsgRx([void Function(IridiumMsgRxBuilder b)? updates]) =>
      (IridiumMsgRxBuilder()..update(updates)).build() as _$IridiumMsgRx;

  factory _$IridiumMsgRx.fromJson(core.Map<String, dynamic> json) {
    var val = IridiumMsgRxBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.origin = json.containsKey('origin') && json['origin'] != null
        ? json['origin'] as String
        : '';
    val.htime = json.containsKey('htime') ? json['htime'] as double : 0;
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.data = json.containsKey('data')
        ? base64.decode(json['data'] as String)
        : <int>[];

    return val.build() as _$IridiumMsgRx;
  }

  _$IridiumMsgRx._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.origin,
      required this.htime,
      required this.lat,
      required this.lon,
      required this.data})
      : super._();

  @override
  IridiumMsgRx rebuild(void Function(IridiumMsgRxBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  IridiumMsgRxBuilder toBuilder() => IridiumMsgRxBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is IridiumMsgRx &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        origin == other.origin &&
        (htime == other.htime || htime - other.htime <= 1E-7) &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        ListEquality().equals(data, other.data);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            0,
                                            timestamp?.hashCode ??
                                                null.hashCode),
                                        src.hashCode),
                                    srcEnt.hashCode),
                                dst.hashCode),
                            dstEnt.hashCode),
                        origin.hashCode),
                    htime.hashCode),
                lat.hashCode),
            lon.hashCode),
        data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('IridiumMsgRx')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('origin', origin)
          ..add('htime', '$htime (s)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('data', '$data'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'IridiumMsgRx',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'origin': origin,
        'htime': htime,
        'lat': lat,
        'lon': lon,
        'data': base64.encode(data),
      };
}

/// Received Iridium Message builder class
///
class IridiumMsgRxBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<IridiumMsgRx, IridiumMsgRxBuilder> {
  _$IridiumMsgRx? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _origin = '';
  String get origin => _$this._origin;
  set origin(String origin) => _$this._origin = origin;

  double _htime = 0;
  double get htime => _$this._htime;
  set htime(double htime) => _$this._htime = htime;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  List<int> _data = <int>[];
  List<int> get data => _$this._data;
  set data(List<int> data) => _$this._data = data;

  IridiumMsgRxBuilder();

  IridiumMsgRxBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  IridiumMsgRxBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$IridiumMsgRx.fromJson(json);
    replace(v);
  }

  @override
  IridiumMsgRxBuilder fromJson(core.Map<String, dynamic> json) =>
      IridiumMsgRxBuilder.fromJson(json);

  @override
  IridiumMsgRxBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      IridiumMsgRxBuilder()..copyFromHeader(headerFrom);

  IridiumMsgRxBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _origin = _$v!.origin;
      _htime = _$v!.htime;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _data = _$v!.data;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(IridiumMsgRx other) {
    _$v = other as _$IridiumMsgRx;
  }

  @override
  void update(void Function(IridiumMsgRxBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  IridiumMsgRx build() {
    final result = _$v ??
        _$IridiumMsgRx._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            origin: origin,
            htime: htime,
            lat: lat,
            lon: lon,
            data: data);
    replace(result);
    return result;
  }
}

/// Transmit Iridium Message immutable class
///
class _$IridiumMsgTx extends IridiumMsgTx {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int reqId;
  @override
  final int ttl;
  @override
  final String destination;
  @override
  final List<int> data;

  factory _$IridiumMsgTx([void Function(IridiumMsgTxBuilder b)? updates]) =>
      (IridiumMsgTxBuilder()..update(updates)).build() as _$IridiumMsgTx;

  factory _$IridiumMsgTx.fromJson(core.Map<String, dynamic> json) {
    var val = IridiumMsgTxBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.reqId = json.containsKey('req_id') ? json['req_id'] as int : 0;
    val.ttl = json.containsKey('ttl') ? json['ttl'] as int : 0;
    val.destination =
        json.containsKey('destination') && json['destination'] != null
            ? json['destination'] as String
            : '';
    val.data = json.containsKey('data')
        ? base64.decode(json['data'] as String)
        : <int>[];

    return val.build() as _$IridiumMsgTx;
  }

  _$IridiumMsgTx._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.reqId,
      required this.ttl,
      required this.destination,
      required this.data})
      : super._();

  @override
  IridiumMsgTx rebuild(void Function(IridiumMsgTxBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  IridiumMsgTxBuilder toBuilder() => IridiumMsgTxBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is IridiumMsgTx &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        reqId == other.reqId &&
        ttl == other.ttl &&
        destination == other.destination &&
        ListEquality().equals(data, other.data);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    reqId.hashCode),
                ttl.hashCode),
            destination.hashCode),
        data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('IridiumMsgTx')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('reqId', '$reqId')
          ..add('ttl', '$ttl (s)')
          ..add('destination', destination)
          ..add('data', '$data'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'IridiumMsgTx',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'req_id': reqId,
        'ttl': ttl,
        'destination': destination,
        'data': base64.encode(data),
      };
}

/// Transmit Iridium Message builder class
///
class IridiumMsgTxBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<IridiumMsgTx, IridiumMsgTxBuilder> {
  _$IridiumMsgTx? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _reqId = 0;
  int get reqId => _$this._reqId;
  set reqId(int reqId) => _$this._reqId = reqId;

  int _ttl = 0;
  int get ttl => _$this._ttl;
  set ttl(int ttl) => _$this._ttl = ttl;

  String _destination = '';
  String get destination => _$this._destination;
  set destination(String destination) => _$this._destination = destination;

  List<int> _data = <int>[];
  List<int> get data => _$this._data;
  set data(List<int> data) => _$this._data = data;

  IridiumMsgTxBuilder();

  IridiumMsgTxBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  IridiumMsgTxBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$IridiumMsgTx.fromJson(json);
    replace(v);
  }

  @override
  IridiumMsgTxBuilder fromJson(core.Map<String, dynamic> json) =>
      IridiumMsgTxBuilder.fromJson(json);

  @override
  IridiumMsgTxBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      IridiumMsgTxBuilder()..copyFromHeader(headerFrom);

  IridiumMsgTxBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _reqId = _$v!.reqId;
      _ttl = _$v!.ttl;
      _destination = _$v!.destination;
      _data = _$v!.data;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(IridiumMsgTx other) {
    _$v = other as _$IridiumMsgTx;
  }

  @override
  void update(void Function(IridiumMsgTxBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  IridiumMsgTx build() {
    final result = _$v ??
        _$IridiumMsgTx._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            reqId: reqId,
            ttl: ttl,
            destination: destination,
            data: data);
    replace(result);
    return result;
  }
}

/// Iridium Transmission Status immutable class
///
class _$IridiumTxStatus extends IridiumTxStatus {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int reqId;
  @override
  final IridiumTxStatusEnumStatus status;
  @override
  final String text;

  factory _$IridiumTxStatus(
          [void Function(IridiumTxStatusBuilder b)? updates]) =>
      (IridiumTxStatusBuilder()..update(updates)).build() as _$IridiumTxStatus;

  factory _$IridiumTxStatus.fromJson(core.Map<String, dynamic> json) {
    var val = IridiumTxStatusBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.reqId = json.containsKey('req_id') ? json['req_id'] as int : 0;
    val.status = json.containsKey('status') && json['status'] != null
        ? IridiumTxStatusEnumStatus(json['status'] as int)
        : IridiumTxStatusEnumStatus(0);
    val.text = json.containsKey('text') && json['text'] != null
        ? json['text'] as String
        : '';

    return val.build() as _$IridiumTxStatus;
  }

  _$IridiumTxStatus._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.reqId,
      required this.status,
      required this.text})
      : super._();

  @override
  IridiumTxStatus rebuild(void Function(IridiumTxStatusBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  IridiumTxStatusBuilder toBuilder() => IridiumTxStatusBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is IridiumTxStatus &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        reqId == other.reqId &&
        status == other.status &&
        text == other.text;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                reqId.hashCode),
            status.hashCode),
        text.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('IridiumTxStatus')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('reqId', '$reqId')
          ..add('status', '$status (Enumerated) [${status.toPrettyString()}]')
          ..add('text', text))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'IridiumTxStatus',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'req_id': reqId,
        'status': status.value,
        'text': text,
      };
}

/// Iridium Transmission Status builder class
///
class IridiumTxStatusBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<IridiumTxStatus, IridiumTxStatusBuilder> {
  _$IridiumTxStatus? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _reqId = 0;
  int get reqId => _$this._reqId;
  set reqId(int reqId) => _$this._reqId = reqId;

  IridiumTxStatusEnumStatus _status = IridiumTxStatusEnumStatus(0);
  IridiumTxStatusEnumStatus get status => _$this._status;
  set status(IridiumTxStatusEnumStatus status) => _$this._status = status;

  String _text = '';
  String get text => _$this._text;
  set text(String text) => _$this._text = text;

  IridiumTxStatusBuilder();

  IridiumTxStatusBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  IridiumTxStatusBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$IridiumTxStatus.fromJson(json);
    replace(v);
  }

  @override
  IridiumTxStatusBuilder fromJson(core.Map<String, dynamic> json) =>
      IridiumTxStatusBuilder.fromJson(json);

  @override
  IridiumTxStatusBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      IridiumTxStatusBuilder()..copyFromHeader(headerFrom);

  IridiumTxStatusBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _reqId = _$v!.reqId;
      _status = _$v!.status;
      _text = _$v!.text;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(IridiumTxStatus other) {
    _$v = other as _$IridiumTxStatus;
  }

  @override
  void update(void Function(IridiumTxStatusBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  IridiumTxStatus build() {
    final result = _$v ??
        _$IridiumTxStatus._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            reqId: reqId,
            status: status,
            text: text);
    replace(result);
    return result;
  }
}

/// Group Membership State immutable class
///
class _$GroupMembershipState extends GroupMembershipState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String groupName;
  @override
  final int links;

  factory _$GroupMembershipState(
          [void Function(GroupMembershipStateBuilder b)? updates]) =>
      (GroupMembershipStateBuilder()..update(updates)).build()
          as _$GroupMembershipState;

  factory _$GroupMembershipState.fromJson(core.Map<String, dynamic> json) {
    var val = GroupMembershipStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.groupName = json.containsKey('group_name') && json['group_name'] != null
        ? json['group_name'] as String
        : '';
    val.links = json.containsKey('links') ? json['links'] as int : 0;

    return val.build() as _$GroupMembershipState;
  }

  _$GroupMembershipState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.groupName,
      required this.links})
      : super._();

  @override
  GroupMembershipState rebuild(
          void Function(GroupMembershipStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GroupMembershipStateBuilder toBuilder() =>
      GroupMembershipStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GroupMembershipState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        groupName == other.groupName &&
        links == other.links;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            groupName.hashCode),
        links.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GroupMembershipState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('groupName', groupName)
          ..add('links', '$links'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'GroupMembershipState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'group_name': groupName,
        'links': links,
      };
}

/// Group Membership State builder class
///
class GroupMembershipStateBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<GroupMembershipState,
            GroupMembershipStateBuilder> {
  _$GroupMembershipState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _groupName = '';
  String get groupName => _$this._groupName;
  set groupName(String groupName) => _$this._groupName = groupName;

  int _links = 0;
  int get links => _$this._links;
  set links(int links) => _$this._links = links;

  GroupMembershipStateBuilder();

  GroupMembershipStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  GroupMembershipStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$GroupMembershipState.fromJson(json);
    replace(v);
  }

  @override
  GroupMembershipStateBuilder fromJson(core.Map<String, dynamic> json) =>
      GroupMembershipStateBuilder.fromJson(json);

  @override
  GroupMembershipStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      GroupMembershipStateBuilder()..copyFromHeader(headerFrom);

  GroupMembershipStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _groupName = _$v!.groupName;
      _links = _$v!.links;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GroupMembershipState other) {
    _$v = other as _$GroupMembershipState;
  }

  @override
  void update(void Function(GroupMembershipStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GroupMembershipState build() {
    final result = _$v ??
        _$GroupMembershipState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            groupName: groupName,
            links: links);
    replace(result);
    return result;
  }
}

/// System Group immutable class
///
class _$SystemGroup extends SystemGroup {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String groupName;
  @override
  final SystemGroupEnumAction action;
  @override
  final String groupList;

  factory _$SystemGroup([void Function(SystemGroupBuilder b)? updates]) =>
      (SystemGroupBuilder()..update(updates)).build() as _$SystemGroup;

  factory _$SystemGroup.fromJson(core.Map<String, dynamic> json) {
    var val = SystemGroupBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.groupName = json.containsKey('GroupName') && json['GroupName'] != null
        ? json['GroupName'] as String
        : '';
    val.action = json.containsKey('Action') && json['Action'] != null
        ? SystemGroupEnumAction(json['Action'] as int)
        : SystemGroupEnumAction(0);
    val.groupList = json.containsKey('GroupList') && json['GroupList'] != null
        ? json['GroupList'] as String
        : '';

    return val.build() as _$SystemGroup;
  }

  _$SystemGroup._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.groupName,
      required this.action,
      required this.groupList})
      : super._();

  @override
  SystemGroup rebuild(void Function(SystemGroupBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SystemGroupBuilder toBuilder() => SystemGroupBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is SystemGroup &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        groupName == other.groupName &&
        action == other.action &&
        groupList == other.groupList;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                groupName.hashCode),
            action.hashCode),
        groupList.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('SystemGroup')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('groupName', groupName)
          ..add('action', '$action (Enumerated) [${action.toPrettyString()}]')
          ..add('groupList', groupList))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'SystemGroup',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'GroupName': groupName,
        'Action': action.value,
        'GroupList': groupList,
      };
}

/// System Group builder class
///
class SystemGroupBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<SystemGroup, SystemGroupBuilder> {
  _$SystemGroup? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _groupName = '';
  String get groupName => _$this._groupName;
  set groupName(String groupName) => _$this._groupName = groupName;

  SystemGroupEnumAction _action = SystemGroupEnumAction(0);
  SystemGroupEnumAction get action => _$this._action;
  set action(SystemGroupEnumAction action) => _$this._action = action;

  String _groupList = '';
  String get groupList => _$this._groupList;
  set groupList(String groupList) => _$this._groupList = groupList;

  SystemGroupBuilder();

  SystemGroupBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SystemGroupBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$SystemGroup.fromJson(json);
    replace(v);
  }

  @override
  SystemGroupBuilder fromJson(core.Map<String, dynamic> json) =>
      SystemGroupBuilder.fromJson(json);

  @override
  SystemGroupBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SystemGroupBuilder()..copyFromHeader(headerFrom);

  SystemGroupBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _groupName = _$v!.groupName;
      _action = _$v!.action;
      _groupList = _$v!.groupList;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(SystemGroup other) {
    _$v = other as _$SystemGroup;
  }

  @override
  void update(void Function(SystemGroupBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  SystemGroup build() {
    final result = _$v ??
        _$SystemGroup._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            groupName: groupName,
            action: action,
            groupList: groupList);
    replace(result);
    return result;
  }
}

/// Link Latency immutable class
///
class _$LinkLatency extends LinkLatency {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;
  @override
  final int sysSrc;

  factory _$LinkLatency([void Function(LinkLatencyBuilder b)? updates]) =>
      (LinkLatencyBuilder()..update(updates)).build() as _$LinkLatency;

  factory _$LinkLatency.fromJson(core.Map<String, dynamic> json) {
    var val = LinkLatencyBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;
    val.sysSrc = json.containsKey('sys_src') ? json['sys_src'] as int : 0;

    return val.build() as _$LinkLatency;
  }

  _$LinkLatency._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value,
      required this.sysSrc})
      : super._();

  @override
  LinkLatency rebuild(void Function(LinkLatencyBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  LinkLatencyBuilder toBuilder() => LinkLatencyBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is LinkLatency &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7) &&
        sysSrc == other.sysSrc;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            value.hashCode),
        sysSrc.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('LinkLatency')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (s)')
          ..add('sysSrc', '$sysSrc'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'LinkLatency',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
        'sys_src': sysSrc,
      };
}

/// Link Latency builder class
///
class LinkLatencyBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<LinkLatency, LinkLatencyBuilder> {
  _$LinkLatency? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  int _sysSrc = 0;
  int get sysSrc => _$this._sysSrc;
  set sysSrc(int sysSrc) => _$this._sysSrc = sysSrc;

  LinkLatencyBuilder();

  LinkLatencyBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  LinkLatencyBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$LinkLatency.fromJson(json);
    replace(v);
  }

  @override
  LinkLatencyBuilder fromJson(core.Map<String, dynamic> json) =>
      LinkLatencyBuilder.fromJson(json);

  @override
  LinkLatencyBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      LinkLatencyBuilder()..copyFromHeader(headerFrom);

  LinkLatencyBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _sysSrc = _$v!.sysSrc;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(LinkLatency other) {
    _$v = other as _$LinkLatency;
  }

  @override
  void update(void Function(LinkLatencyBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  LinkLatency build() {
    final result = _$v ??
        _$LinkLatency._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value,
            sysSrc: sysSrc);
    replace(result);
    return result;
  }
}

/// Extended Receive Signal Strength Information immutable class
///
class _$ExtendedRSSI extends ExtendedRSSI {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;
  @override
  final RSSIUnitsEnum units;

  factory _$ExtendedRSSI([void Function(ExtendedRSSIBuilder b)? updates]) =>
      (ExtendedRSSIBuilder()..update(updates)).build() as _$ExtendedRSSI;

  factory _$ExtendedRSSI.fromJson(core.Map<String, dynamic> json) {
    var val = ExtendedRSSIBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;
    val.units = json.containsKey('units') && json['units'] != null
        ? RSSIUnitsEnum(json['units'] as int)
        : RSSIUnitsEnum(0);

    return val.build() as _$ExtendedRSSI;
  }

  _$ExtendedRSSI._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value,
      required this.units})
      : super._();

  @override
  ExtendedRSSI rebuild(void Function(ExtendedRSSIBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  ExtendedRSSIBuilder toBuilder() => ExtendedRSSIBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is ExtendedRSSI &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7) &&
        units == other.units;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            value.hashCode),
        units.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('ExtendedRSSI')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value')
          ..add('units', '$units (Enumerated) [${units.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'ExtendedRSSI',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
        'units': units.value,
      };
}

/// Extended Receive Signal Strength Information builder class
///
class ExtendedRSSIBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<ExtendedRSSI, ExtendedRSSIBuilder> {
  _$ExtendedRSSI? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  RSSIUnitsEnum _units = RSSIUnitsEnum(0);
  RSSIUnitsEnum get units => _$this._units;
  set units(RSSIUnitsEnum units) => _$this._units = units;

  ExtendedRSSIBuilder();

  ExtendedRSSIBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  ExtendedRSSIBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$ExtendedRSSI.fromJson(json);
    replace(v);
  }

  @override
  ExtendedRSSIBuilder fromJson(core.Map<String, dynamic> json) =>
      ExtendedRSSIBuilder.fromJson(json);

  @override
  ExtendedRSSIBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      ExtendedRSSIBuilder()..copyFromHeader(headerFrom);

  ExtendedRSSIBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _units = _$v!.units;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(ExtendedRSSI other) {
    _$v = other as _$ExtendedRSSI;
  }

  @override
  void update(void Function(ExtendedRSSIBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  ExtendedRSSI build() {
    final result = _$v ??
        _$ExtendedRSSI._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value,
            units: units);
    replace(result);
    return result;
  }
}

/// Historic Data Series immutable class
///
class _$HistoricData extends HistoricData {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double baseLat;
  @override
  final double baseLon;
  @override
  final double baseTime;
  @override
  final List<RemoteData> data;

  factory _$HistoricData([void Function(HistoricDataBuilder b)? updates]) =>
      (HistoricDataBuilder()..update(updates)).build() as _$HistoricData;

  factory _$HistoricData.fromJson(core.Map<String, dynamic> json) {
    var val = HistoricDataBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.baseLat = json.containsKey('base_lat') ? json['base_lat'] as double : 0;
    val.baseLon = json.containsKey('base_lon') ? json['base_lon'] as double : 0;
    val.baseTime =
        json.containsKey('base_time') ? json['base_time'] as double : 0;
    var data = <RemoteData>[];
    if (json.containsKey('data') && json['data'] != null) {
      var listJson = json['data'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as RemoteData?;
          if (m != null) data.add(m);
        }
      }
    }
    val.data = data;

    return val.build() as _$HistoricData;
  }

  _$HistoricData._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.baseLat,
      required this.baseLon,
      required this.baseTime,
      required this.data})
      : super._();

  @override
  HistoricData rebuild(void Function(HistoricDataBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  HistoricDataBuilder toBuilder() => HistoricDataBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is HistoricData &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (baseLat == other.baseLat || baseLat - other.baseLat <= 1E-7) &&
        (baseLon == other.baseLon || baseLon - other.baseLon <= 1E-7) &&
        (baseTime == other.baseTime || baseTime - other.baseTime <= 1E-7) &&
        DeepCollectionEquality().equals(data, other.data);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    baseLat.hashCode),
                baseLon.hashCode),
            baseTime.hashCode),
        data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('HistoricData')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('baseLat', '$baseLat (°)')
          ..add('baseLon', '$baseLon (°)')
          ..add('baseTime', '$baseTime (s)')
          ..add('data', '$data'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'HistoricData',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'base_lat': baseLat,
        'base_lon': baseLon,
        'base_time': baseTime,
        'data': [
          ...data.map((m) => m.toJson(false)),
        ],
      };
}

/// Historic Data Series builder class
///
class HistoricDataBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<HistoricData, HistoricDataBuilder> {
  _$HistoricData? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _baseLat = 0;
  double get baseLat => _$this._baseLat;
  set baseLat(double baseLat) => _$this._baseLat = baseLat;

  double _baseLon = 0;
  double get baseLon => _$this._baseLon;
  set baseLon(double baseLon) => _$this._baseLon = baseLon;

  double _baseTime = 0;
  double get baseTime => _$this._baseTime;
  set baseTime(double baseTime) => _$this._baseTime = baseTime;

  List<RemoteData> _data = <RemoteData>[];
  List<RemoteData> get data => _$this._data;
  set data(List<RemoteData> data) => _$this._data = data;

  HistoricDataBuilder();

  HistoricDataBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  HistoricDataBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$HistoricData.fromJson(json);
    replace(v);
  }

  @override
  HistoricDataBuilder fromJson(core.Map<String, dynamic> json) =>
      HistoricDataBuilder.fromJson(json);

  @override
  HistoricDataBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      HistoricDataBuilder()..copyFromHeader(headerFrom);

  HistoricDataBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _baseLat = _$v!.baseLat;
      _baseLon = _$v!.baseLon;
      _baseTime = _$v!.baseTime;
      _data = _$v!.data;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(HistoricData other) {
    _$v = other as _$HistoricData;
  }

  @override
  void update(void Function(HistoricDataBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  HistoricData build() {
    final result = _$v ??
        _$HistoricData._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            baseLat: baseLat,
            baseLon: baseLon,
            baseTime: baseTime,
            data: data);
    replace(result);
    return result;
  }
}

/// Compressed Historic Data Series immutable class
///
class _$CompressedHistory extends CompressedHistory {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double baseLat;
  @override
  final double baseLon;
  @override
  final double baseTime;
  @override
  final List<int> data;

  factory _$CompressedHistory(
          [void Function(CompressedHistoryBuilder b)? updates]) =>
      (CompressedHistoryBuilder()..update(updates)).build()
          as _$CompressedHistory;

  factory _$CompressedHistory.fromJson(core.Map<String, dynamic> json) {
    var val = CompressedHistoryBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.baseLat = json.containsKey('base_lat') ? json['base_lat'] as double : 0;
    val.baseLon = json.containsKey('base_lon') ? json['base_lon'] as double : 0;
    val.baseTime =
        json.containsKey('base_time') ? json['base_time'] as double : 0;
    val.data = json.containsKey('data')
        ? base64.decode(json['data'] as String)
        : <int>[];

    return val.build() as _$CompressedHistory;
  }

  _$CompressedHistory._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.baseLat,
      required this.baseLon,
      required this.baseTime,
      required this.data})
      : super._();

  @override
  CompressedHistory rebuild(
          void Function(CompressedHistoryBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  CompressedHistoryBuilder toBuilder() =>
      CompressedHistoryBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is CompressedHistory &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (baseLat == other.baseLat || baseLat - other.baseLat <= 1E-7) &&
        (baseLon == other.baseLon || baseLon - other.baseLon <= 1E-7) &&
        (baseTime == other.baseTime || baseTime - other.baseTime <= 1E-7) &&
        ListEquality().equals(data, other.data);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    baseLat.hashCode),
                baseLon.hashCode),
            baseTime.hashCode),
        data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('CompressedHistory')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('baseLat', '$baseLat (°)')
          ..add('baseLon', '$baseLon (°)')
          ..add('baseTime', '$baseTime (s)')
          ..add('data', '$data'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'CompressedHistory',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'base_lat': baseLat,
        'base_lon': baseLon,
        'base_time': baseTime,
        'data': base64.encode(data),
      };
}

/// Compressed Historic Data Series builder class
///
class CompressedHistoryBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<CompressedHistory, CompressedHistoryBuilder> {
  _$CompressedHistory? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _baseLat = 0;
  double get baseLat => _$this._baseLat;
  set baseLat(double baseLat) => _$this._baseLat = baseLat;

  double _baseLon = 0;
  double get baseLon => _$this._baseLon;
  set baseLon(double baseLon) => _$this._baseLon = baseLon;

  double _baseTime = 0;
  double get baseTime => _$this._baseTime;
  set baseTime(double baseTime) => _$this._baseTime = baseTime;

  List<int> _data = <int>[];
  List<int> get data => _$this._data;
  set data(List<int> data) => _$this._data = data;

  CompressedHistoryBuilder();

  CompressedHistoryBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  CompressedHistoryBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$CompressedHistory.fromJson(json);
    replace(v);
  }

  @override
  CompressedHistoryBuilder fromJson(core.Map<String, dynamic> json) =>
      CompressedHistoryBuilder.fromJson(json);

  @override
  CompressedHistoryBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      CompressedHistoryBuilder()..copyFromHeader(headerFrom);

  CompressedHistoryBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _baseLat = _$v!.baseLat;
      _baseLon = _$v!.baseLon;
      _baseTime = _$v!.baseTime;
      _data = _$v!.data;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(CompressedHistory other) {
    _$v = other as _$CompressedHistory;
  }

  @override
  void update(void Function(CompressedHistoryBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  CompressedHistory build() {
    final result = _$v ??
        _$CompressedHistory._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            baseLat: baseLat,
            baseLon: baseLon,
            baseTime: baseTime,
            data: data);
    replace(result);
    return result;
  }
}

/// Historic Data Sample immutable class
///
class _$HistoricSample extends HistoricSample {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int sysId;
  @override
  final int priority;
  @override
  final int x;
  @override
  final int y;
  @override
  final int z;
  @override
  final int t;
  @override
  final ImcMessage? sample;

  factory _$HistoricSample([void Function(HistoricSampleBuilder b)? updates]) =>
      (HistoricSampleBuilder()..update(updates)).build() as _$HistoricSample;

  factory _$HistoricSample.fromJson(core.Map<String, dynamic> json) {
    var val = HistoricSampleBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.sysId = json.containsKey('sys_id') ? json['sys_id'] as int : 0;
    val.priority = json.containsKey('priority') ? json['priority'] as int : 0;
    val.x = json.containsKey('x') ? json['x'] as int : 0;
    val.y = json.containsKey('y') ? json['y'] as int : 0;
    val.z = json.containsKey('z') ? json['z'] as int : 0;
    val.t = json.containsKey('t') ? json['t'] as int : 0;

    ImcMessage? sample;
    if (json.containsKey('sample') && json['sample'] != null) {
      var msgJson = json['sample'] as core.Map<String, dynamic>;
      if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
        var msgType = msgJson['abbrev'] as String;
        var builder = messagesBuilders[msgType]?.call();
        builder = builder?.fromJson(msgJson);
        sample = builder?.build() as ImcMessage?;
      }
    }
    val.sample = sample;

    return val.build() as _$HistoricSample;
  }

  _$HistoricSample._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.sysId,
      required this.priority,
      required this.x,
      required this.y,
      required this.z,
      required this.t,
      this.sample})
      : super._();

  @override
  HistoricSample rebuild(void Function(HistoricSampleBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  HistoricSampleBuilder toBuilder() => HistoricSampleBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is HistoricSample &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        sysId == other.sysId &&
        priority == other.priority &&
        x == other.x &&
        y == other.y &&
        z == other.z &&
        t == other.t &&
        sample == other.sample;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    0,
                                                    timestamp?.hashCode ??
                                                        null.hashCode),
                                                src.hashCode),
                                            srcEnt.hashCode),
                                        dst.hashCode),
                                    dstEnt.hashCode),
                                sysId.hashCode),
                            priority.hashCode),
                        x.hashCode),
                    y.hashCode),
                z.hashCode),
            t.hashCode),
        sample?.hashCode ?? null.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('HistoricSample')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('sysId', '$sysId')
          ..add('priority', '$priority')
          ..add('x', '$x (m)')
          ..add('y', '$y (m)')
          ..add('z', '$z (dm)')
          ..add('t', '$t (s)')
          ..add('sample', '$sample'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'HistoricSample',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'sys_id': sysId,
        'priority': priority,
        'x': x,
        'y': y,
        'z': z,
        't': t,
        'sample': sample?.toJson(false),
      };
}

/// Historic Data Sample builder class
///
class HistoricSampleBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<HistoricSample, HistoricSampleBuilder> {
  _$HistoricSample? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _sysId = 0;
  int get sysId => _$this._sysId;
  set sysId(int sysId) => _$this._sysId = sysId;

  int _priority = 0;
  int get priority => _$this._priority;
  set priority(int priority) => _$this._priority = priority;

  int _x = 0;
  int get x => _$this._x;
  set x(int x) => _$this._x = x;

  int _y = 0;
  int get y => _$this._y;
  set y(int y) => _$this._y = y;

  int _z = 0;
  int get z => _$this._z;
  set z(int z) => _$this._z = z;

  int _t = 0;
  int get t => _$this._t;
  set t(int t) => _$this._t = t;

  ImcMessage? _sample;
  ImcMessage? get sample => _$this._sample;
  set sample(ImcMessage? sample) => _$this._sample = sample;

  HistoricSampleBuilder();

  HistoricSampleBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  HistoricSampleBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$HistoricSample.fromJson(json);
    replace(v);
  }

  @override
  HistoricSampleBuilder fromJson(core.Map<String, dynamic> json) =>
      HistoricSampleBuilder.fromJson(json);

  @override
  HistoricSampleBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      HistoricSampleBuilder()..copyFromHeader(headerFrom);

  HistoricSampleBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _sysId = _$v!.sysId;
      _priority = _$v!.priority;
      _x = _$v!.x;
      _y = _$v!.y;
      _z = _$v!.z;
      _t = _$v!.t;
      _sample = _$v!.sample;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(HistoricSample other) {
    _$v = other as _$HistoricSample;
  }

  @override
  void update(void Function(HistoricSampleBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  HistoricSample build() {
    final result = _$v ??
        _$HistoricSample._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            sysId: sysId,
            priority: priority,
            x: x,
            y: y,
            z: z,
            t: t,
            sample: sample);
    replace(result);
    return result;
  }
}

/// Historic Data Query immutable class
///
class _$HistoricDataQuery extends HistoricDataQuery {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int reqId;
  @override
  final HistoricDataQueryEnumType type;
  @override
  final int maxSize;
  @override
  final HistoricData? data;

  factory _$HistoricDataQuery(
          [void Function(HistoricDataQueryBuilder b)? updates]) =>
      (HistoricDataQueryBuilder()..update(updates)).build()
          as _$HistoricDataQuery;

  factory _$HistoricDataQuery.fromJson(core.Map<String, dynamic> json) {
    var val = HistoricDataQueryBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.reqId = json.containsKey('req_id') ? json['req_id'] as int : 0;
    val.type = json.containsKey('type') && json['type'] != null
        ? HistoricDataQueryEnumType(json['type'] as int)
        : HistoricDataQueryEnumType(0);
    val.maxSize = json.containsKey('max_size') ? json['max_size'] as int : 0;

    HistoricData? data;
    if (json.containsKey('data') && json['data'] != null) {
      var msgJson = json['data'] as core.Map<String, dynamic>;
      if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
        var msgType = msgJson['abbrev'] as String;
        var builder = messagesBuilders[msgType]?.call();
        builder = builder?.fromJson(msgJson);
        data = builder?.build() as HistoricData?;
      }
    }
    val.data = data;

    return val.build() as _$HistoricDataQuery;
  }

  _$HistoricDataQuery._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.reqId,
      required this.type,
      required this.maxSize,
      this.data})
      : super._();

  @override
  HistoricDataQuery rebuild(
          void Function(HistoricDataQueryBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  HistoricDataQueryBuilder toBuilder() =>
      HistoricDataQueryBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is HistoricDataQuery &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        reqId == other.reqId &&
        type == other.type &&
        maxSize == other.maxSize &&
        data == other.data;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    reqId.hashCode),
                type.hashCode),
            maxSize.hashCode),
        data?.hashCode ?? null.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('HistoricDataQuery')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('reqId', '$reqId')
          ..add('type', '$type (Enumerated) [${type.toPrettyString()}]')
          ..add('maxSize', '$maxSize')
          ..add('data', '$data'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'HistoricDataQuery',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'req_id': reqId,
        'type': type.value,
        'max_size': maxSize,
        'data': data?.toJson(false),
      };
}

/// Historic Data Query builder class
///
class HistoricDataQueryBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<HistoricDataQuery, HistoricDataQueryBuilder> {
  _$HistoricDataQuery? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _reqId = 0;
  int get reqId => _$this._reqId;
  set reqId(int reqId) => _$this._reqId = reqId;

  HistoricDataQueryEnumType _type = HistoricDataQueryEnumType(0);
  HistoricDataQueryEnumType get type => _$this._type;
  set type(HistoricDataQueryEnumType type) => _$this._type = type;

  int _maxSize = 0;
  int get maxSize => _$this._maxSize;
  set maxSize(int maxSize) => _$this._maxSize = maxSize;

  HistoricData? _data;
  HistoricData? get data => _$this._data;
  set data(HistoricData? data) => _$this._data = data;

  HistoricDataQueryBuilder();

  HistoricDataQueryBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  HistoricDataQueryBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$HistoricDataQuery.fromJson(json);
    replace(v);
  }

  @override
  HistoricDataQueryBuilder fromJson(core.Map<String, dynamic> json) =>
      HistoricDataQueryBuilder.fromJson(json);

  @override
  HistoricDataQueryBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      HistoricDataQueryBuilder()..copyFromHeader(headerFrom);

  HistoricDataQueryBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _reqId = _$v!.reqId;
      _type = _$v!.type;
      _maxSize = _$v!.maxSize;
      _data = _$v!.data;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(HistoricDataQuery other) {
    _$v = other as _$HistoricDataQuery;
  }

  @override
  void update(void Function(HistoricDataQueryBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  HistoricDataQuery build() {
    final result = _$v ??
        _$HistoricDataQuery._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            reqId: reqId,
            type: type,
            maxSize: maxSize,
            data: data);
    replace(result);
    return result;
  }
}

/// Remote Command immutable class
///
class _$RemoteCommand extends RemoteCommand {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int originalSource;
  @override
  final int destination;
  @override
  final double timeout;
  @override
  final ImcMessage? cmd;

  factory _$RemoteCommand([void Function(RemoteCommandBuilder b)? updates]) =>
      (RemoteCommandBuilder()..update(updates)).build() as _$RemoteCommand;

  factory _$RemoteCommand.fromJson(core.Map<String, dynamic> json) {
    var val = RemoteCommandBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.originalSource = json.containsKey('original_source')
        ? json['original_source'] as int
        : 0;
    val.destination =
        json.containsKey('destination') ? json['destination'] as int : 0;
    val.timeout = json.containsKey('timeout') ? json['timeout'] as double : 0;

    ImcMessage? cmd;
    if (json.containsKey('cmd') && json['cmd'] != null) {
      var msgJson = json['cmd'] as core.Map<String, dynamic>;
      if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
        var msgType = msgJson['abbrev'] as String;
        var builder = messagesBuilders[msgType]?.call();
        builder = builder?.fromJson(msgJson);
        cmd = builder?.build() as ImcMessage?;
      }
    }
    val.cmd = cmd;

    return val.build() as _$RemoteCommand;
  }

  _$RemoteCommand._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.originalSource,
      required this.destination,
      required this.timeout,
      this.cmd})
      : super._();

  @override
  RemoteCommand rebuild(void Function(RemoteCommandBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  RemoteCommandBuilder toBuilder() => RemoteCommandBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is RemoteCommand &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        originalSource == other.originalSource &&
        destination == other.destination &&
        (timeout == other.timeout || timeout - other.timeout <= 1E-7) &&
        cmd == other.cmd;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    originalSource.hashCode),
                destination.hashCode),
            timeout.hashCode),
        cmd?.hashCode ?? null.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('RemoteCommand')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('originalSource', '$originalSource')
          ..add('destination', '$destination')
          ..add('timeout', '$timeout (s)')
          ..add('cmd', '$cmd'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'RemoteCommand',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'original_source': originalSource,
        'destination': destination,
        'timeout': timeout,
        'cmd': cmd?.toJson(false),
      };
}

/// Remote Command builder class
///
class RemoteCommandBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<RemoteCommand, RemoteCommandBuilder> {
  _$RemoteCommand? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _originalSource = 0;
  int get originalSource => _$this._originalSource;
  set originalSource(int originalSource) =>
      _$this._originalSource = originalSource;

  int _destination = 0;
  int get destination => _$this._destination;
  set destination(int destination) => _$this._destination = destination;

  double _timeout = 0;
  double get timeout => _$this._timeout;
  set timeout(double timeout) => _$this._timeout = timeout;

  ImcMessage? _cmd;
  ImcMessage? get cmd => _$this._cmd;
  set cmd(ImcMessage? cmd) => _$this._cmd = cmd;

  RemoteCommandBuilder();

  RemoteCommandBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  RemoteCommandBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$RemoteCommand.fromJson(json);
    replace(v);
  }

  @override
  RemoteCommandBuilder fromJson(core.Map<String, dynamic> json) =>
      RemoteCommandBuilder.fromJson(json);

  @override
  RemoteCommandBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      RemoteCommandBuilder()..copyFromHeader(headerFrom);

  RemoteCommandBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _originalSource = _$v!.originalSource;
      _destination = _$v!.destination;
      _timeout = _$v!.timeout;
      _cmd = _$v!.cmd;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(RemoteCommand other) {
    _$v = other as _$RemoteCommand;
  }

  @override
  void update(void Function(RemoteCommandBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  RemoteCommand build() {
    final result = _$v ??
        _$RemoteCommand._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            originalSource: originalSource,
            destination: destination,
            timeout: timeout,
            cmd: cmd);
    replace(result);
    return result;
  }
}

/// Communication Systems Query immutable class
///
class _$CommSystemsQuery extends CommSystemsQuery {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final CommSystemsQueryBitfieldType type;
  @override
  final CommSystemsQueryBitfieldCommInterface commInterface;
  @override
  final CommSystemsQueryEnumModel model;
  @override
  final String list;

  factory _$CommSystemsQuery(
          [void Function(CommSystemsQueryBuilder b)? updates]) =>
      (CommSystemsQueryBuilder()..update(updates)).build()
          as _$CommSystemsQuery;

  factory _$CommSystemsQuery.fromJson(core.Map<String, dynamic> json) {
    var val = CommSystemsQueryBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.type = json.containsKey('type') && json['type'] != null
        ? CommSystemsQueryBitfieldType(json['type'] as int)
        : CommSystemsQueryBitfieldType(0);
    val.commInterface = json.containsKey('comm_interface') &&
            json['comm_interface'] != null
        ? CommSystemsQueryBitfieldCommInterface(json['comm_interface'] as int)
        : CommSystemsQueryBitfieldCommInterface(0);
    val.model = json.containsKey('model') && json['model'] != null
        ? CommSystemsQueryEnumModel(json['model'] as int)
        : CommSystemsQueryEnumModel(0);
    val.list = json.containsKey('list') && json['list'] != null
        ? json['list'] as String
        : '';

    return val.build() as _$CommSystemsQuery;
  }

  _$CommSystemsQuery._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.type,
      required this.commInterface,
      required this.model,
      required this.list})
      : super._();

  @override
  CommSystemsQuery rebuild(void Function(CommSystemsQueryBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  CommSystemsQueryBuilder toBuilder() =>
      CommSystemsQueryBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is CommSystemsQuery &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        type == other.type &&
        commInterface == other.commInterface &&
        model == other.model &&
        list == other.list;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    type.hashCode),
                commInterface.hashCode),
            model.hashCode),
        list.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('CommSystemsQuery')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('type', '$type (Bitfield) [${type.toPrettyString()}]')
          ..add('commInterface',
              '$commInterface (Bitfield) [${commInterface.toPrettyString()}]')
          ..add('model', '$model (Enumerated) [${model.toPrettyString()}]')
          ..add('list', '$list (List)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'CommSystemsQuery',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'type': type.value,
        'comm_interface': commInterface.value,
        'model': model.value,
        'list': list,
      };
}

/// Communication Systems Query builder class
///
class CommSystemsQueryBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<CommSystemsQuery, CommSystemsQueryBuilder> {
  _$CommSystemsQuery? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  CommSystemsQueryBitfieldType _type = CommSystemsQueryBitfieldType(0);
  CommSystemsQueryBitfieldType get type => _$this._type;
  set type(CommSystemsQueryBitfieldType type) => _$this._type = type;

  CommSystemsQueryBitfieldCommInterface _commInterface =
      CommSystemsQueryBitfieldCommInterface(0);
  CommSystemsQueryBitfieldCommInterface get commInterface =>
      _$this._commInterface;
  set commInterface(CommSystemsQueryBitfieldCommInterface commInterface) =>
      _$this._commInterface = commInterface;

  CommSystemsQueryEnumModel _model = CommSystemsQueryEnumModel(0);
  CommSystemsQueryEnumModel get model => _$this._model;
  set model(CommSystemsQueryEnumModel model) => _$this._model = model;

  String _list = '';
  String get list => _$this._list;
  set list(String list) => _$this._list = list;

  CommSystemsQueryBuilder();

  CommSystemsQueryBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  CommSystemsQueryBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$CommSystemsQuery.fromJson(json);
    replace(v);
  }

  @override
  CommSystemsQueryBuilder fromJson(core.Map<String, dynamic> json) =>
      CommSystemsQueryBuilder.fromJson(json);

  @override
  CommSystemsQueryBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      CommSystemsQueryBuilder()..copyFromHeader(headerFrom);

  CommSystemsQueryBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _type = _$v!.type;
      _commInterface = _$v!.commInterface;
      _model = _$v!.model;
      _list = _$v!.list;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(CommSystemsQuery other) {
    _$v = other as _$CommSystemsQuery;
  }

  @override
  void update(void Function(CommSystemsQueryBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  CommSystemsQuery build() {
    final result = _$v ??
        _$CommSystemsQuery._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            type: type,
            commInterface: commInterface,
            model: model,
            list: list);
    replace(result);
    return result;
  }
}

/// Telemetry Message immutable class
///
class _$TelemetryMsg extends TelemetryMsg {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final TelemetryMsgEnumType type;
  @override
  final int reqId;
  @override
  final int ttl;
  @override
  final TelemetryMsgEnumCode code;
  @override
  final String destination;
  @override
  final String source;
  @override
  final TelemetryMsgBitfieldAcknowledge acknowledge;
  @override
  final TelemetryMsgEnumStatus status;
  @override
  final List<int> data;

  factory _$TelemetryMsg([void Function(TelemetryMsgBuilder b)? updates]) =>
      (TelemetryMsgBuilder()..update(updates)).build() as _$TelemetryMsg;

  factory _$TelemetryMsg.fromJson(core.Map<String, dynamic> json) {
    var val = TelemetryMsgBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.type = json.containsKey('type') && json['type'] != null
        ? TelemetryMsgEnumType(json['type'] as int)
        : TelemetryMsgEnumType(0);
    val.reqId = json.containsKey('req_id') ? json['req_id'] as int : 0;
    val.ttl = json.containsKey('ttl') ? json['ttl'] as int : 0;
    val.code = json.containsKey('code') && json['code'] != null
        ? TelemetryMsgEnumCode(json['code'] as int)
        : TelemetryMsgEnumCode(0);
    val.destination =
        json.containsKey('destination') && json['destination'] != null
            ? json['destination'] as String
            : '';
    val.source = json.containsKey('Source') && json['Source'] != null
        ? json['Source'] as String
        : '';
    val.acknowledge =
        json.containsKey('acknowledge') && json['acknowledge'] != null
            ? TelemetryMsgBitfieldAcknowledge(json['acknowledge'] as int)
            : TelemetryMsgBitfieldAcknowledge(0);
    val.status = json.containsKey('status') && json['status'] != null
        ? TelemetryMsgEnumStatus(json['status'] as int)
        : TelemetryMsgEnumStatus(0);
    val.data = json.containsKey('data')
        ? base64.decode(json['data'] as String)
        : <int>[];

    return val.build() as _$TelemetryMsg;
  }

  _$TelemetryMsg._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.type,
      required this.reqId,
      required this.ttl,
      required this.code,
      required this.destination,
      required this.source,
      required this.acknowledge,
      required this.status,
      required this.data})
      : super._();

  @override
  TelemetryMsg rebuild(void Function(TelemetryMsgBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  TelemetryMsgBuilder toBuilder() => TelemetryMsgBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is TelemetryMsg &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        type == other.type &&
        reqId == other.reqId &&
        ttl == other.ttl &&
        code == other.code &&
        destination == other.destination &&
        source == other.source &&
        acknowledge == other.acknowledge &&
        status == other.status &&
        ListEquality().equals(data, other.data);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            0,
                                                            timestamp
                                                                    ?.hashCode ??
                                                                null.hashCode),
                                                        src.hashCode),
                                                    srcEnt.hashCode),
                                                dst.hashCode),
                                            dstEnt.hashCode),
                                        type.hashCode),
                                    reqId.hashCode),
                                ttl.hashCode),
                            code.hashCode),
                        destination.hashCode),
                    source.hashCode),
                acknowledge.hashCode),
            status.hashCode),
        data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('TelemetryMsg')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('type', '$type (Enumerated) [${type.toPrettyString()}]')
          ..add('reqId', '$reqId')
          ..add('ttl', '$ttl (s)')
          ..add('code', '$code (Enumerated) [${code.toPrettyString()}]')
          ..add('destination', destination)
          ..add('source', source)
          ..add('acknowledge',
              '$acknowledge (Bitfield) [${acknowledge.toPrettyString()}]')
          ..add('status', '$status (Enumerated) [${status.toPrettyString()}]')
          ..add('data', '$data'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'TelemetryMsg',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'type': type.value,
        'req_id': reqId,
        'ttl': ttl,
        'code': code.value,
        'destination': destination,
        'Source': source,
        'acknowledge': acknowledge.value,
        'status': status.value,
        'data': base64.encode(data),
      };
}

/// Telemetry Message builder class
///
class TelemetryMsgBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<TelemetryMsg, TelemetryMsgBuilder> {
  _$TelemetryMsg? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  TelemetryMsgEnumType _type = TelemetryMsgEnumType(0);
  TelemetryMsgEnumType get type => _$this._type;
  set type(TelemetryMsgEnumType type) => _$this._type = type;

  int _reqId = 0;
  int get reqId => _$this._reqId;
  set reqId(int reqId) => _$this._reqId = reqId;

  int _ttl = 0;
  int get ttl => _$this._ttl;
  set ttl(int ttl) => _$this._ttl = ttl;

  TelemetryMsgEnumCode _code = TelemetryMsgEnumCode(0);
  TelemetryMsgEnumCode get code => _$this._code;
  set code(TelemetryMsgEnumCode code) => _$this._code = code;

  String _destination = '';
  String get destination => _$this._destination;
  set destination(String destination) => _$this._destination = destination;

  String _source = '';
  String get source => _$this._source;
  set source(String source) => _$this._source = source;

  TelemetryMsgBitfieldAcknowledge _acknowledge =
      TelemetryMsgBitfieldAcknowledge(0);
  TelemetryMsgBitfieldAcknowledge get acknowledge => _$this._acknowledge;
  set acknowledge(TelemetryMsgBitfieldAcknowledge acknowledge) =>
      _$this._acknowledge = acknowledge;

  TelemetryMsgEnumStatus _status = TelemetryMsgEnumStatus(0);
  TelemetryMsgEnumStatus get status => _$this._status;
  set status(TelemetryMsgEnumStatus status) => _$this._status = status;

  List<int> _data = <int>[];
  List<int> get data => _$this._data;
  set data(List<int> data) => _$this._data = data;

  TelemetryMsgBuilder();

  TelemetryMsgBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  TelemetryMsgBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$TelemetryMsg.fromJson(json);
    replace(v);
  }

  @override
  TelemetryMsgBuilder fromJson(core.Map<String, dynamic> json) =>
      TelemetryMsgBuilder.fromJson(json);

  @override
  TelemetryMsgBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      TelemetryMsgBuilder()..copyFromHeader(headerFrom);

  TelemetryMsgBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _type = _$v!.type;
      _reqId = _$v!.reqId;
      _ttl = _$v!.ttl;
      _code = _$v!.code;
      _destination = _$v!.destination;
      _source = _$v!.source;
      _acknowledge = _$v!.acknowledge;
      _status = _$v!.status;
      _data = _$v!.data;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(TelemetryMsg other) {
    _$v = other as _$TelemetryMsg;
  }

  @override
  void update(void Function(TelemetryMsgBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  TelemetryMsg build() {
    final result = _$v ??
        _$TelemetryMsg._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            type: type,
            reqId: reqId,
            ttl: ttl,
            code: code,
            destination: destination,
            source: source,
            acknowledge: acknowledge,
            status: status,
            data: data);
    replace(result);
    return result;
  }
}

/// LBL Range immutable class
///
class _$LblRange extends LblRange {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int id;
  @override
  final double range;

  factory _$LblRange([void Function(LblRangeBuilder b)? updates]) =>
      (LblRangeBuilder()..update(updates)).build() as _$LblRange;

  factory _$LblRange.fromJson(core.Map<String, dynamic> json) {
    var val = LblRangeBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.id = json.containsKey('id') ? json['id'] as int : 0;
    val.range = json.containsKey('range') ? json['range'] as double : 0;

    return val.build() as _$LblRange;
  }

  _$LblRange._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.id,
      required this.range})
      : super._();

  @override
  LblRange rebuild(void Function(LblRangeBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  LblRangeBuilder toBuilder() => LblRangeBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is LblRange &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        id == other.id &&
        (range == other.range || range - other.range <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            id.hashCode),
        range.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('LblRange')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('id', '$id')
          ..add('range', '$range (m)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'LblRange',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'id': id,
        'range': range,
      };
}

/// LBL Range builder class
///
class LblRangeBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<LblRange, LblRangeBuilder> {
  _$LblRange? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _id = 0;
  int get id => _$this._id;
  set id(int id) => _$this._id = id;

  double _range = 0;
  double get range => _$this._range;
  set range(double range) => _$this._range = range;

  LblRangeBuilder();

  LblRangeBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  LblRangeBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$LblRange.fromJson(json);
    replace(v);
  }

  @override
  LblRangeBuilder fromJson(core.Map<String, dynamic> json) =>
      LblRangeBuilder.fromJson(json);

  @override
  LblRangeBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      LblRangeBuilder()..copyFromHeader(headerFrom);

  LblRangeBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _id = _$v!.id;
      _range = _$v!.range;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(LblRange other) {
    _$v = other as _$LblRange;
  }

  @override
  void update(void Function(LblRangeBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  LblRange build() {
    final result = _$v ??
        _$LblRange._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            id: id,
            range: range);
    replace(result);
    return result;
  }
}

/// LBL Beacon Configuration immutable class
///
class _$LblBeacon extends LblBeacon {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String beacon;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double depth;
  @override
  final int queryChannel;
  @override
  final int replyChannel;
  @override
  final int transponderDelay;

  factory _$LblBeacon([void Function(LblBeaconBuilder b)? updates]) =>
      (LblBeaconBuilder()..update(updates)).build() as _$LblBeacon;

  factory _$LblBeacon.fromJson(core.Map<String, dynamic> json) {
    var val = LblBeaconBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.beacon = json.containsKey('beacon') && json['beacon'] != null
        ? json['beacon'] as String
        : '';
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.depth = json.containsKey('depth') ? json['depth'] as double : 0;
    val.queryChannel =
        json.containsKey('query_channel') ? json['query_channel'] as int : 0;
    val.replyChannel =
        json.containsKey('reply_channel') ? json['reply_channel'] as int : 0;
    val.transponderDelay = json.containsKey('transponder_delay')
        ? json['transponder_delay'] as int
        : 0;

    return val.build() as _$LblBeacon;
  }

  _$LblBeacon._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.beacon,
      required this.lat,
      required this.lon,
      required this.depth,
      required this.queryChannel,
      required this.replyChannel,
      required this.transponderDelay})
      : super._();

  @override
  LblBeacon rebuild(void Function(LblBeaconBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  LblBeaconBuilder toBuilder() => LblBeaconBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is LblBeacon &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        beacon == other.beacon &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (depth == other.depth || depth - other.depth <= 1E-7) &&
        queryChannel == other.queryChannel &&
        replyChannel == other.replyChannel &&
        transponderDelay == other.transponderDelay;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    0,
                                                    timestamp?.hashCode ??
                                                        null.hashCode),
                                                src.hashCode),
                                            srcEnt.hashCode),
                                        dst.hashCode),
                                    dstEnt.hashCode),
                                beacon.hashCode),
                            lat.hashCode),
                        lon.hashCode),
                    depth.hashCode),
                queryChannel.hashCode),
            replyChannel.hashCode),
        transponderDelay.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('LblBeacon')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('beacon', beacon)
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('depth', '$depth (m)')
          ..add('queryChannel', '$queryChannel')
          ..add('replyChannel', '$replyChannel')
          ..add('transponderDelay', '$transponderDelay (ms)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'LblBeacon',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'beacon': beacon,
        'lat': lat,
        'lon': lon,
        'depth': depth,
        'query_channel': queryChannel,
        'reply_channel': replyChannel,
        'transponder_delay': transponderDelay,
      };
}

/// LBL Beacon Configuration builder class
///
class LblBeaconBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<LblBeacon, LblBeaconBuilder> {
  _$LblBeacon? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _beacon = '';
  String get beacon => _$this._beacon;
  set beacon(String beacon) => _$this._beacon = beacon;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _depth = 0;
  double get depth => _$this._depth;
  set depth(double depth) => _$this._depth = depth;

  int _queryChannel = 0;
  int get queryChannel => _$this._queryChannel;
  set queryChannel(int queryChannel) => _$this._queryChannel = queryChannel;

  int _replyChannel = 0;
  int get replyChannel => _$this._replyChannel;
  set replyChannel(int replyChannel) => _$this._replyChannel = replyChannel;

  int _transponderDelay = 0;
  int get transponderDelay => _$this._transponderDelay;
  set transponderDelay(int transponderDelay) =>
      _$this._transponderDelay = transponderDelay;

  LblBeaconBuilder();

  LblBeaconBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  LblBeaconBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$LblBeacon.fromJson(json);
    replace(v);
  }

  @override
  LblBeaconBuilder fromJson(core.Map<String, dynamic> json) =>
      LblBeaconBuilder.fromJson(json);

  @override
  LblBeaconBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      LblBeaconBuilder()..copyFromHeader(headerFrom);

  LblBeaconBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _beacon = _$v!.beacon;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _depth = _$v!.depth;
      _queryChannel = _$v!.queryChannel;
      _replyChannel = _$v!.replyChannel;
      _transponderDelay = _$v!.transponderDelay;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(LblBeacon other) {
    _$v = other as _$LblBeacon;
  }

  @override
  void update(void Function(LblBeaconBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  LblBeacon build() {
    final result = _$v ??
        _$LblBeacon._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            beacon: beacon,
            lat: lat,
            lon: lon,
            depth: depth,
            queryChannel: queryChannel,
            replyChannel: replyChannel,
            transponderDelay: transponderDelay);
    replace(result);
    return result;
  }
}

/// LBL Configuration immutable class
///
class _$LblConfig extends LblConfig {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final LblConfigEnumOp op;
  @override
  final List<LblBeacon> beacons;

  factory _$LblConfig([void Function(LblConfigBuilder b)? updates]) =>
      (LblConfigBuilder()..update(updates)).build() as _$LblConfig;

  factory _$LblConfig.fromJson(core.Map<String, dynamic> json) {
    var val = LblConfigBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.op = json.containsKey('op') && json['op'] != null
        ? LblConfigEnumOp(json['op'] as int)
        : LblConfigEnumOp(0);
    var beacons = <LblBeacon>[];
    if (json.containsKey('beacons') && json['beacons'] != null) {
      var listJson = json['beacons'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as LblBeacon?;
          if (m != null) beacons.add(m);
        }
      }
    }
    val.beacons = beacons;

    return val.build() as _$LblConfig;
  }

  _$LblConfig._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.op,
      required this.beacons})
      : super._();

  @override
  LblConfig rebuild(void Function(LblConfigBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  LblConfigBuilder toBuilder() => LblConfigBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is LblConfig &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        op == other.op &&
        DeepCollectionEquality().equals(beacons, other.beacons);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            op.hashCode),
        beacons.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('LblConfig')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]')
          ..add('beacons', '$beacons'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'LblConfig',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'op': op.value,
        'beacons': [
          ...beacons.map((m) => m.toJson(false)),
        ],
      };
}

/// LBL Configuration builder class
///
class LblConfigBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<LblConfig, LblConfigBuilder> {
  _$LblConfig? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  LblConfigEnumOp _op = LblConfigEnumOp(0);
  LblConfigEnumOp get op => _$this._op;
  set op(LblConfigEnumOp op) => _$this._op = op;

  List<LblBeacon> _beacons = <LblBeacon>[];
  List<LblBeacon> get beacons => _$this._beacons;
  set beacons(List<LblBeacon> beacons) => _$this._beacons = beacons;

  LblConfigBuilder();

  LblConfigBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  LblConfigBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$LblConfig.fromJson(json);
    replace(v);
  }

  @override
  LblConfigBuilder fromJson(core.Map<String, dynamic> json) =>
      LblConfigBuilder.fromJson(json);

  @override
  LblConfigBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      LblConfigBuilder()..copyFromHeader(headerFrom);

  LblConfigBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _op = _$v!.op;
      _beacons = _$v!.beacons;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(LblConfig other) {
    _$v = other as _$LblConfig;
  }

  @override
  void update(void Function(LblConfigBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  LblConfig build() {
    final result = _$v ??
        _$LblConfig._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            op: op,
            beacons: beacons);
    replace(result);
    return result;
  }
}

/// Acoustic Message immutable class
///
class _$AcousticMessage extends AcousticMessage {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final ImcMessage? message;

  factory _$AcousticMessage(
          [void Function(AcousticMessageBuilder b)? updates]) =>
      (AcousticMessageBuilder()..update(updates)).build() as _$AcousticMessage;

  factory _$AcousticMessage.fromJson(core.Map<String, dynamic> json) {
    var val = AcousticMessageBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    ImcMessage? message;
    if (json.containsKey('message') && json['message'] != null) {
      var msgJson = json['message'] as core.Map<String, dynamic>;
      if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
        var msgType = msgJson['abbrev'] as String;
        var builder = messagesBuilders[msgType]?.call();
        builder = builder?.fromJson(msgJson);
        message = builder?.build() as ImcMessage?;
      }
    }
    val.message = message;

    return val.build() as _$AcousticMessage;
  }

  _$AcousticMessage._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      this.message})
      : super._();

  @override
  AcousticMessage rebuild(void Function(AcousticMessageBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  AcousticMessageBuilder toBuilder() => AcousticMessageBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is AcousticMessage &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        message == other.message;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        message?.hashCode ?? null.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('AcousticMessage')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('message', '$message'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'AcousticMessage',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'message': message?.toJson(false),
      };
}

/// Acoustic Message builder class
///
class AcousticMessageBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<AcousticMessage, AcousticMessageBuilder> {
  _$AcousticMessage? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  ImcMessage? _message;
  ImcMessage? get message => _$this._message;
  set message(ImcMessage? message) => _$this._message = message;

  AcousticMessageBuilder();

  AcousticMessageBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  AcousticMessageBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$AcousticMessage.fromJson(json);
    replace(v);
  }

  @override
  AcousticMessageBuilder fromJson(core.Map<String, dynamic> json) =>
      AcousticMessageBuilder.fromJson(json);

  @override
  AcousticMessageBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      AcousticMessageBuilder()..copyFromHeader(headerFrom);

  AcousticMessageBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _message = _$v!.message;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(AcousticMessage other) {
    _$v = other as _$AcousticMessage;
  }

  @override
  void update(void Function(AcousticMessageBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  AcousticMessage build() {
    final result = _$v ??
        _$AcousticMessage._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            message: message);
    replace(result);
    return result;
  }
}

/// Simulated Acoustic Message immutable class
///
class _$SimAcousticMessage extends SimAcousticMessage {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double lat;
  @override
  final double lon;
  @override
  final double depth;
  @override
  final String sentence;
  @override
  final double txtime;
  @override
  final String modemType;
  @override
  final String sysSrc;
  @override
  final int seq;
  @override
  final String sysDst;
  @override
  final SimAcousticMessageBitfieldFlags flags;
  @override
  final List<int> data;

  factory _$SimAcousticMessage(
          [void Function(SimAcousticMessageBuilder b)? updates]) =>
      (SimAcousticMessageBuilder()..update(updates)).build()
          as _$SimAcousticMessage;

  factory _$SimAcousticMessage.fromJson(core.Map<String, dynamic> json) {
    var val = SimAcousticMessageBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.depth = json.containsKey('depth') ? json['depth'] as double : 0;
    val.sentence = json.containsKey('sentence') && json['sentence'] != null
        ? json['sentence'] as String
        : '';
    val.txtime = json.containsKey('txtime') ? json['txtime'] as double : 0;
    val.modemType = json.containsKey('modem_type') && json['modem_type'] != null
        ? json['modem_type'] as String
        : '';
    val.sysSrc = json.containsKey('sys_src') && json['sys_src'] != null
        ? json['sys_src'] as String
        : '';
    val.seq = json.containsKey('seq') ? json['seq'] as int : 0;
    val.sysDst = json.containsKey('sys_dst') && json['sys_dst'] != null
        ? json['sys_dst'] as String
        : '';
    val.flags = json.containsKey('flags') && json['flags'] != null
        ? SimAcousticMessageBitfieldFlags(json['flags'] as int)
        : SimAcousticMessageBitfieldFlags(0);
    val.data = json.containsKey('data')
        ? base64.decode(json['data'] as String)
        : <int>[];

    return val.build() as _$SimAcousticMessage;
  }

  _$SimAcousticMessage._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.lat,
      required this.lon,
      required this.depth,
      required this.sentence,
      required this.txtime,
      required this.modemType,
      required this.sysSrc,
      required this.seq,
      required this.sysDst,
      required this.flags,
      required this.data})
      : super._();

  @override
  SimAcousticMessage rebuild(
          void Function(SimAcousticMessageBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SimAcousticMessageBuilder toBuilder() =>
      SimAcousticMessageBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is SimAcousticMessage &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (depth == other.depth || depth - other.depth <= 1E-7) &&
        sentence == other.sentence &&
        (txtime == other.txtime || txtime - other.txtime <= 1E-7) &&
        modemType == other.modemType &&
        sysSrc == other.sysSrc &&
        seq == other.seq &&
        sysDst == other.sysDst &&
        flags == other.flags &&
        ListEquality().equals(data, other.data);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    0,
                                                                    timestamp
                                                                            ?.hashCode ??
                                                                        null.hashCode),
                                                                src.hashCode),
                                                            srcEnt.hashCode),
                                                        dst.hashCode),
                                                    dstEnt.hashCode),
                                                lat.hashCode),
                                            lon.hashCode),
                                        depth.hashCode),
                                    sentence.hashCode),
                                txtime.hashCode),
                            modemType.hashCode),
                        sysSrc.hashCode),
                    seq.hashCode),
                sysDst.hashCode),
            flags.hashCode),
        data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('SimAcousticMessage')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('lat', '$lat')
          ..add('lon', '$lon')
          ..add('depth', '$depth')
          ..add('sentence', sentence)
          ..add('txtime', '$txtime (s)')
          ..add('modemType', modemType)
          ..add('sysSrc', sysSrc)
          ..add('seq', '$seq')
          ..add('sysDst', sysDst)
          ..add('flags', '$flags (Bitfield) [${flags.toPrettyString()}]')
          ..add('data', '$data'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'SimAcousticMessage',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'lat': lat,
        'lon': lon,
        'depth': depth,
        'sentence': sentence,
        'txtime': txtime,
        'modem_type': modemType,
        'sys_src': sysSrc,
        'seq': seq,
        'sys_dst': sysDst,
        'flags': flags.value,
        'data': base64.encode(data),
      };
}

/// Simulated Acoustic Message builder class
///
class SimAcousticMessageBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<SimAcousticMessage, SimAcousticMessageBuilder> {
  _$SimAcousticMessage? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _depth = 0;
  double get depth => _$this._depth;
  set depth(double depth) => _$this._depth = depth;

  String _sentence = '';
  String get sentence => _$this._sentence;
  set sentence(String sentence) => _$this._sentence = sentence;

  double _txtime = 0;
  double get txtime => _$this._txtime;
  set txtime(double txtime) => _$this._txtime = txtime;

  String _modemType = '';
  String get modemType => _$this._modemType;
  set modemType(String modemType) => _$this._modemType = modemType;

  String _sysSrc = '';
  String get sysSrc => _$this._sysSrc;
  set sysSrc(String sysSrc) => _$this._sysSrc = sysSrc;

  int _seq = 0;
  int get seq => _$this._seq;
  set seq(int seq) => _$this._seq = seq;

  String _sysDst = '';
  String get sysDst => _$this._sysDst;
  set sysDst(String sysDst) => _$this._sysDst = sysDst;

  SimAcousticMessageBitfieldFlags _flags = SimAcousticMessageBitfieldFlags(0);
  SimAcousticMessageBitfieldFlags get flags => _$this._flags;
  set flags(SimAcousticMessageBitfieldFlags flags) => _$this._flags = flags;

  List<int> _data = <int>[];
  List<int> get data => _$this._data;
  set data(List<int> data) => _$this._data = data;

  SimAcousticMessageBuilder();

  SimAcousticMessageBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SimAcousticMessageBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$SimAcousticMessage.fromJson(json);
    replace(v);
  }

  @override
  SimAcousticMessageBuilder fromJson(core.Map<String, dynamic> json) =>
      SimAcousticMessageBuilder.fromJson(json);

  @override
  SimAcousticMessageBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SimAcousticMessageBuilder()..copyFromHeader(headerFrom);

  SimAcousticMessageBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _depth = _$v!.depth;
      _sentence = _$v!.sentence;
      _txtime = _$v!.txtime;
      _modemType = _$v!.modemType;
      _sysSrc = _$v!.sysSrc;
      _seq = _$v!.seq;
      _sysDst = _$v!.sysDst;
      _flags = _$v!.flags;
      _data = _$v!.data;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(SimAcousticMessage other) {
    _$v = other as _$SimAcousticMessage;
  }

  @override
  void update(void Function(SimAcousticMessageBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  SimAcousticMessage build() {
    final result = _$v ??
        _$SimAcousticMessage._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            lat: lat,
            lon: lon,
            depth: depth,
            sentence: sentence,
            txtime: txtime,
            modemType: modemType,
            sysSrc: sysSrc,
            seq: seq,
            sysDst: sysDst,
            flags: flags,
            data: data);
    replace(result);
    return result;
  }
}

/// Acoustic Operation immutable class
///
class _$AcousticOperation extends AcousticOperation {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final AcousticOperationEnumOp op;
  @override
  final String system;
  @override
  final double range;
  @override
  final ImcMessage? msg;

  factory _$AcousticOperation(
          [void Function(AcousticOperationBuilder b)? updates]) =>
      (AcousticOperationBuilder()..update(updates)).build()
          as _$AcousticOperation;

  factory _$AcousticOperation.fromJson(core.Map<String, dynamic> json) {
    var val = AcousticOperationBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.op = json.containsKey('op') && json['op'] != null
        ? AcousticOperationEnumOp(json['op'] as int)
        : AcousticOperationEnumOp(0);
    val.system = json.containsKey('system') && json['system'] != null
        ? json['system'] as String
        : '';
    val.range = json.containsKey('range') ? json['range'] as double : 0;

    ImcMessage? msg;
    if (json.containsKey('msg') && json['msg'] != null) {
      var msgJson = json['msg'] as core.Map<String, dynamic>;
      if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
        var msgType = msgJson['abbrev'] as String;
        var builder = messagesBuilders[msgType]?.call();
        builder = builder?.fromJson(msgJson);
        msg = builder?.build() as ImcMessage?;
      }
    }
    val.msg = msg;

    return val.build() as _$AcousticOperation;
  }

  _$AcousticOperation._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.op,
      required this.system,
      required this.range,
      this.msg})
      : super._();

  @override
  AcousticOperation rebuild(
          void Function(AcousticOperationBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  AcousticOperationBuilder toBuilder() =>
      AcousticOperationBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is AcousticOperation &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        op == other.op &&
        system == other.system &&
        (range == other.range || range - other.range <= 1E-7) &&
        msg == other.msg;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    op.hashCode),
                system.hashCode),
            range.hashCode),
        msg?.hashCode ?? null.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('AcousticOperation')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]')
          ..add('system', system)
          ..add('range', '$range (m)')
          ..add('msg', '$msg'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'AcousticOperation',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'op': op.value,
        'system': system,
        'range': range,
        'msg': msg?.toJson(false),
      };
}

/// Acoustic Operation builder class
///
class AcousticOperationBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<AcousticOperation, AcousticOperationBuilder> {
  _$AcousticOperation? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  AcousticOperationEnumOp _op = AcousticOperationEnumOp(0);
  AcousticOperationEnumOp get op => _$this._op;
  set op(AcousticOperationEnumOp op) => _$this._op = op;

  String _system = '';
  String get system => _$this._system;
  set system(String system) => _$this._system = system;

  double _range = 0;
  double get range => _$this._range;
  set range(double range) => _$this._range = range;

  ImcMessage? _msg;
  ImcMessage? get msg => _$this._msg;
  set msg(ImcMessage? msg) => _$this._msg = msg;

  AcousticOperationBuilder();

  AcousticOperationBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  AcousticOperationBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$AcousticOperation.fromJson(json);
    replace(v);
  }

  @override
  AcousticOperationBuilder fromJson(core.Map<String, dynamic> json) =>
      AcousticOperationBuilder.fromJson(json);

  @override
  AcousticOperationBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      AcousticOperationBuilder()..copyFromHeader(headerFrom);

  AcousticOperationBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _op = _$v!.op;
      _system = _$v!.system;
      _range = _$v!.range;
      _msg = _$v!.msg;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(AcousticOperation other) {
    _$v = other as _$AcousticOperation;
  }

  @override
  void update(void Function(AcousticOperationBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  AcousticOperation build() {
    final result = _$v ??
        _$AcousticOperation._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            op: op,
            system: system,
            range: range,
            msg: msg);
    replace(result);
    return result;
  }
}

/// Acoustic Systems Query immutable class
///
class _$AcousticSystemsQuery extends AcousticSystemsQuery {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  factory _$AcousticSystemsQuery(
          [void Function(AcousticSystemsQueryBuilder b)? updates]) =>
      (AcousticSystemsQueryBuilder()..update(updates)).build()
          as _$AcousticSystemsQuery;

  factory _$AcousticSystemsQuery.fromJson(core.Map<String, dynamic> json) {
    var val = AcousticSystemsQueryBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    return val.build() as _$AcousticSystemsQuery;
  }

  _$AcousticSystemsQuery._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId})
      : super._();

  @override
  AcousticSystemsQuery rebuild(
          void Function(AcousticSystemsQueryBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  AcousticSystemsQueryBuilder toBuilder() =>
      AcousticSystemsQueryBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is AcousticSystemsQuery &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc($jc($jc(0, timestamp?.hashCode ?? null.hashCode), src.hashCode),
                srcEnt.hashCode),
            dst.hashCode),
        dstEnt.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('AcousticSystemsQuery')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'AcousticSystemsQuery',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
      };
}

/// Acoustic Systems Query builder class
///
class AcousticSystemsQueryBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<AcousticSystemsQuery,
            AcousticSystemsQueryBuilder> {
  _$AcousticSystemsQuery? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  AcousticSystemsQueryBuilder();

  AcousticSystemsQueryBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  AcousticSystemsQueryBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$AcousticSystemsQuery.fromJson(json);
    replace(v);
  }

  @override
  AcousticSystemsQueryBuilder fromJson(core.Map<String, dynamic> json) =>
      AcousticSystemsQueryBuilder.fromJson(json);

  @override
  AcousticSystemsQueryBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      AcousticSystemsQueryBuilder()..copyFromHeader(headerFrom);

  AcousticSystemsQueryBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(AcousticSystemsQuery other) {
    _$v = other as _$AcousticSystemsQuery;
  }

  @override
  void update(void Function(AcousticSystemsQueryBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  AcousticSystemsQuery build() {
    final result = _$v ??
        _$AcousticSystemsQuery._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt);
    replace(result);
    return result;
  }
}

/// Acoustic Systems immutable class
///
class _$AcousticSystems extends AcousticSystems {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String list;

  factory _$AcousticSystems(
          [void Function(AcousticSystemsBuilder b)? updates]) =>
      (AcousticSystemsBuilder()..update(updates)).build() as _$AcousticSystems;

  factory _$AcousticSystems.fromJson(core.Map<String, dynamic> json) {
    var val = AcousticSystemsBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.list = json.containsKey('list') && json['list'] != null
        ? json['list'] as String
        : '';

    return val.build() as _$AcousticSystems;
  }

  _$AcousticSystems._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.list})
      : super._();

  @override
  AcousticSystems rebuild(void Function(AcousticSystemsBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  AcousticSystemsBuilder toBuilder() => AcousticSystemsBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is AcousticSystems &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        list == other.list;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        list.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('AcousticSystems')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('list', '$list (List)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'AcousticSystems',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'list': list,
      };
}

/// Acoustic Systems builder class
///
class AcousticSystemsBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<AcousticSystems, AcousticSystemsBuilder> {
  _$AcousticSystems? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _list = '';
  String get list => _$this._list;
  set list(String list) => _$this._list = list;

  AcousticSystemsBuilder();

  AcousticSystemsBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  AcousticSystemsBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$AcousticSystems.fromJson(json);
    replace(v);
  }

  @override
  AcousticSystemsBuilder fromJson(core.Map<String, dynamic> json) =>
      AcousticSystemsBuilder.fromJson(json);

  @override
  AcousticSystemsBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      AcousticSystemsBuilder()..copyFromHeader(headerFrom);

  AcousticSystemsBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _list = _$v!.list;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(AcousticSystems other) {
    _$v = other as _$AcousticSystems;
  }

  @override
  void update(void Function(AcousticSystemsBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  AcousticSystems build() {
    final result = _$v ??
        _$AcousticSystems._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            list: list);
    replace(result);
    return result;
  }
}

/// Acoustic Link Quality immutable class
///
class _$AcousticLink extends AcousticLink {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String peer;
  @override
  final double rssi;
  @override
  final int integrity;

  factory _$AcousticLink([void Function(AcousticLinkBuilder b)? updates]) =>
      (AcousticLinkBuilder()..update(updates)).build() as _$AcousticLink;

  factory _$AcousticLink.fromJson(core.Map<String, dynamic> json) {
    var val = AcousticLinkBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.peer = json.containsKey('peer') && json['peer'] != null
        ? json['peer'] as String
        : '';
    val.rssi = json.containsKey('rssi') ? json['rssi'] as double : 0;
    val.integrity =
        json.containsKey('integrity') ? json['integrity'] as int : 0;

    return val.build() as _$AcousticLink;
  }

  _$AcousticLink._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.peer,
      required this.rssi,
      required this.integrity})
      : super._();

  @override
  AcousticLink rebuild(void Function(AcousticLinkBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  AcousticLinkBuilder toBuilder() => AcousticLinkBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is AcousticLink &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        peer == other.peer &&
        (rssi == other.rssi || rssi - other.rssi <= 1E-7) &&
        integrity == other.integrity;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                peer.hashCode),
            rssi.hashCode),
        integrity.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('AcousticLink')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('peer', peer)
          ..add('rssi', '$rssi (dB)')
          ..add('integrity', '$integrity'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'AcousticLink',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'peer': peer,
        'rssi': rssi,
        'integrity': integrity,
      };
}

/// Acoustic Link Quality builder class
///
class AcousticLinkBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<AcousticLink, AcousticLinkBuilder> {
  _$AcousticLink? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _peer = '';
  String get peer => _$this._peer;
  set peer(String peer) => _$this._peer = peer;

  double _rssi = 0;
  double get rssi => _$this._rssi;
  set rssi(double rssi) => _$this._rssi = rssi;

  int _integrity = 0;
  int get integrity => _$this._integrity;
  set integrity(int integrity) => _$this._integrity = integrity;

  AcousticLinkBuilder();

  AcousticLinkBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  AcousticLinkBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$AcousticLink.fromJson(json);
    replace(v);
  }

  @override
  AcousticLinkBuilder fromJson(core.Map<String, dynamic> json) =>
      AcousticLinkBuilder.fromJson(json);

  @override
  AcousticLinkBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      AcousticLinkBuilder()..copyFromHeader(headerFrom);

  AcousticLinkBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _peer = _$v!.peer;
      _rssi = _$v!.rssi;
      _integrity = _$v!.integrity;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(AcousticLink other) {
    _$v = other as _$AcousticLink;
  }

  @override
  void update(void Function(AcousticLinkBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  AcousticLink build() {
    final result = _$v ??
        _$AcousticLink._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            peer: peer,
            rssi: rssi,
            integrity: integrity);
    replace(result);
    return result;
  }
}

/// Acoustic Transmission Request immutable class
///
class _$AcousticRequest extends AcousticRequest {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int reqId;
  @override
  final String destination;
  @override
  final double timeout;
  @override
  final double range;
  @override
  final AcousticRequestEnumType type;
  @override
  final ImcMessage? msg;

  factory _$AcousticRequest(
          [void Function(AcousticRequestBuilder b)? updates]) =>
      (AcousticRequestBuilder()..update(updates)).build() as _$AcousticRequest;

  factory _$AcousticRequest.fromJson(core.Map<String, dynamic> json) {
    var val = AcousticRequestBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.reqId = json.containsKey('req_id') ? json['req_id'] as int : 0;
    val.destination =
        json.containsKey('destination') && json['destination'] != null
            ? json['destination'] as String
            : '';
    val.timeout = json.containsKey('timeout') ? json['timeout'] as double : 0;
    val.range = json.containsKey('range') ? json['range'] as double : 0;
    val.type = json.containsKey('type') && json['type'] != null
        ? AcousticRequestEnumType(json['type'] as int)
        : AcousticRequestEnumType(0);

    ImcMessage? msg;
    if (json.containsKey('msg') && json['msg'] != null) {
      var msgJson = json['msg'] as core.Map<String, dynamic>;
      if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
        var msgType = msgJson['abbrev'] as String;
        var builder = messagesBuilders[msgType]?.call();
        builder = builder?.fromJson(msgJson);
        msg = builder?.build() as ImcMessage?;
      }
    }
    val.msg = msg;

    return val.build() as _$AcousticRequest;
  }

  _$AcousticRequest._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.reqId,
      required this.destination,
      required this.timeout,
      required this.range,
      required this.type,
      this.msg})
      : super._();

  @override
  AcousticRequest rebuild(void Function(AcousticRequestBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  AcousticRequestBuilder toBuilder() => AcousticRequestBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is AcousticRequest &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        reqId == other.reqId &&
        destination == other.destination &&
        (timeout == other.timeout || timeout - other.timeout <= 1E-7) &&
        (range == other.range || range - other.range <= 1E-7) &&
        type == other.type &&
        msg == other.msg;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                0,
                                                timestamp?.hashCode ??
                                                    null.hashCode),
                                            src.hashCode),
                                        srcEnt.hashCode),
                                    dst.hashCode),
                                dstEnt.hashCode),
                            reqId.hashCode),
                        destination.hashCode),
                    timeout.hashCode),
                range.hashCode),
            type.hashCode),
        msg?.hashCode ?? null.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('AcousticRequest')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('reqId', '$reqId')
          ..add('destination', destination)
          ..add('timeout', '$timeout (s)')
          ..add('range', '$range (m)')
          ..add('type', '$type (Enumerated) [${type.toPrettyString()}]')
          ..add('msg', '$msg'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'AcousticRequest',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'req_id': reqId,
        'destination': destination,
        'timeout': timeout,
        'range': range,
        'type': type.value,
        'msg': msg?.toJson(false),
      };
}

/// Acoustic Transmission Request builder class
///
class AcousticRequestBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<AcousticRequest, AcousticRequestBuilder> {
  _$AcousticRequest? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _reqId = 0;
  int get reqId => _$this._reqId;
  set reqId(int reqId) => _$this._reqId = reqId;

  String _destination = '';
  String get destination => _$this._destination;
  set destination(String destination) => _$this._destination = destination;

  double _timeout = 0;
  double get timeout => _$this._timeout;
  set timeout(double timeout) => _$this._timeout = timeout;

  double _range = 0;
  double get range => _$this._range;
  set range(double range) => _$this._range = range;

  AcousticRequestEnumType _type = AcousticRequestEnumType(0);
  AcousticRequestEnumType get type => _$this._type;
  set type(AcousticRequestEnumType type) => _$this._type = type;

  ImcMessage? _msg;
  ImcMessage? get msg => _$this._msg;
  set msg(ImcMessage? msg) => _$this._msg = msg;

  AcousticRequestBuilder();

  AcousticRequestBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  AcousticRequestBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$AcousticRequest.fromJson(json);
    replace(v);
  }

  @override
  AcousticRequestBuilder fromJson(core.Map<String, dynamic> json) =>
      AcousticRequestBuilder.fromJson(json);

  @override
  AcousticRequestBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      AcousticRequestBuilder()..copyFromHeader(headerFrom);

  AcousticRequestBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _reqId = _$v!.reqId;
      _destination = _$v!.destination;
      _timeout = _$v!.timeout;
      _range = _$v!.range;
      _type = _$v!.type;
      _msg = _$v!.msg;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(AcousticRequest other) {
    _$v = other as _$AcousticRequest;
  }

  @override
  void update(void Function(AcousticRequestBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  AcousticRequest build() {
    final result = _$v ??
        _$AcousticRequest._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            reqId: reqId,
            destination: destination,
            timeout: timeout,
            range: range,
            type: type,
            msg: msg);
    replace(result);
    return result;
  }
}

/// Acoustic Transmission Status immutable class
///
class _$AcousticStatus extends AcousticStatus {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int reqId;
  @override
  final AcousticStatusEnumType type;
  @override
  final AcousticStatusEnumStatus status;
  @override
  final String info;
  @override
  final double range;

  factory _$AcousticStatus([void Function(AcousticStatusBuilder b)? updates]) =>
      (AcousticStatusBuilder()..update(updates)).build() as _$AcousticStatus;

  factory _$AcousticStatus.fromJson(core.Map<String, dynamic> json) {
    var val = AcousticStatusBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.reqId = json.containsKey('req_id') ? json['req_id'] as int : 0;
    val.type = json.containsKey('type') && json['type'] != null
        ? AcousticStatusEnumType(json['type'] as int)
        : AcousticStatusEnumType(0);
    val.status = json.containsKey('status') && json['status'] != null
        ? AcousticStatusEnumStatus(json['status'] as int)
        : AcousticStatusEnumStatus(0);
    val.info = json.containsKey('info') && json['info'] != null
        ? json['info'] as String
        : '';
    val.range = json.containsKey('range') ? json['range'] as double : 0;

    return val.build() as _$AcousticStatus;
  }

  _$AcousticStatus._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.reqId,
      required this.type,
      required this.status,
      required this.info,
      required this.range})
      : super._();

  @override
  AcousticStatus rebuild(void Function(AcousticStatusBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  AcousticStatusBuilder toBuilder() => AcousticStatusBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is AcousticStatus &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        reqId == other.reqId &&
        type == other.type &&
        status == other.status &&
        info == other.info &&
        (range == other.range || range - other.range <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            0,
                                            timestamp?.hashCode ??
                                                null.hashCode),
                                        src.hashCode),
                                    srcEnt.hashCode),
                                dst.hashCode),
                            dstEnt.hashCode),
                        reqId.hashCode),
                    type.hashCode),
                status.hashCode),
            info.hashCode),
        range.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('AcousticStatus')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('reqId', '$reqId')
          ..add('type', '$type (Enumerated) [${type.toPrettyString()}]')
          ..add('status', '$status (Enumerated) [${status.toPrettyString()}]')
          ..add('info', info)
          ..add('range', '$range (m)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'AcousticStatus',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'req_id': reqId,
        'type': type.value,
        'status': status.value,
        'info': info,
        'range': range,
      };
}

/// Acoustic Transmission Status builder class
///
class AcousticStatusBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<AcousticStatus, AcousticStatusBuilder> {
  _$AcousticStatus? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _reqId = 0;
  int get reqId => _$this._reqId;
  set reqId(int reqId) => _$this._reqId = reqId;

  AcousticStatusEnumType _type = AcousticStatusEnumType(0);
  AcousticStatusEnumType get type => _$this._type;
  set type(AcousticStatusEnumType type) => _$this._type = type;

  AcousticStatusEnumStatus _status = AcousticStatusEnumStatus(0);
  AcousticStatusEnumStatus get status => _$this._status;
  set status(AcousticStatusEnumStatus status) => _$this._status = status;

  String _info = '';
  String get info => _$this._info;
  set info(String info) => _$this._info = info;

  double _range = 0;
  double get range => _$this._range;
  set range(double range) => _$this._range = range;

  AcousticStatusBuilder();

  AcousticStatusBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  AcousticStatusBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$AcousticStatus.fromJson(json);
    replace(v);
  }

  @override
  AcousticStatusBuilder fromJson(core.Map<String, dynamic> json) =>
      AcousticStatusBuilder.fromJson(json);

  @override
  AcousticStatusBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      AcousticStatusBuilder()..copyFromHeader(headerFrom);

  AcousticStatusBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _reqId = _$v!.reqId;
      _type = _$v!.type;
      _status = _$v!.status;
      _info = _$v!.info;
      _range = _$v!.range;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(AcousticStatus other) {
    _$v = other as _$AcousticStatus;
  }

  @override
  void update(void Function(AcousticStatusBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  AcousticStatus build() {
    final result = _$v ??
        _$AcousticStatus._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            reqId: reqId,
            type: type,
            status: status,
            info: info,
            range: range);
    replace(result);
    return result;
  }
}

/// Revolutions Per Minute immutable class
///
class _$Rpm extends Rpm {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int value;

  factory _$Rpm([void Function(RpmBuilder b)? updates]) =>
      (RpmBuilder()..update(updates)).build() as _$Rpm;

  factory _$Rpm.fromJson(core.Map<String, dynamic> json) {
    var val = RpmBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as int : 0;

    return val.build() as _$Rpm;
  }

  _$Rpm._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  Rpm rebuild(void Function(RpmBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  RpmBuilder toBuilder() => RpmBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Rpm &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        value == other.value;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Rpm')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (rpm)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Rpm',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Revolutions Per Minute builder class
///
class RpmBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Rpm, RpmBuilder> {
  _$Rpm? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _value = 0;
  int get value => _$this._value;
  set value(int value) => _$this._value = value;

  RpmBuilder();

  RpmBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  RpmBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Rpm.fromJson(json);
    replace(v);
  }

  @override
  RpmBuilder fromJson(core.Map<String, dynamic> json) =>
      RpmBuilder.fromJson(json);

  @override
  RpmBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      RpmBuilder()..copyFromHeader(headerFrom);

  RpmBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Rpm other) {
    _$v = other as _$Rpm;
  }

  @override
  void update(void Function(RpmBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Rpm build() {
    final result = _$v ??
        _$Rpm._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Voltage immutable class
///
class _$Voltage extends Voltage {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$Voltage([void Function(VoltageBuilder b)? updates]) =>
      (VoltageBuilder()..update(updates)).build() as _$Voltage;

  factory _$Voltage.fromJson(core.Map<String, dynamic> json) {
    var val = VoltageBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$Voltage;
  }

  _$Voltage._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  Voltage rebuild(void Function(VoltageBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  VoltageBuilder toBuilder() => VoltageBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Voltage &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Voltage')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (V)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Voltage',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Voltage builder class
///
class VoltageBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Voltage, VoltageBuilder> {
  _$Voltage? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  VoltageBuilder();

  VoltageBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  VoltageBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Voltage.fromJson(json);
    replace(v);
  }

  @override
  VoltageBuilder fromJson(core.Map<String, dynamic> json) =>
      VoltageBuilder.fromJson(json);

  @override
  VoltageBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      VoltageBuilder()..copyFromHeader(headerFrom);

  VoltageBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Voltage other) {
    _$v = other as _$Voltage;
  }

  @override
  void update(void Function(VoltageBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Voltage build() {
    final result = _$v ??
        _$Voltage._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Current immutable class
///
class _$Current extends Current {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$Current([void Function(CurrentBuilder b)? updates]) =>
      (CurrentBuilder()..update(updates)).build() as _$Current;

  factory _$Current.fromJson(core.Map<String, dynamic> json) {
    var val = CurrentBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$Current;
  }

  _$Current._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  Current rebuild(void Function(CurrentBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  CurrentBuilder toBuilder() => CurrentBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Current &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Current')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (A)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Current',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Current builder class
///
class CurrentBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Current, CurrentBuilder> {
  _$Current? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  CurrentBuilder();

  CurrentBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  CurrentBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Current.fromJson(json);
    replace(v);
  }

  @override
  CurrentBuilder fromJson(core.Map<String, dynamic> json) =>
      CurrentBuilder.fromJson(json);

  @override
  CurrentBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      CurrentBuilder()..copyFromHeader(headerFrom);

  CurrentBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Current other) {
    _$v = other as _$Current;
  }

  @override
  void update(void Function(CurrentBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Current build() {
    final result = _$v ??
        _$Current._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// GPS Fix immutable class
///
class _$GpsFix extends GpsFix {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final GpsFixBitfieldValidity validity;
  @override
  final GpsFixEnumType type;
  @override
  final int utcYear;
  @override
  final int utcMonth;
  @override
  final int utcDay;
  @override
  final double utcTime;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double height;
  @override
  final int satellites;
  @override
  final double cog;
  @override
  final double sog;
  @override
  final double hdop;
  @override
  final double vdop;
  @override
  final double hacc;
  @override
  final double vacc;

  factory _$GpsFix([void Function(GpsFixBuilder b)? updates]) =>
      (GpsFixBuilder()..update(updates)).build() as _$GpsFix;

  factory _$GpsFix.fromJson(core.Map<String, dynamic> json) {
    var val = GpsFixBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.validity = json.containsKey('validity') && json['validity'] != null
        ? GpsFixBitfieldValidity(json['validity'] as int)
        : GpsFixBitfieldValidity(0);
    val.type = json.containsKey('type') && json['type'] != null
        ? GpsFixEnumType(json['type'] as int)
        : GpsFixEnumType(0);
    val.utcYear = json.containsKey('utc_year') ? json['utc_year'] as int : 0;
    val.utcMonth = json.containsKey('utc_month') ? json['utc_month'] as int : 0;
    val.utcDay = json.containsKey('utc_day') ? json['utc_day'] as int : 0;
    val.utcTime = json.containsKey('utc_time') ? json['utc_time'] as double : 0;
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.height = json.containsKey('height') ? json['height'] as double : 0;
    val.satellites =
        json.containsKey('satellites') ? json['satellites'] as int : 0;
    val.cog = json.containsKey('cog') ? json['cog'] as double : 0;
    val.sog = json.containsKey('sog') ? json['sog'] as double : 0;
    val.hdop = json.containsKey('hdop') ? json['hdop'] as double : 0;
    val.vdop = json.containsKey('vdop') ? json['vdop'] as double : 0;
    val.hacc = json.containsKey('hacc') ? json['hacc'] as double : 0;
    val.vacc = json.containsKey('vacc') ? json['vacc'] as double : 0;

    return val.build() as _$GpsFix;
  }

  _$GpsFix._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.validity,
      required this.type,
      required this.utcYear,
      required this.utcMonth,
      required this.utcDay,
      required this.utcTime,
      required this.lat,
      required this.lon,
      required this.height,
      required this.satellites,
      required this.cog,
      required this.sog,
      required this.hdop,
      required this.vdop,
      required this.hacc,
      required this.vacc})
      : super._();

  @override
  GpsFix rebuild(void Function(GpsFixBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GpsFixBuilder toBuilder() => GpsFixBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GpsFix &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        validity == other.validity &&
        type == other.type &&
        utcYear == other.utcYear &&
        utcMonth == other.utcMonth &&
        utcDay == other.utcDay &&
        (utcTime == other.utcTime || utcTime - other.utcTime <= 1E-7) &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (height == other.height || height - other.height <= 1E-7) &&
        satellites == other.satellites &&
        (cog == other.cog || cog - other.cog <= 1E-7) &&
        (sog == other.sog || sog - other.sog <= 1E-7) &&
        (hdop == other.hdop || hdop - other.hdop <= 1E-7) &&
        (vdop == other.vdop || vdop - other.vdop <= 1E-7) &&
        (hacc == other.hacc || hacc - other.hacc <= 1E-7) &&
        (vacc == other.vacc || vacc - other.vacc <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc($jc(0, timestamp?.hashCode ?? null.hashCode), src.hashCode),
                                                                                srcEnt.hashCode),
                                                                            dst.hashCode),
                                                                        dstEnt.hashCode),
                                                                    validity.hashCode),
                                                                type.hashCode),
                                                            utcYear.hashCode),
                                                        utcMonth.hashCode),
                                                    utcDay.hashCode),
                                                utcTime.hashCode),
                                            lat.hashCode),
                                        lon.hashCode),
                                    height.hashCode),
                                satellites.hashCode),
                            cog.hashCode),
                        sog.hashCode),
                    hdop.hashCode),
                vdop.hashCode),
            hacc.hashCode),
        vacc.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GpsFix')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add(
              'validity', '$validity (Bitfield) [${validity.toPrettyString()}]')
          ..add('type', '$type (Enumerated) [${type.toPrettyString()}]')
          ..add('utcYear', '$utcYear')
          ..add('utcMonth', '$utcMonth')
          ..add('utcDay', '$utcDay')
          ..add('utcTime', '$utcTime (s)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('height', '$height (m)')
          ..add('satellites', '$satellites')
          ..add('cog', '$cog (rad) [${cog * 180.0 / math.pi} (deg)]')
          ..add('sog', '$sog (m/s)')
          ..add('hdop', '$hdop')
          ..add('vdop', '$vdop')
          ..add('hacc', '$hacc (m)')
          ..add('vacc', '$vacc (m)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'GpsFix',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'validity': validity.value,
        'type': type.value,
        'utc_year': utcYear,
        'utc_month': utcMonth,
        'utc_day': utcDay,
        'utc_time': utcTime,
        'lat': lat,
        'lon': lon,
        'height': height,
        'satellites': satellites,
        'cog': cog,
        'sog': sog,
        'hdop': hdop,
        'vdop': vdop,
        'hacc': hacc,
        'vacc': vacc,
      };
}

/// GPS Fix builder class
///
class GpsFixBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<GpsFix, GpsFixBuilder> {
  _$GpsFix? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  GpsFixBitfieldValidity _validity = GpsFixBitfieldValidity(0);
  GpsFixBitfieldValidity get validity => _$this._validity;
  set validity(GpsFixBitfieldValidity validity) => _$this._validity = validity;

  GpsFixEnumType _type = GpsFixEnumType(0);
  GpsFixEnumType get type => _$this._type;
  set type(GpsFixEnumType type) => _$this._type = type;

  int _utcYear = 0;
  int get utcYear => _$this._utcYear;
  set utcYear(int utcYear) => _$this._utcYear = utcYear;

  int _utcMonth = 0;
  int get utcMonth => _$this._utcMonth;
  set utcMonth(int utcMonth) => _$this._utcMonth = utcMonth;

  int _utcDay = 0;
  int get utcDay => _$this._utcDay;
  set utcDay(int utcDay) => _$this._utcDay = utcDay;

  double _utcTime = 0;
  double get utcTime => _$this._utcTime;
  set utcTime(double utcTime) => _$this._utcTime = utcTime;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _height = 0;
  double get height => _$this._height;
  set height(double height) => _$this._height = height;

  int _satellites = 0;
  int get satellites => _$this._satellites;
  set satellites(int satellites) => _$this._satellites = satellites;

  double _cog = 0;
  double get cog => _$this._cog;
  set cog(double cog) => _$this._cog = cog;

  double _sog = 0;
  double get sog => _$this._sog;
  set sog(double sog) => _$this._sog = sog;

  double _hdop = 0;
  double get hdop => _$this._hdop;
  set hdop(double hdop) => _$this._hdop = hdop;

  double _vdop = 0;
  double get vdop => _$this._vdop;
  set vdop(double vdop) => _$this._vdop = vdop;

  double _hacc = 0;
  double get hacc => _$this._hacc;
  set hacc(double hacc) => _$this._hacc = hacc;

  double _vacc = 0;
  double get vacc => _$this._vacc;
  set vacc(double vacc) => _$this._vacc = vacc;

  GpsFixBuilder();

  GpsFixBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  GpsFixBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$GpsFix.fromJson(json);
    replace(v);
  }

  @override
  GpsFixBuilder fromJson(core.Map<String, dynamic> json) =>
      GpsFixBuilder.fromJson(json);

  @override
  GpsFixBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      GpsFixBuilder()..copyFromHeader(headerFrom);

  GpsFixBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _validity = _$v!.validity;
      _type = _$v!.type;
      _utcYear = _$v!.utcYear;
      _utcMonth = _$v!.utcMonth;
      _utcDay = _$v!.utcDay;
      _utcTime = _$v!.utcTime;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _height = _$v!.height;
      _satellites = _$v!.satellites;
      _cog = _$v!.cog;
      _sog = _$v!.sog;
      _hdop = _$v!.hdop;
      _vdop = _$v!.vdop;
      _hacc = _$v!.hacc;
      _vacc = _$v!.vacc;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GpsFix other) {
    _$v = other as _$GpsFix;
  }

  @override
  void update(void Function(GpsFixBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GpsFix build() {
    final result = _$v ??
        _$GpsFix._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            validity: validity,
            type: type,
            utcYear: utcYear,
            utcMonth: utcMonth,
            utcDay: utcDay,
            utcTime: utcTime,
            lat: lat,
            lon: lon,
            height: height,
            satellites: satellites,
            cog: cog,
            sog: sog,
            hdop: hdop,
            vdop: vdop,
            hacc: hacc,
            vacc: vacc);
    replace(result);
    return result;
  }
}

/// Euler Angles immutable class
///
class _$EulerAngles extends EulerAngles {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double time;
  @override
  final double phi;
  @override
  final double theta;
  @override
  final double psi;
  @override
  final double psiMagnetic;

  factory _$EulerAngles([void Function(EulerAnglesBuilder b)? updates]) =>
      (EulerAnglesBuilder()..update(updates)).build() as _$EulerAngles;

  factory _$EulerAngles.fromJson(core.Map<String, dynamic> json) {
    var val = EulerAnglesBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.time = json.containsKey('time') ? json['time'] as double : 0;
    val.phi = json.containsKey('phi') ? json['phi'] as double : 0;
    val.theta = json.containsKey('theta') ? json['theta'] as double : 0;
    val.psi = json.containsKey('psi') ? json['psi'] as double : 0;
    val.psiMagnetic =
        json.containsKey('psi_magnetic') ? json['psi_magnetic'] as double : 0;

    return val.build() as _$EulerAngles;
  }

  _$EulerAngles._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.time,
      required this.phi,
      required this.theta,
      required this.psi,
      required this.psiMagnetic})
      : super._();

  @override
  EulerAngles rebuild(void Function(EulerAnglesBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  EulerAnglesBuilder toBuilder() => EulerAnglesBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is EulerAngles &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (time == other.time || time - other.time <= 1E-7) &&
        (phi == other.phi || phi - other.phi <= 1E-7) &&
        (theta == other.theta || theta - other.theta <= 1E-7) &&
        (psi == other.psi || psi - other.psi <= 1E-7) &&
        (psiMagnetic == other.psiMagnetic ||
            psiMagnetic - other.psiMagnetic <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            0,
                                            timestamp?.hashCode ??
                                                null.hashCode),
                                        src.hashCode),
                                    srcEnt.hashCode),
                                dst.hashCode),
                            dstEnt.hashCode),
                        time.hashCode),
                    phi.hashCode),
                theta.hashCode),
            psi.hashCode),
        psiMagnetic.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('EulerAngles')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('time', '$time (s)')
          ..add('phi', '$phi (rad) [${phi * 180.0 / math.pi} (deg)]')
          ..add('theta', '$theta (rad) [${theta * 180.0 / math.pi} (deg)]')
          ..add('psi', '$psi (rad) [${psi * 180.0 / math.pi} (deg)]')
          ..add('psiMagnetic',
              '$psiMagnetic (rad) [${psiMagnetic * 180.0 / math.pi} (deg)]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'EulerAngles',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'time': time,
        'phi': phi,
        'theta': theta,
        'psi': psi,
        'psi_magnetic': psiMagnetic,
      };
}

/// Euler Angles builder class
///
class EulerAnglesBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<EulerAngles, EulerAnglesBuilder> {
  _$EulerAngles? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _time = 0;
  double get time => _$this._time;
  set time(double time) => _$this._time = time;

  double _phi = 0;
  double get phi => _$this._phi;
  set phi(double phi) => _$this._phi = phi;

  double _theta = 0;
  double get theta => _$this._theta;
  set theta(double theta) => _$this._theta = theta;

  double _psi = 0;
  double get psi => _$this._psi;
  set psi(double psi) => _$this._psi = psi;

  double _psiMagnetic = 0;
  double get psiMagnetic => _$this._psiMagnetic;
  set psiMagnetic(double psiMagnetic) => _$this._psiMagnetic = psiMagnetic;

  EulerAnglesBuilder();

  EulerAnglesBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  EulerAnglesBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$EulerAngles.fromJson(json);
    replace(v);
  }

  @override
  EulerAnglesBuilder fromJson(core.Map<String, dynamic> json) =>
      EulerAnglesBuilder.fromJson(json);

  @override
  EulerAnglesBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      EulerAnglesBuilder()..copyFromHeader(headerFrom);

  EulerAnglesBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _time = _$v!.time;
      _phi = _$v!.phi;
      _theta = _$v!.theta;
      _psi = _$v!.psi;
      _psiMagnetic = _$v!.psiMagnetic;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(EulerAngles other) {
    _$v = other as _$EulerAngles;
  }

  @override
  void update(void Function(EulerAnglesBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  EulerAngles build() {
    final result = _$v ??
        _$EulerAngles._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            time: time,
            phi: phi,
            theta: theta,
            psi: psi,
            psiMagnetic: psiMagnetic);
    replace(result);
    return result;
  }
}

/// Euler Angles Delta immutable class
///
class _$EulerAnglesDelta extends EulerAnglesDelta {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double time;
  @override
  final double x;
  @override
  final double y;
  @override
  final double z;
  @override
  final double timestep;

  factory _$EulerAnglesDelta(
          [void Function(EulerAnglesDeltaBuilder b)? updates]) =>
      (EulerAnglesDeltaBuilder()..update(updates)).build()
          as _$EulerAnglesDelta;

  factory _$EulerAnglesDelta.fromJson(core.Map<String, dynamic> json) {
    var val = EulerAnglesDeltaBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.time = json.containsKey('time') ? json['time'] as double : 0;
    val.x = json.containsKey('x') ? json['x'] as double : 0;
    val.y = json.containsKey('y') ? json['y'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.timestep =
        json.containsKey('timestep') ? json['timestep'] as double : 0;

    return val.build() as _$EulerAnglesDelta;
  }

  _$EulerAnglesDelta._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.time,
      required this.x,
      required this.y,
      required this.z,
      required this.timestep})
      : super._();

  @override
  EulerAnglesDelta rebuild(void Function(EulerAnglesDeltaBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  EulerAnglesDeltaBuilder toBuilder() =>
      EulerAnglesDeltaBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is EulerAnglesDelta &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (time == other.time || time - other.time <= 1E-7) &&
        (x == other.x || x - other.x <= 1E-7) &&
        (y == other.y || y - other.y <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        (timestep == other.timestep || timestep - other.timestep <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            0,
                                            timestamp?.hashCode ??
                                                null.hashCode),
                                        src.hashCode),
                                    srcEnt.hashCode),
                                dst.hashCode),
                            dstEnt.hashCode),
                        time.hashCode),
                    x.hashCode),
                y.hashCode),
            z.hashCode),
        timestep.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('EulerAnglesDelta')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('time', '$time (s)')
          ..add('x', '$x (rad) [${x * 180.0 / math.pi} (deg)]')
          ..add('y', '$y (rad) [${y * 180.0 / math.pi} (deg)]')
          ..add('z', '$z (rad) [${z * 180.0 / math.pi} (deg)]')
          ..add('timestep', '$timestep (s)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'EulerAnglesDelta',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'time': time,
        'x': x,
        'y': y,
        'z': z,
        'timestep': timestep,
      };
}

/// Euler Angles Delta builder class
///
class EulerAnglesDeltaBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<EulerAnglesDelta, EulerAnglesDeltaBuilder> {
  _$EulerAnglesDelta? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _time = 0;
  double get time => _$this._time;
  set time(double time) => _$this._time = time;

  double _x = 0;
  double get x => _$this._x;
  set x(double x) => _$this._x = x;

  double _y = 0;
  double get y => _$this._y;
  set y(double y) => _$this._y = y;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  double _timestep = 0;
  double get timestep => _$this._timestep;
  set timestep(double timestep) => _$this._timestep = timestep;

  EulerAnglesDeltaBuilder();

  EulerAnglesDeltaBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  EulerAnglesDeltaBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$EulerAnglesDelta.fromJson(json);
    replace(v);
  }

  @override
  EulerAnglesDeltaBuilder fromJson(core.Map<String, dynamic> json) =>
      EulerAnglesDeltaBuilder.fromJson(json);

  @override
  EulerAnglesDeltaBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      EulerAnglesDeltaBuilder()..copyFromHeader(headerFrom);

  EulerAnglesDeltaBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _time = _$v!.time;
      _x = _$v!.x;
      _y = _$v!.y;
      _z = _$v!.z;
      _timestep = _$v!.timestep;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(EulerAnglesDelta other) {
    _$v = other as _$EulerAnglesDelta;
  }

  @override
  void update(void Function(EulerAnglesDeltaBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  EulerAnglesDelta build() {
    final result = _$v ??
        _$EulerAnglesDelta._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            time: time,
            x: x,
            y: y,
            z: z,
            timestep: timestep);
    replace(result);
    return result;
  }
}

/// Angular Velocity immutable class
///
class _$AngularVelocity extends AngularVelocity {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double time;
  @override
  final double x;
  @override
  final double y;
  @override
  final double z;

  factory _$AngularVelocity(
          [void Function(AngularVelocityBuilder b)? updates]) =>
      (AngularVelocityBuilder()..update(updates)).build() as _$AngularVelocity;

  factory _$AngularVelocity.fromJson(core.Map<String, dynamic> json) {
    var val = AngularVelocityBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.time = json.containsKey('time') ? json['time'] as double : 0;
    val.x = json.containsKey('x') ? json['x'] as double : 0;
    val.y = json.containsKey('y') ? json['y'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;

    return val.build() as _$AngularVelocity;
  }

  _$AngularVelocity._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.time,
      required this.x,
      required this.y,
      required this.z})
      : super._();

  @override
  AngularVelocity rebuild(void Function(AngularVelocityBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  AngularVelocityBuilder toBuilder() => AngularVelocityBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is AngularVelocity &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (time == other.time || time - other.time <= 1E-7) &&
        (x == other.x || x - other.x <= 1E-7) &&
        (y == other.y || y - other.y <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    time.hashCode),
                x.hashCode),
            y.hashCode),
        z.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('AngularVelocity')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('time', '$time (s)')
          ..add('x', '$x (rad/s) [${x * 180.0 / math.pi} (deg/s)]')
          ..add('y', '$y (rad/s) [${y * 180.0 / math.pi} (deg/s)]')
          ..add('z', '$z (rad/s) [${z * 180.0 / math.pi} (deg/s)]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'AngularVelocity',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'time': time,
        'x': x,
        'y': y,
        'z': z,
      };
}

/// Angular Velocity builder class
///
class AngularVelocityBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<AngularVelocity, AngularVelocityBuilder> {
  _$AngularVelocity? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _time = 0;
  double get time => _$this._time;
  set time(double time) => _$this._time = time;

  double _x = 0;
  double get x => _$this._x;
  set x(double x) => _$this._x = x;

  double _y = 0;
  double get y => _$this._y;
  set y(double y) => _$this._y = y;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  AngularVelocityBuilder();

  AngularVelocityBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  AngularVelocityBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$AngularVelocity.fromJson(json);
    replace(v);
  }

  @override
  AngularVelocityBuilder fromJson(core.Map<String, dynamic> json) =>
      AngularVelocityBuilder.fromJson(json);

  @override
  AngularVelocityBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      AngularVelocityBuilder()..copyFromHeader(headerFrom);

  AngularVelocityBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _time = _$v!.time;
      _x = _$v!.x;
      _y = _$v!.y;
      _z = _$v!.z;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(AngularVelocity other) {
    _$v = other as _$AngularVelocity;
  }

  @override
  void update(void Function(AngularVelocityBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  AngularVelocity build() {
    final result = _$v ??
        _$AngularVelocity._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            time: time,
            x: x,
            y: y,
            z: z);
    replace(result);
    return result;
  }
}

/// Acceleration immutable class
///
class _$Acceleration extends Acceleration {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double time;
  @override
  final double x;
  @override
  final double y;
  @override
  final double z;

  factory _$Acceleration([void Function(AccelerationBuilder b)? updates]) =>
      (AccelerationBuilder()..update(updates)).build() as _$Acceleration;

  factory _$Acceleration.fromJson(core.Map<String, dynamic> json) {
    var val = AccelerationBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.time = json.containsKey('time') ? json['time'] as double : 0;
    val.x = json.containsKey('x') ? json['x'] as double : 0;
    val.y = json.containsKey('y') ? json['y'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;

    return val.build() as _$Acceleration;
  }

  _$Acceleration._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.time,
      required this.x,
      required this.y,
      required this.z})
      : super._();

  @override
  Acceleration rebuild(void Function(AccelerationBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  AccelerationBuilder toBuilder() => AccelerationBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Acceleration &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (time == other.time || time - other.time <= 1E-7) &&
        (x == other.x || x - other.x <= 1E-7) &&
        (y == other.y || y - other.y <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    time.hashCode),
                x.hashCode),
            y.hashCode),
        z.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Acceleration')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('time', '$time (s)')
          ..add('x', '$x (m/s/s)')
          ..add('y', '$y (m/s/s)')
          ..add('z', '$z (m/s/s)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Acceleration',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'time': time,
        'x': x,
        'y': y,
        'z': z,
      };
}

/// Acceleration builder class
///
class AccelerationBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Acceleration, AccelerationBuilder> {
  _$Acceleration? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _time = 0;
  double get time => _$this._time;
  set time(double time) => _$this._time = time;

  double _x = 0;
  double get x => _$this._x;
  set x(double x) => _$this._x = x;

  double _y = 0;
  double get y => _$this._y;
  set y(double y) => _$this._y = y;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  AccelerationBuilder();

  AccelerationBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  AccelerationBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Acceleration.fromJson(json);
    replace(v);
  }

  @override
  AccelerationBuilder fromJson(core.Map<String, dynamic> json) =>
      AccelerationBuilder.fromJson(json);

  @override
  AccelerationBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      AccelerationBuilder()..copyFromHeader(headerFrom);

  AccelerationBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _time = _$v!.time;
      _x = _$v!.x;
      _y = _$v!.y;
      _z = _$v!.z;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Acceleration other) {
    _$v = other as _$Acceleration;
  }

  @override
  void update(void Function(AccelerationBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Acceleration build() {
    final result = _$v ??
        _$Acceleration._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            time: time,
            x: x,
            y: y,
            z: z);
    replace(result);
    return result;
  }
}

/// Magnetic Field immutable class
///
class _$MagneticField extends MagneticField {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double time;
  @override
  final double x;
  @override
  final double y;
  @override
  final double z;

  factory _$MagneticField([void Function(MagneticFieldBuilder b)? updates]) =>
      (MagneticFieldBuilder()..update(updates)).build() as _$MagneticField;

  factory _$MagneticField.fromJson(core.Map<String, dynamic> json) {
    var val = MagneticFieldBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.time = json.containsKey('time') ? json['time'] as double : 0;
    val.x = json.containsKey('x') ? json['x'] as double : 0;
    val.y = json.containsKey('y') ? json['y'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;

    return val.build() as _$MagneticField;
  }

  _$MagneticField._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.time,
      required this.x,
      required this.y,
      required this.z})
      : super._();

  @override
  MagneticField rebuild(void Function(MagneticFieldBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  MagneticFieldBuilder toBuilder() => MagneticFieldBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is MagneticField &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (time == other.time || time - other.time <= 1E-7) &&
        (x == other.x || x - other.x <= 1E-7) &&
        (y == other.y || y - other.y <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    time.hashCode),
                x.hashCode),
            y.hashCode),
        z.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('MagneticField')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('time', '$time (s)')
          ..add('x', '$x (G)')
          ..add('y', '$y (G)')
          ..add('z', '$z (G)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'MagneticField',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'time': time,
        'x': x,
        'y': y,
        'z': z,
      };
}

/// Magnetic Field builder class
///
class MagneticFieldBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<MagneticField, MagneticFieldBuilder> {
  _$MagneticField? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _time = 0;
  double get time => _$this._time;
  set time(double time) => _$this._time = time;

  double _x = 0;
  double get x => _$this._x;
  set x(double x) => _$this._x = x;

  double _y = 0;
  double get y => _$this._y;
  set y(double y) => _$this._y = y;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  MagneticFieldBuilder();

  MagneticFieldBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  MagneticFieldBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$MagneticField.fromJson(json);
    replace(v);
  }

  @override
  MagneticFieldBuilder fromJson(core.Map<String, dynamic> json) =>
      MagneticFieldBuilder.fromJson(json);

  @override
  MagneticFieldBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      MagneticFieldBuilder()..copyFromHeader(headerFrom);

  MagneticFieldBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _time = _$v!.time;
      _x = _$v!.x;
      _y = _$v!.y;
      _z = _$v!.z;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(MagneticField other) {
    _$v = other as _$MagneticField;
  }

  @override
  void update(void Function(MagneticFieldBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  MagneticField build() {
    final result = _$v ??
        _$MagneticField._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            time: time,
            x: x,
            y: y,
            z: z);
    replace(result);
    return result;
  }
}

/// Ground Velocity immutable class
///
class _$GroundVelocity extends GroundVelocity {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final GroundVelocityBitfieldValidity validity;
  @override
  final double x;
  @override
  final double y;
  @override
  final double z;

  factory _$GroundVelocity([void Function(GroundVelocityBuilder b)? updates]) =>
      (GroundVelocityBuilder()..update(updates)).build() as _$GroundVelocity;

  factory _$GroundVelocity.fromJson(core.Map<String, dynamic> json) {
    var val = GroundVelocityBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.validity = json.containsKey('validity') && json['validity'] != null
        ? GroundVelocityBitfieldValidity(json['validity'] as int)
        : GroundVelocityBitfieldValidity(0);
    val.x = json.containsKey('x') ? json['x'] as double : 0;
    val.y = json.containsKey('y') ? json['y'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;

    return val.build() as _$GroundVelocity;
  }

  _$GroundVelocity._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.validity,
      required this.x,
      required this.y,
      required this.z})
      : super._();

  @override
  GroundVelocity rebuild(void Function(GroundVelocityBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GroundVelocityBuilder toBuilder() => GroundVelocityBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GroundVelocity &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        validity == other.validity &&
        (x == other.x || x - other.x <= 1E-7) &&
        (y == other.y || y - other.y <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    validity.hashCode),
                x.hashCode),
            y.hashCode),
        z.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GroundVelocity')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add(
              'validity', '$validity (Bitfield) [${validity.toPrettyString()}]')
          ..add('x', '$x (m/s)')
          ..add('y', '$y (m/s)')
          ..add('z', '$z (m/s)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'GroundVelocity',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'validity': validity.value,
        'x': x,
        'y': y,
        'z': z,
      };
}

/// Ground Velocity builder class
///
class GroundVelocityBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<GroundVelocity, GroundVelocityBuilder> {
  _$GroundVelocity? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  GroundVelocityBitfieldValidity _validity = GroundVelocityBitfieldValidity(0);
  GroundVelocityBitfieldValidity get validity => _$this._validity;
  set validity(GroundVelocityBitfieldValidity validity) =>
      _$this._validity = validity;

  double _x = 0;
  double get x => _$this._x;
  set x(double x) => _$this._x = x;

  double _y = 0;
  double get y => _$this._y;
  set y(double y) => _$this._y = y;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  GroundVelocityBuilder();

  GroundVelocityBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  GroundVelocityBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$GroundVelocity.fromJson(json);
    replace(v);
  }

  @override
  GroundVelocityBuilder fromJson(core.Map<String, dynamic> json) =>
      GroundVelocityBuilder.fromJson(json);

  @override
  GroundVelocityBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      GroundVelocityBuilder()..copyFromHeader(headerFrom);

  GroundVelocityBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _validity = _$v!.validity;
      _x = _$v!.x;
      _y = _$v!.y;
      _z = _$v!.z;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GroundVelocity other) {
    _$v = other as _$GroundVelocity;
  }

  @override
  void update(void Function(GroundVelocityBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GroundVelocity build() {
    final result = _$v ??
        _$GroundVelocity._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            validity: validity,
            x: x,
            y: y,
            z: z);
    replace(result);
    return result;
  }
}

/// Water Velocity immutable class
///
class _$WaterVelocity extends WaterVelocity {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final WaterVelocityBitfieldValidity validity;
  @override
  final double x;
  @override
  final double y;
  @override
  final double z;

  factory _$WaterVelocity([void Function(WaterVelocityBuilder b)? updates]) =>
      (WaterVelocityBuilder()..update(updates)).build() as _$WaterVelocity;

  factory _$WaterVelocity.fromJson(core.Map<String, dynamic> json) {
    var val = WaterVelocityBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.validity = json.containsKey('validity') && json['validity'] != null
        ? WaterVelocityBitfieldValidity(json['validity'] as int)
        : WaterVelocityBitfieldValidity(0);
    val.x = json.containsKey('x') ? json['x'] as double : 0;
    val.y = json.containsKey('y') ? json['y'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;

    return val.build() as _$WaterVelocity;
  }

  _$WaterVelocity._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.validity,
      required this.x,
      required this.y,
      required this.z})
      : super._();

  @override
  WaterVelocity rebuild(void Function(WaterVelocityBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  WaterVelocityBuilder toBuilder() => WaterVelocityBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is WaterVelocity &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        validity == other.validity &&
        (x == other.x || x - other.x <= 1E-7) &&
        (y == other.y || y - other.y <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    validity.hashCode),
                x.hashCode),
            y.hashCode),
        z.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('WaterVelocity')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add(
              'validity', '$validity (Bitfield) [${validity.toPrettyString()}]')
          ..add('x', '$x (m/s)')
          ..add('y', '$y (m/s)')
          ..add('z', '$z (m/s)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'WaterVelocity',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'validity': validity.value,
        'x': x,
        'y': y,
        'z': z,
      };
}

/// Water Velocity builder class
///
class WaterVelocityBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<WaterVelocity, WaterVelocityBuilder> {
  _$WaterVelocity? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  WaterVelocityBitfieldValidity _validity = WaterVelocityBitfieldValidity(0);
  WaterVelocityBitfieldValidity get validity => _$this._validity;
  set validity(WaterVelocityBitfieldValidity validity) =>
      _$this._validity = validity;

  double _x = 0;
  double get x => _$this._x;
  set x(double x) => _$this._x = x;

  double _y = 0;
  double get y => _$this._y;
  set y(double y) => _$this._y = y;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  WaterVelocityBuilder();

  WaterVelocityBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  WaterVelocityBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$WaterVelocity.fromJson(json);
    replace(v);
  }

  @override
  WaterVelocityBuilder fromJson(core.Map<String, dynamic> json) =>
      WaterVelocityBuilder.fromJson(json);

  @override
  WaterVelocityBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      WaterVelocityBuilder()..copyFromHeader(headerFrom);

  WaterVelocityBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _validity = _$v!.validity;
      _x = _$v!.x;
      _y = _$v!.y;
      _z = _$v!.z;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(WaterVelocity other) {
    _$v = other as _$WaterVelocity;
  }

  @override
  void update(void Function(WaterVelocityBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  WaterVelocity build() {
    final result = _$v ??
        _$WaterVelocity._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            validity: validity,
            x: x,
            y: y,
            z: z);
    replace(result);
    return result;
  }
}

/// Velocity Delta immutable class
///
class _$VelocityDelta extends VelocityDelta {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double time;
  @override
  final double x;
  @override
  final double y;
  @override
  final double z;

  factory _$VelocityDelta([void Function(VelocityDeltaBuilder b)? updates]) =>
      (VelocityDeltaBuilder()..update(updates)).build() as _$VelocityDelta;

  factory _$VelocityDelta.fromJson(core.Map<String, dynamic> json) {
    var val = VelocityDeltaBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.time = json.containsKey('time') ? json['time'] as double : 0;
    val.x = json.containsKey('x') ? json['x'] as double : 0;
    val.y = json.containsKey('y') ? json['y'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;

    return val.build() as _$VelocityDelta;
  }

  _$VelocityDelta._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.time,
      required this.x,
      required this.y,
      required this.z})
      : super._();

  @override
  VelocityDelta rebuild(void Function(VelocityDeltaBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  VelocityDeltaBuilder toBuilder() => VelocityDeltaBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is VelocityDelta &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (time == other.time || time - other.time <= 1E-7) &&
        (x == other.x || x - other.x <= 1E-7) &&
        (y == other.y || y - other.y <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    time.hashCode),
                x.hashCode),
            y.hashCode),
        z.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('VelocityDelta')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('time', '$time (s)')
          ..add('x', '$x (m/s)')
          ..add('y', '$y (m/s)')
          ..add('z', '$z (m/s)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'VelocityDelta',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'time': time,
        'x': x,
        'y': y,
        'z': z,
      };
}

/// Velocity Delta builder class
///
class VelocityDeltaBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<VelocityDelta, VelocityDeltaBuilder> {
  _$VelocityDelta? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _time = 0;
  double get time => _$this._time;
  set time(double time) => _$this._time = time;

  double _x = 0;
  double get x => _$this._x;
  set x(double x) => _$this._x = x;

  double _y = 0;
  double get y => _$this._y;
  set y(double y) => _$this._y = y;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  VelocityDeltaBuilder();

  VelocityDeltaBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  VelocityDeltaBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$VelocityDelta.fromJson(json);
    replace(v);
  }

  @override
  VelocityDeltaBuilder fromJson(core.Map<String, dynamic> json) =>
      VelocityDeltaBuilder.fromJson(json);

  @override
  VelocityDeltaBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      VelocityDeltaBuilder()..copyFromHeader(headerFrom);

  VelocityDeltaBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _time = _$v!.time;
      _x = _$v!.x;
      _y = _$v!.y;
      _z = _$v!.z;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(VelocityDelta other) {
    _$v = other as _$VelocityDelta;
  }

  @override
  void update(void Function(VelocityDeltaBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  VelocityDelta build() {
    final result = _$v ??
        _$VelocityDelta._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            time: time,
            x: x,
            y: y,
            z: z);
    replace(result);
    return result;
  }
}

/// Distance immutable class
///
class _$Distance extends Distance {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final DistanceEnumValidity validity;
  @override
  final List<DeviceState> location;
  @override
  final List<BeamConfig> beamConfig;
  @override
  final double value;

  factory _$Distance([void Function(DistanceBuilder b)? updates]) =>
      (DistanceBuilder()..update(updates)).build() as _$Distance;

  factory _$Distance.fromJson(core.Map<String, dynamic> json) {
    var val = DistanceBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.validity = json.containsKey('validity') && json['validity'] != null
        ? DistanceEnumValidity(json['validity'] as int)
        : DistanceEnumValidity(0);
    var location = <DeviceState>[];
    if (json.containsKey('location') && json['location'] != null) {
      var listJson = json['location'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as DeviceState?;
          if (m != null) location.add(m);
        }
      }
    }
    val.location = location;
    var beamConfig = <BeamConfig>[];
    if (json.containsKey('beam_config') && json['beam_config'] != null) {
      var listJson = json['beam_config'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as BeamConfig?;
          if (m != null) beamConfig.add(m);
        }
      }
    }
    val.beamConfig = beamConfig;
    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$Distance;
  }

  _$Distance._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.validity,
      required this.location,
      required this.beamConfig,
      required this.value})
      : super._();

  @override
  Distance rebuild(void Function(DistanceBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DistanceBuilder toBuilder() => DistanceBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Distance &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        validity == other.validity &&
        DeepCollectionEquality().equals(location, other.location) &&
        DeepCollectionEquality().equals(beamConfig, other.beamConfig) &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    validity.hashCode),
                location.hashCode),
            beamConfig.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Distance')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('validity',
              '$validity (Enumerated) [${validity.toPrettyString()}]')
          ..add('location', '$location')
          ..add('beamConfig', '$beamConfig')
          ..add('value', '$value (m)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Distance',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'validity': validity.value,
        'location': [
          ...location.map((m) => m.toJson(false)),
        ],
        'beam_config': [
          ...beamConfig.map((m) => m.toJson(false)),
        ],
        'value': value,
      };
}

/// Distance builder class
///
class DistanceBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Distance, DistanceBuilder> {
  _$Distance? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  DistanceEnumValidity _validity = DistanceEnumValidity(0);
  DistanceEnumValidity get validity => _$this._validity;
  set validity(DistanceEnumValidity validity) => _$this._validity = validity;

  List<DeviceState> _location = <DeviceState>[];
  List<DeviceState> get location => _$this._location;
  set location(List<DeviceState> location) => _$this._location = location;

  List<BeamConfig> _beamConfig = <BeamConfig>[];
  List<BeamConfig> get beamConfig => _$this._beamConfig;
  set beamConfig(List<BeamConfig> beamConfig) =>
      _$this._beamConfig = beamConfig;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  DistanceBuilder();

  DistanceBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DistanceBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Distance.fromJson(json);
    replace(v);
  }

  @override
  DistanceBuilder fromJson(core.Map<String, dynamic> json) =>
      DistanceBuilder.fromJson(json);

  @override
  DistanceBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      DistanceBuilder()..copyFromHeader(headerFrom);

  DistanceBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _validity = _$v!.validity;
      _location = _$v!.location;
      _beamConfig = _$v!.beamConfig;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Distance other) {
    _$v = other as _$Distance;
  }

  @override
  void update(void Function(DistanceBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Distance build() {
    final result = _$v ??
        _$Distance._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            validity: validity,
            location: location,
            beamConfig: beamConfig,
            value: value);
    replace(result);
    return result;
  }
}

/// Temperature immutable class
///
class _$Temperature extends Temperature {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$Temperature([void Function(TemperatureBuilder b)? updates]) =>
      (TemperatureBuilder()..update(updates)).build() as _$Temperature;

  factory _$Temperature.fromJson(core.Map<String, dynamic> json) {
    var val = TemperatureBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$Temperature;
  }

  _$Temperature._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  Temperature rebuild(void Function(TemperatureBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  TemperatureBuilder toBuilder() => TemperatureBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Temperature &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Temperature')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (°C)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Temperature',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Temperature builder class
///
class TemperatureBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Temperature, TemperatureBuilder> {
  _$Temperature? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  TemperatureBuilder();

  TemperatureBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  TemperatureBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Temperature.fromJson(json);
    replace(v);
  }

  @override
  TemperatureBuilder fromJson(core.Map<String, dynamic> json) =>
      TemperatureBuilder.fromJson(json);

  @override
  TemperatureBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      TemperatureBuilder()..copyFromHeader(headerFrom);

  TemperatureBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Temperature other) {
    _$v = other as _$Temperature;
  }

  @override
  void update(void Function(TemperatureBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Temperature build() {
    final result = _$v ??
        _$Temperature._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Pressure immutable class
///
class _$Pressure extends Pressure {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$Pressure([void Function(PressureBuilder b)? updates]) =>
      (PressureBuilder()..update(updates)).build() as _$Pressure;

  factory _$Pressure.fromJson(core.Map<String, dynamic> json) {
    var val = PressureBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$Pressure;
  }

  _$Pressure._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  Pressure rebuild(void Function(PressureBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  PressureBuilder toBuilder() => PressureBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Pressure &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Pressure')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (hPa)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Pressure',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Pressure builder class
///
class PressureBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Pressure, PressureBuilder> {
  _$Pressure? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  PressureBuilder();

  PressureBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  PressureBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Pressure.fromJson(json);
    replace(v);
  }

  @override
  PressureBuilder fromJson(core.Map<String, dynamic> json) =>
      PressureBuilder.fromJson(json);

  @override
  PressureBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      PressureBuilder()..copyFromHeader(headerFrom);

  PressureBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Pressure other) {
    _$v = other as _$Pressure;
  }

  @override
  void update(void Function(PressureBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Pressure build() {
    final result = _$v ??
        _$Pressure._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Depth immutable class
///
class _$Depth extends Depth {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$Depth([void Function(DepthBuilder b)? updates]) =>
      (DepthBuilder()..update(updates)).build() as _$Depth;

  factory _$Depth.fromJson(core.Map<String, dynamic> json) {
    var val = DepthBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$Depth;
  }

  _$Depth._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  Depth rebuild(void Function(DepthBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DepthBuilder toBuilder() => DepthBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Depth &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Depth')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (m)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Depth',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Depth builder class
///
class DepthBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Depth, DepthBuilder> {
  _$Depth? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  DepthBuilder();

  DepthBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DepthBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Depth.fromJson(json);
    replace(v);
  }

  @override
  DepthBuilder fromJson(core.Map<String, dynamic> json) =>
      DepthBuilder.fromJson(json);

  @override
  DepthBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      DepthBuilder()..copyFromHeader(headerFrom);

  DepthBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Depth other) {
    _$v = other as _$Depth;
  }

  @override
  void update(void Function(DepthBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Depth build() {
    final result = _$v ??
        _$Depth._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Depth Offset immutable class
///
class _$DepthOffset extends DepthOffset {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$DepthOffset([void Function(DepthOffsetBuilder b)? updates]) =>
      (DepthOffsetBuilder()..update(updates)).build() as _$DepthOffset;

  factory _$DepthOffset.fromJson(core.Map<String, dynamic> json) {
    var val = DepthOffsetBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$DepthOffset;
  }

  _$DepthOffset._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  DepthOffset rebuild(void Function(DepthOffsetBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DepthOffsetBuilder toBuilder() => DepthOffsetBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is DepthOffset &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('DepthOffset')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (m)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'DepthOffset',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Depth Offset builder class
///
class DepthOffsetBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<DepthOffset, DepthOffsetBuilder> {
  _$DepthOffset? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  DepthOffsetBuilder();

  DepthOffsetBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DepthOffsetBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$DepthOffset.fromJson(json);
    replace(v);
  }

  @override
  DepthOffsetBuilder fromJson(core.Map<String, dynamic> json) =>
      DepthOffsetBuilder.fromJson(json);

  @override
  DepthOffsetBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      DepthOffsetBuilder()..copyFromHeader(headerFrom);

  DepthOffsetBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(DepthOffset other) {
    _$v = other as _$DepthOffset;
  }

  @override
  void update(void Function(DepthOffsetBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  DepthOffset build() {
    final result = _$v ??
        _$DepthOffset._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Sound Speed immutable class
///
class _$SoundSpeed extends SoundSpeed {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$SoundSpeed([void Function(SoundSpeedBuilder b)? updates]) =>
      (SoundSpeedBuilder()..update(updates)).build() as _$SoundSpeed;

  factory _$SoundSpeed.fromJson(core.Map<String, dynamic> json) {
    var val = SoundSpeedBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$SoundSpeed;
  }

  _$SoundSpeed._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  SoundSpeed rebuild(void Function(SoundSpeedBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SoundSpeedBuilder toBuilder() => SoundSpeedBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is SoundSpeed &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('SoundSpeed')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (m/s)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'SoundSpeed',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Sound Speed builder class
///
class SoundSpeedBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<SoundSpeed, SoundSpeedBuilder> {
  _$SoundSpeed? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  SoundSpeedBuilder();

  SoundSpeedBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SoundSpeedBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$SoundSpeed.fromJson(json);
    replace(v);
  }

  @override
  SoundSpeedBuilder fromJson(core.Map<String, dynamic> json) =>
      SoundSpeedBuilder.fromJson(json);

  @override
  SoundSpeedBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SoundSpeedBuilder()..copyFromHeader(headerFrom);

  SoundSpeedBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(SoundSpeed other) {
    _$v = other as _$SoundSpeed;
  }

  @override
  void update(void Function(SoundSpeedBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  SoundSpeed build() {
    final result = _$v ??
        _$SoundSpeed._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Water Density immutable class
///
class _$WaterDensity extends WaterDensity {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$WaterDensity([void Function(WaterDensityBuilder b)? updates]) =>
      (WaterDensityBuilder()..update(updates)).build() as _$WaterDensity;

  factory _$WaterDensity.fromJson(core.Map<String, dynamic> json) {
    var val = WaterDensityBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$WaterDensity;
  }

  _$WaterDensity._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  WaterDensity rebuild(void Function(WaterDensityBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  WaterDensityBuilder toBuilder() => WaterDensityBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is WaterDensity &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('WaterDensity')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (kg/m/m/m)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'WaterDensity',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Water Density builder class
///
class WaterDensityBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<WaterDensity, WaterDensityBuilder> {
  _$WaterDensity? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  WaterDensityBuilder();

  WaterDensityBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  WaterDensityBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$WaterDensity.fromJson(json);
    replace(v);
  }

  @override
  WaterDensityBuilder fromJson(core.Map<String, dynamic> json) =>
      WaterDensityBuilder.fromJson(json);

  @override
  WaterDensityBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      WaterDensityBuilder()..copyFromHeader(headerFrom);

  WaterDensityBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(WaterDensity other) {
    _$v = other as _$WaterDensity;
  }

  @override
  void update(void Function(WaterDensityBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  WaterDensity build() {
    final result = _$v ??
        _$WaterDensity._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Conductivity immutable class
///
class _$Conductivity extends Conductivity {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$Conductivity([void Function(ConductivityBuilder b)? updates]) =>
      (ConductivityBuilder()..update(updates)).build() as _$Conductivity;

  factory _$Conductivity.fromJson(core.Map<String, dynamic> json) {
    var val = ConductivityBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$Conductivity;
  }

  _$Conductivity._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  Conductivity rebuild(void Function(ConductivityBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  ConductivityBuilder toBuilder() => ConductivityBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Conductivity &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Conductivity')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (S/m)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Conductivity',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Conductivity builder class
///
class ConductivityBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Conductivity, ConductivityBuilder> {
  _$Conductivity? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  ConductivityBuilder();

  ConductivityBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  ConductivityBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Conductivity.fromJson(json);
    replace(v);
  }

  @override
  ConductivityBuilder fromJson(core.Map<String, dynamic> json) =>
      ConductivityBuilder.fromJson(json);

  @override
  ConductivityBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      ConductivityBuilder()..copyFromHeader(headerFrom);

  ConductivityBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Conductivity other) {
    _$v = other as _$Conductivity;
  }

  @override
  void update(void Function(ConductivityBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Conductivity build() {
    final result = _$v ??
        _$Conductivity._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Salinity immutable class
///
class _$Salinity extends Salinity {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$Salinity([void Function(SalinityBuilder b)? updates]) =>
      (SalinityBuilder()..update(updates)).build() as _$Salinity;

  factory _$Salinity.fromJson(core.Map<String, dynamic> json) {
    var val = SalinityBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$Salinity;
  }

  _$Salinity._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  Salinity rebuild(void Function(SalinityBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SalinityBuilder toBuilder() => SalinityBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Salinity &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Salinity')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (PSU)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Salinity',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Salinity builder class
///
class SalinityBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Salinity, SalinityBuilder> {
  _$Salinity? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  SalinityBuilder();

  SalinityBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SalinityBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Salinity.fromJson(json);
    replace(v);
  }

  @override
  SalinityBuilder fromJson(core.Map<String, dynamic> json) =>
      SalinityBuilder.fromJson(json);

  @override
  SalinityBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SalinityBuilder()..copyFromHeader(headerFrom);

  SalinityBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Salinity other) {
    _$v = other as _$Salinity;
  }

  @override
  void update(void Function(SalinityBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Salinity build() {
    final result = _$v ??
        _$Salinity._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Wind Speed immutable class
///
class _$WindSpeed extends WindSpeed {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double direction;
  @override
  final double speed;
  @override
  final double turbulence;

  factory _$WindSpeed([void Function(WindSpeedBuilder b)? updates]) =>
      (WindSpeedBuilder()..update(updates)).build() as _$WindSpeed;

  factory _$WindSpeed.fromJson(core.Map<String, dynamic> json) {
    var val = WindSpeedBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.direction =
        json.containsKey('direction') ? json['direction'] as double : 0;
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.turbulence =
        json.containsKey('turbulence') ? json['turbulence'] as double : 0;

    return val.build() as _$WindSpeed;
  }

  _$WindSpeed._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.direction,
      required this.speed,
      required this.turbulence})
      : super._();

  @override
  WindSpeed rebuild(void Function(WindSpeedBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  WindSpeedBuilder toBuilder() => WindSpeedBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is WindSpeed &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (direction == other.direction || direction - other.direction <= 1E-7) &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        (turbulence == other.turbulence ||
            turbulence - other.turbulence <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                direction.hashCode),
            speed.hashCode),
        turbulence.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('WindSpeed')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('direction',
              '$direction (rad) [${direction * 180.0 / math.pi} (deg)]')
          ..add('speed', '$speed (m/s)')
          ..add('turbulence', '$turbulence (m/s)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'WindSpeed',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'direction': direction,
        'speed': speed,
        'turbulence': turbulence,
      };
}

/// Wind Speed builder class
///
class WindSpeedBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<WindSpeed, WindSpeedBuilder> {
  _$WindSpeed? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _direction = 0;
  double get direction => _$this._direction;
  set direction(double direction) => _$this._direction = direction;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  double _turbulence = 0;
  double get turbulence => _$this._turbulence;
  set turbulence(double turbulence) => _$this._turbulence = turbulence;

  WindSpeedBuilder();

  WindSpeedBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  WindSpeedBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$WindSpeed.fromJson(json);
    replace(v);
  }

  @override
  WindSpeedBuilder fromJson(core.Map<String, dynamic> json) =>
      WindSpeedBuilder.fromJson(json);

  @override
  WindSpeedBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      WindSpeedBuilder()..copyFromHeader(headerFrom);

  WindSpeedBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _direction = _$v!.direction;
      _speed = _$v!.speed;
      _turbulence = _$v!.turbulence;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(WindSpeed other) {
    _$v = other as _$WindSpeed;
  }

  @override
  void update(void Function(WindSpeedBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  WindSpeed build() {
    final result = _$v ??
        _$WindSpeed._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            direction: direction,
            speed: speed,
            turbulence: turbulence);
    replace(result);
    return result;
  }
}

/// Relative Humidity immutable class
///
class _$RelativeHumidity extends RelativeHumidity {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$RelativeHumidity(
          [void Function(RelativeHumidityBuilder b)? updates]) =>
      (RelativeHumidityBuilder()..update(updates)).build()
          as _$RelativeHumidity;

  factory _$RelativeHumidity.fromJson(core.Map<String, dynamic> json) {
    var val = RelativeHumidityBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$RelativeHumidity;
  }

  _$RelativeHumidity._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  RelativeHumidity rebuild(void Function(RelativeHumidityBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  RelativeHumidityBuilder toBuilder() =>
      RelativeHumidityBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is RelativeHumidity &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('RelativeHumidity')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'RelativeHumidity',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Relative Humidity builder class
///
class RelativeHumidityBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<RelativeHumidity, RelativeHumidityBuilder> {
  _$RelativeHumidity? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  RelativeHumidityBuilder();

  RelativeHumidityBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  RelativeHumidityBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$RelativeHumidity.fromJson(json);
    replace(v);
  }

  @override
  RelativeHumidityBuilder fromJson(core.Map<String, dynamic> json) =>
      RelativeHumidityBuilder.fromJson(json);

  @override
  RelativeHumidityBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      RelativeHumidityBuilder()..copyFromHeader(headerFrom);

  RelativeHumidityBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(RelativeHumidity other) {
    _$v = other as _$RelativeHumidity;
  }

  @override
  void update(void Function(RelativeHumidityBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  RelativeHumidity build() {
    final result = _$v ??
        _$RelativeHumidity._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Device Data (Text) immutable class
///
class _$DevDataText extends DevDataText {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String value;

  factory _$DevDataText([void Function(DevDataTextBuilder b)? updates]) =>
      (DevDataTextBuilder()..update(updates)).build() as _$DevDataText;

  factory _$DevDataText.fromJson(core.Map<String, dynamic> json) {
    var val = DevDataTextBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') && json['value'] != null
        ? json['value'] as String
        : '';

    return val.build() as _$DevDataText;
  }

  _$DevDataText._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  DevDataText rebuild(void Function(DevDataTextBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DevDataTextBuilder toBuilder() => DevDataTextBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is DevDataText &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        value == other.value;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('DevDataText')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', value))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'DevDataText',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Device Data (Text) builder class
///
class DevDataTextBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<DevDataText, DevDataTextBuilder> {
  _$DevDataText? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _value = '';
  String get value => _$this._value;
  set value(String value) => _$this._value = value;

  DevDataTextBuilder();

  DevDataTextBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DevDataTextBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$DevDataText.fromJson(json);
    replace(v);
  }

  @override
  DevDataTextBuilder fromJson(core.Map<String, dynamic> json) =>
      DevDataTextBuilder.fromJson(json);

  @override
  DevDataTextBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      DevDataTextBuilder()..copyFromHeader(headerFrom);

  DevDataTextBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(DevDataText other) {
    _$v = other as _$DevDataText;
  }

  @override
  void update(void Function(DevDataTextBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  DevDataText build() {
    final result = _$v ??
        _$DevDataText._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Device Data (Binary) immutable class
///
class _$DevDataBinary extends DevDataBinary {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final List<int> value;

  factory _$DevDataBinary([void Function(DevDataBinaryBuilder b)? updates]) =>
      (DevDataBinaryBuilder()..update(updates)).build() as _$DevDataBinary;

  factory _$DevDataBinary.fromJson(core.Map<String, dynamic> json) {
    var val = DevDataBinaryBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value')
        ? base64.decode(json['value'] as String)
        : <int>[];

    return val.build() as _$DevDataBinary;
  }

  _$DevDataBinary._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  DevDataBinary rebuild(void Function(DevDataBinaryBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DevDataBinaryBuilder toBuilder() => DevDataBinaryBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is DevDataBinary &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        ListEquality().equals(value, other.value);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('DevDataBinary')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'DevDataBinary',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': base64.encode(value),
      };
}

/// Device Data (Binary) builder class
///
class DevDataBinaryBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<DevDataBinary, DevDataBinaryBuilder> {
  _$DevDataBinary? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  List<int> _value = <int>[];
  List<int> get value => _$this._value;
  set value(List<int> value) => _$this._value = value;

  DevDataBinaryBuilder();

  DevDataBinaryBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DevDataBinaryBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$DevDataBinary.fromJson(json);
    replace(v);
  }

  @override
  DevDataBinaryBuilder fromJson(core.Map<String, dynamic> json) =>
      DevDataBinaryBuilder.fromJson(json);

  @override
  DevDataBinaryBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      DevDataBinaryBuilder()..copyFromHeader(headerFrom);

  DevDataBinaryBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(DevDataBinary other) {
    _$v = other as _$DevDataBinary;
  }

  @override
  void update(void Function(DevDataBinaryBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  DevDataBinary build() {
    final result = _$v ??
        _$DevDataBinary._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Force immutable class
///
class _$Force extends Force {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$Force([void Function(ForceBuilder b)? updates]) =>
      (ForceBuilder()..update(updates)).build() as _$Force;

  factory _$Force.fromJson(core.Map<String, dynamic> json) {
    var val = ForceBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$Force;
  }

  _$Force._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  Force rebuild(void Function(ForceBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  ForceBuilder toBuilder() => ForceBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Force &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Force')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (N)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Force',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Force builder class
///
class ForceBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Force, ForceBuilder> {
  _$Force? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  ForceBuilder();

  ForceBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  ForceBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Force.fromJson(json);
    replace(v);
  }

  @override
  ForceBuilder fromJson(core.Map<String, dynamic> json) =>
      ForceBuilder.fromJson(json);

  @override
  ForceBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      ForceBuilder()..copyFromHeader(headerFrom);

  ForceBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Force other) {
    _$v = other as _$Force;
  }

  @override
  void update(void Function(ForceBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Force build() {
    final result = _$v ??
        _$Force._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Sonar Data immutable class
///
class _$SonarData extends SonarData {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final SonarDataEnumType type;
  @override
  final int frequency;
  @override
  final int minRange;
  @override
  final int maxRange;
  @override
  final int bitsPerPoint;
  @override
  final double scaleFactor;
  @override
  final List<BeamConfig> beamConfig;
  @override
  final List<int> data;

  factory _$SonarData([void Function(SonarDataBuilder b)? updates]) =>
      (SonarDataBuilder()..update(updates)).build() as _$SonarData;

  factory _$SonarData.fromJson(core.Map<String, dynamic> json) {
    var val = SonarDataBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.type = json.containsKey('type') && json['type'] != null
        ? SonarDataEnumType(json['type'] as int)
        : SonarDataEnumType(0);
    val.frequency =
        json.containsKey('frequency') ? json['frequency'] as int : 0;
    val.minRange = json.containsKey('min_range') ? json['min_range'] as int : 0;
    val.maxRange = json.containsKey('max_range') ? json['max_range'] as int : 0;
    val.bitsPerPoint =
        json.containsKey('bits_per_point') ? json['bits_per_point'] as int : 0;
    val.scaleFactor =
        json.containsKey('scale_factor') ? json['scale_factor'] as double : 0;
    var beamConfig = <BeamConfig>[];
    if (json.containsKey('beam_config') && json['beam_config'] != null) {
      var listJson = json['beam_config'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as BeamConfig?;
          if (m != null) beamConfig.add(m);
        }
      }
    }
    val.beamConfig = beamConfig;
    val.data = json.containsKey('data')
        ? base64.decode(json['data'] as String)
        : <int>[];

    return val.build() as _$SonarData;
  }

  _$SonarData._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.type,
      required this.frequency,
      required this.minRange,
      required this.maxRange,
      required this.bitsPerPoint,
      required this.scaleFactor,
      required this.beamConfig,
      required this.data})
      : super._();

  @override
  SonarData rebuild(void Function(SonarDataBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SonarDataBuilder toBuilder() => SonarDataBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is SonarData &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        type == other.type &&
        frequency == other.frequency &&
        minRange == other.minRange &&
        maxRange == other.maxRange &&
        bitsPerPoint == other.bitsPerPoint &&
        (scaleFactor == other.scaleFactor ||
            scaleFactor - other.scaleFactor <= 1E-7) &&
        DeepCollectionEquality().equals(beamConfig, other.beamConfig) &&
        ListEquality().equals(data, other.data);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        0,
                                                        timestamp?.hashCode ??
                                                            null.hashCode),
                                                    src.hashCode),
                                                srcEnt.hashCode),
                                            dst.hashCode),
                                        dstEnt.hashCode),
                                    type.hashCode),
                                frequency.hashCode),
                            minRange.hashCode),
                        maxRange.hashCode),
                    bitsPerPoint.hashCode),
                scaleFactor.hashCode),
            beamConfig.hashCode),
        data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('SonarData')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('type', '$type (Enumerated) [${type.toPrettyString()}]')
          ..add('frequency', '$frequency (Hz)')
          ..add('minRange', '$minRange (m)')
          ..add('maxRange', '$maxRange (m)')
          ..add('bitsPerPoint', '$bitsPerPoint (bit)')
          ..add('scaleFactor', '$scaleFactor')
          ..add('beamConfig', '$beamConfig')
          ..add('data', '$data'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'SonarData',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'type': type.value,
        'frequency': frequency,
        'min_range': minRange,
        'max_range': maxRange,
        'bits_per_point': bitsPerPoint,
        'scale_factor': scaleFactor,
        'beam_config': [
          ...beamConfig.map((m) => m.toJson(false)),
        ],
        'data': base64.encode(data),
      };
}

/// Sonar Data builder class
///
class SonarDataBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<SonarData, SonarDataBuilder> {
  _$SonarData? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  SonarDataEnumType _type = SonarDataEnumType(0);
  SonarDataEnumType get type => _$this._type;
  set type(SonarDataEnumType type) => _$this._type = type;

  int _frequency = 0;
  int get frequency => _$this._frequency;
  set frequency(int frequency) => _$this._frequency = frequency;

  int _minRange = 0;
  int get minRange => _$this._minRange;
  set minRange(int minRange) => _$this._minRange = minRange;

  int _maxRange = 0;
  int get maxRange => _$this._maxRange;
  set maxRange(int maxRange) => _$this._maxRange = maxRange;

  int _bitsPerPoint = 0;
  int get bitsPerPoint => _$this._bitsPerPoint;
  set bitsPerPoint(int bitsPerPoint) => _$this._bitsPerPoint = bitsPerPoint;

  double _scaleFactor = 0;
  double get scaleFactor => _$this._scaleFactor;
  set scaleFactor(double scaleFactor) => _$this._scaleFactor = scaleFactor;

  List<BeamConfig> _beamConfig = <BeamConfig>[];
  List<BeamConfig> get beamConfig => _$this._beamConfig;
  set beamConfig(List<BeamConfig> beamConfig) =>
      _$this._beamConfig = beamConfig;

  List<int> _data = <int>[];
  List<int> get data => _$this._data;
  set data(List<int> data) => _$this._data = data;

  SonarDataBuilder();

  SonarDataBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SonarDataBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$SonarData.fromJson(json);
    replace(v);
  }

  @override
  SonarDataBuilder fromJson(core.Map<String, dynamic> json) =>
      SonarDataBuilder.fromJson(json);

  @override
  SonarDataBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SonarDataBuilder()..copyFromHeader(headerFrom);

  SonarDataBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _type = _$v!.type;
      _frequency = _$v!.frequency;
      _minRange = _$v!.minRange;
      _maxRange = _$v!.maxRange;
      _bitsPerPoint = _$v!.bitsPerPoint;
      _scaleFactor = _$v!.scaleFactor;
      _beamConfig = _$v!.beamConfig;
      _data = _$v!.data;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(SonarData other) {
    _$v = other as _$SonarData;
  }

  @override
  void update(void Function(SonarDataBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  SonarData build() {
    final result = _$v ??
        _$SonarData._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            type: type,
            frequency: frequency,
            minRange: minRange,
            maxRange: maxRange,
            bitsPerPoint: bitsPerPoint,
            scaleFactor: scaleFactor,
            beamConfig: beamConfig,
            data: data);
    replace(result);
    return result;
  }
}

/// Pulse immutable class
///
class _$Pulse extends Pulse {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  factory _$Pulse([void Function(PulseBuilder b)? updates]) =>
      (PulseBuilder()..update(updates)).build() as _$Pulse;

  factory _$Pulse.fromJson(core.Map<String, dynamic> json) {
    var val = PulseBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    return val.build() as _$Pulse;
  }

  _$Pulse._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId})
      : super._();

  @override
  Pulse rebuild(void Function(PulseBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  PulseBuilder toBuilder() => PulseBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Pulse &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc($jc($jc(0, timestamp?.hashCode ?? null.hashCode), src.hashCode),
                srcEnt.hashCode),
            dst.hashCode),
        dstEnt.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Pulse')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Pulse',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
      };
}

/// Pulse builder class
///
class PulseBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Pulse, PulseBuilder> {
  _$Pulse? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  PulseBuilder();

  PulseBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  PulseBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Pulse.fromJson(json);
    replace(v);
  }

  @override
  PulseBuilder fromJson(core.Map<String, dynamic> json) =>
      PulseBuilder.fromJson(json);

  @override
  PulseBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      PulseBuilder()..copyFromHeader(headerFrom);

  PulseBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Pulse other) {
    _$v = other as _$Pulse;
  }

  @override
  void update(void Function(PulseBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Pulse build() {
    final result = _$v ??
        _$Pulse._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt);
    replace(result);
    return result;
  }
}

/// Pulse Detection Control immutable class
///
class _$PulseDetectionControl extends PulseDetectionControl {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final PulseDetectionControlEnumOp op;

  factory _$PulseDetectionControl(
          [void Function(PulseDetectionControlBuilder b)? updates]) =>
      (PulseDetectionControlBuilder()..update(updates)).build()
          as _$PulseDetectionControl;

  factory _$PulseDetectionControl.fromJson(core.Map<String, dynamic> json) {
    var val = PulseDetectionControlBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.op = json.containsKey('op') && json['op'] != null
        ? PulseDetectionControlEnumOp(json['op'] as int)
        : PulseDetectionControlEnumOp(0);

    return val.build() as _$PulseDetectionControl;
  }

  _$PulseDetectionControl._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.op})
      : super._();

  @override
  PulseDetectionControl rebuild(
          void Function(PulseDetectionControlBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  PulseDetectionControlBuilder toBuilder() =>
      PulseDetectionControlBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is PulseDetectionControl &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        op == other.op;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        op.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('PulseDetectionControl')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'PulseDetectionControl',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'op': op.value,
      };
}

/// Pulse Detection Control builder class
///
class PulseDetectionControlBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<PulseDetectionControl,
            PulseDetectionControlBuilder> {
  _$PulseDetectionControl? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  PulseDetectionControlEnumOp _op = PulseDetectionControlEnumOp(0);
  PulseDetectionControlEnumOp get op => _$this._op;
  set op(PulseDetectionControlEnumOp op) => _$this._op = op;

  PulseDetectionControlBuilder();

  PulseDetectionControlBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  PulseDetectionControlBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$PulseDetectionControl.fromJson(json);
    replace(v);
  }

  @override
  PulseDetectionControlBuilder fromJson(core.Map<String, dynamic> json) =>
      PulseDetectionControlBuilder.fromJson(json);

  @override
  PulseDetectionControlBuilder newInstance(
          [ImcBuilderHeaderPart? headerFrom]) =>
      PulseDetectionControlBuilder()..copyFromHeader(headerFrom);

  PulseDetectionControlBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _op = _$v!.op;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(PulseDetectionControl other) {
    _$v = other as _$PulseDetectionControl;
  }

  @override
  void update(void Function(PulseDetectionControlBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  PulseDetectionControl build() {
    final result = _$v ??
        _$PulseDetectionControl._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            op: op);
    replace(result);
    return result;
  }
}

/// Fuel Level immutable class
///
class _$FuelLevel extends FuelLevel {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;
  @override
  final double confidence;
  @override
  final String opmodes;

  factory _$FuelLevel([void Function(FuelLevelBuilder b)? updates]) =>
      (FuelLevelBuilder()..update(updates)).build() as _$FuelLevel;

  factory _$FuelLevel.fromJson(core.Map<String, dynamic> json) {
    var val = FuelLevelBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;
    val.confidence =
        json.containsKey('confidence') ? json['confidence'] as double : 0;
    val.opmodes = json.containsKey('opmodes') && json['opmodes'] != null
        ? json['opmodes'] as String
        : '';

    return val.build() as _$FuelLevel;
  }

  _$FuelLevel._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value,
      required this.confidence,
      required this.opmodes})
      : super._();

  @override
  FuelLevel rebuild(void Function(FuelLevelBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  FuelLevelBuilder toBuilder() => FuelLevelBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is FuelLevel &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7) &&
        (confidence == other.confidence ||
            confidence - other.confidence <= 1E-7) &&
        opmodes == other.opmodes;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                value.hashCode),
            confidence.hashCode),
        opmodes.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('FuelLevel')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (%)')
          ..add('confidence', '$confidence (%)')
          ..add('opmodes', '$opmodes (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'FuelLevel',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
        'confidence': confidence,
        'opmodes': opmodes,
      };
}

/// Fuel Level builder class
///
class FuelLevelBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<FuelLevel, FuelLevelBuilder> {
  _$FuelLevel? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  double _confidence = 0;
  double get confidence => _$this._confidence;
  set confidence(double confidence) => _$this._confidence = confidence;

  String _opmodes = '';
  String get opmodes => _$this._opmodes;
  set opmodes(String opmodes) => _$this._opmodes = opmodes;

  FuelLevelBuilder();

  FuelLevelBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  FuelLevelBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$FuelLevel.fromJson(json);
    replace(v);
  }

  @override
  FuelLevelBuilder fromJson(core.Map<String, dynamic> json) =>
      FuelLevelBuilder.fromJson(json);

  @override
  FuelLevelBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      FuelLevelBuilder()..copyFromHeader(headerFrom);

  FuelLevelBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _confidence = _$v!.confidence;
      _opmodes = _$v!.opmodes;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(FuelLevel other) {
    _$v = other as _$FuelLevel;
  }

  @override
  void update(void Function(FuelLevelBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  FuelLevel build() {
    final result = _$v ??
        _$FuelLevel._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value,
            confidence: confidence,
            opmodes: opmodes);
    replace(result);
    return result;
  }
}

/// GPS Navigation Data immutable class
///
class _$GpsNavData extends GpsNavData {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int itow;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double heightEll;
  @override
  final double heightSea;
  @override
  final double hacc;
  @override
  final double vacc;
  @override
  final double velN;
  @override
  final double velE;
  @override
  final double velD;
  @override
  final double speed;
  @override
  final double gspeed;
  @override
  final double heading;
  @override
  final double sacc;
  @override
  final double cacc;

  factory _$GpsNavData([void Function(GpsNavDataBuilder b)? updates]) =>
      (GpsNavDataBuilder()..update(updates)).build() as _$GpsNavData;

  factory _$GpsNavData.fromJson(core.Map<String, dynamic> json) {
    var val = GpsNavDataBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.itow = json.containsKey('itow') ? json['itow'] as int : 0;
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.heightEll =
        json.containsKey('height_ell') ? json['height_ell'] as double : 0;
    val.heightSea =
        json.containsKey('height_sea') ? json['height_sea'] as double : 0;
    val.hacc = json.containsKey('hacc') ? json['hacc'] as double : 0;
    val.vacc = json.containsKey('vacc') ? json['vacc'] as double : 0;
    val.velN = json.containsKey('vel_n') ? json['vel_n'] as double : 0;
    val.velE = json.containsKey('vel_e') ? json['vel_e'] as double : 0;
    val.velD = json.containsKey('vel_d') ? json['vel_d'] as double : 0;
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.gspeed = json.containsKey('gspeed') ? json['gspeed'] as double : 0;
    val.heading = json.containsKey('heading') ? json['heading'] as double : 0;
    val.sacc = json.containsKey('sacc') ? json['sacc'] as double : 0;
    val.cacc = json.containsKey('cacc') ? json['cacc'] as double : 0;

    return val.build() as _$GpsNavData;
  }

  _$GpsNavData._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.itow,
      required this.lat,
      required this.lon,
      required this.heightEll,
      required this.heightSea,
      required this.hacc,
      required this.vacc,
      required this.velN,
      required this.velE,
      required this.velD,
      required this.speed,
      required this.gspeed,
      required this.heading,
      required this.sacc,
      required this.cacc})
      : super._();

  @override
  GpsNavData rebuild(void Function(GpsNavDataBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GpsNavDataBuilder toBuilder() => GpsNavDataBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GpsNavData &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        itow == other.itow &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (heightEll == other.heightEll || heightEll - other.heightEll <= 1E-7) &&
        (heightSea == other.heightSea || heightSea - other.heightSea <= 1E-7) &&
        (hacc == other.hacc || hacc - other.hacc <= 1E-7) &&
        (vacc == other.vacc || vacc - other.vacc <= 1E-7) &&
        (velN == other.velN || velN - other.velN <= 1E-7) &&
        (velE == other.velE || velE - other.velE <= 1E-7) &&
        (velD == other.velD || velD - other.velD <= 1E-7) &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        (gspeed == other.gspeed || gspeed - other.gspeed <= 1E-7) &&
        (heading == other.heading || heading - other.heading <= 1E-7) &&
        (sacc == other.sacc || sacc - other.sacc <= 1E-7) &&
        (cacc == other.cacc || cacc - other.cacc <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                                                                src.hashCode),
                                                                            srcEnt.hashCode),
                                                                        dst.hashCode),
                                                                    dstEnt.hashCode),
                                                                itow.hashCode),
                                                            lat.hashCode),
                                                        lon.hashCode),
                                                    heightEll.hashCode),
                                                heightSea.hashCode),
                                            hacc.hashCode),
                                        vacc.hashCode),
                                    velN.hashCode),
                                velE.hashCode),
                            velD.hashCode),
                        speed.hashCode),
                    gspeed.hashCode),
                heading.hashCode),
            sacc.hashCode),
        cacc.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GpsNavData')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('itow', '$itow (ms)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('heightEll', '$heightEll (m)')
          ..add('heightSea', '$heightSea (m)')
          ..add('hacc', '$hacc (m)')
          ..add('vacc', '$vacc (m)')
          ..add('velN', '$velN (m/s)')
          ..add('velE', '$velE (m/s)')
          ..add('velD', '$velD (m/s)')
          ..add('speed', '$speed (m/s)')
          ..add('gspeed', '$gspeed (m/s)')
          ..add(
              'heading', '$heading (rad) [${heading * 180.0 / math.pi} (deg)]')
          ..add('sacc', '$sacc (m/s)')
          ..add('cacc', '$cacc (rad) [${cacc * 180.0 / math.pi} (deg)]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'GpsNavData',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'itow': itow,
        'lat': lat,
        'lon': lon,
        'height_ell': heightEll,
        'height_sea': heightSea,
        'hacc': hacc,
        'vacc': vacc,
        'vel_n': velN,
        'vel_e': velE,
        'vel_d': velD,
        'speed': speed,
        'gspeed': gspeed,
        'heading': heading,
        'sacc': sacc,
        'cacc': cacc,
      };
}

/// GPS Navigation Data builder class
///
class GpsNavDataBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<GpsNavData, GpsNavDataBuilder> {
  _$GpsNavData? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _itow = 0;
  int get itow => _$this._itow;
  set itow(int itow) => _$this._itow = itow;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _heightEll = 0;
  double get heightEll => _$this._heightEll;
  set heightEll(double heightEll) => _$this._heightEll = heightEll;

  double _heightSea = 0;
  double get heightSea => _$this._heightSea;
  set heightSea(double heightSea) => _$this._heightSea = heightSea;

  double _hacc = 0;
  double get hacc => _$this._hacc;
  set hacc(double hacc) => _$this._hacc = hacc;

  double _vacc = 0;
  double get vacc => _$this._vacc;
  set vacc(double vacc) => _$this._vacc = vacc;

  double _velN = 0;
  double get velN => _$this._velN;
  set velN(double velN) => _$this._velN = velN;

  double _velE = 0;
  double get velE => _$this._velE;
  set velE(double velE) => _$this._velE = velE;

  double _velD = 0;
  double get velD => _$this._velD;
  set velD(double velD) => _$this._velD = velD;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  double _gspeed = 0;
  double get gspeed => _$this._gspeed;
  set gspeed(double gspeed) => _$this._gspeed = gspeed;

  double _heading = 0;
  double get heading => _$this._heading;
  set heading(double heading) => _$this._heading = heading;

  double _sacc = 0;
  double get sacc => _$this._sacc;
  set sacc(double sacc) => _$this._sacc = sacc;

  double _cacc = 0;
  double get cacc => _$this._cacc;
  set cacc(double cacc) => _$this._cacc = cacc;

  GpsNavDataBuilder();

  GpsNavDataBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  GpsNavDataBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$GpsNavData.fromJson(json);
    replace(v);
  }

  @override
  GpsNavDataBuilder fromJson(core.Map<String, dynamic> json) =>
      GpsNavDataBuilder.fromJson(json);

  @override
  GpsNavDataBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      GpsNavDataBuilder()..copyFromHeader(headerFrom);

  GpsNavDataBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _itow = _$v!.itow;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _heightEll = _$v!.heightEll;
      _heightSea = _$v!.heightSea;
      _hacc = _$v!.hacc;
      _vacc = _$v!.vacc;
      _velN = _$v!.velN;
      _velE = _$v!.velE;
      _velD = _$v!.velD;
      _speed = _$v!.speed;
      _gspeed = _$v!.gspeed;
      _heading = _$v!.heading;
      _sacc = _$v!.sacc;
      _cacc = _$v!.cacc;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GpsNavData other) {
    _$v = other as _$GpsNavData;
  }

  @override
  void update(void Function(GpsNavDataBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GpsNavData build() {
    final result = _$v ??
        _$GpsNavData._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            itow: itow,
            lat: lat,
            lon: lon,
            heightEll: heightEll,
            heightSea: heightSea,
            hacc: hacc,
            vacc: vacc,
            velN: velN,
            velE: velE,
            velD: velD,
            speed: speed,
            gspeed: gspeed,
            heading: heading,
            sacc: sacc,
            cacc: cacc);
    replace(result);
    return result;
  }
}

/// Servo Position immutable class
///
class _$ServoPosition extends ServoPosition {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int id;
  @override
  final double value;

  factory _$ServoPosition([void Function(ServoPositionBuilder b)? updates]) =>
      (ServoPositionBuilder()..update(updates)).build() as _$ServoPosition;

  factory _$ServoPosition.fromJson(core.Map<String, dynamic> json) {
    var val = ServoPositionBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.id = json.containsKey('id') ? json['id'] as int : 0;
    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$ServoPosition;
  }

  _$ServoPosition._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.id,
      required this.value})
      : super._();

  @override
  ServoPosition rebuild(void Function(ServoPositionBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  ServoPositionBuilder toBuilder() => ServoPositionBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is ServoPosition &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        id == other.id &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            id.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('ServoPosition')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('id', '$id')
          ..add('value', '$value (rad) [${value * 180.0 / math.pi} (deg)]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'ServoPosition',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'id': id,
        'value': value,
      };
}

/// Servo Position builder class
///
class ServoPositionBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<ServoPosition, ServoPositionBuilder> {
  _$ServoPosition? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _id = 0;
  int get id => _$this._id;
  set id(int id) => _$this._id = id;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  ServoPositionBuilder();

  ServoPositionBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  ServoPositionBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$ServoPosition.fromJson(json);
    replace(v);
  }

  @override
  ServoPositionBuilder fromJson(core.Map<String, dynamic> json) =>
      ServoPositionBuilder.fromJson(json);

  @override
  ServoPositionBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      ServoPositionBuilder()..copyFromHeader(headerFrom);

  ServoPositionBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _id = _$v!.id;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(ServoPosition other) {
    _$v = other as _$ServoPosition;
  }

  @override
  void update(void Function(ServoPositionBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  ServoPosition build() {
    final result = _$v ??
        _$ServoPosition._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            id: id,
            value: value);
    replace(result);
    return result;
  }
}

/// Device State immutable class
///
class _$DeviceState extends DeviceState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double x;
  @override
  final double y;
  @override
  final double z;
  @override
  final double phi;
  @override
  final double theta;
  @override
  final double psi;

  factory _$DeviceState([void Function(DeviceStateBuilder b)? updates]) =>
      (DeviceStateBuilder()..update(updates)).build() as _$DeviceState;

  factory _$DeviceState.fromJson(core.Map<String, dynamic> json) {
    var val = DeviceStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.x = json.containsKey('x') ? json['x'] as double : 0;
    val.y = json.containsKey('y') ? json['y'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.phi = json.containsKey('phi') ? json['phi'] as double : 0;
    val.theta = json.containsKey('theta') ? json['theta'] as double : 0;
    val.psi = json.containsKey('psi') ? json['psi'] as double : 0;

    return val.build() as _$DeviceState;
  }

  _$DeviceState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.x,
      required this.y,
      required this.z,
      required this.phi,
      required this.theta,
      required this.psi})
      : super._();

  @override
  DeviceState rebuild(void Function(DeviceStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DeviceStateBuilder toBuilder() => DeviceStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is DeviceState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (x == other.x || x - other.x <= 1E-7) &&
        (y == other.y || y - other.y <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        (phi == other.phi || phi - other.phi <= 1E-7) &&
        (theta == other.theta || theta - other.theta <= 1E-7) &&
        (psi == other.psi || psi - other.psi <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                0,
                                                timestamp?.hashCode ??
                                                    null.hashCode),
                                            src.hashCode),
                                        srcEnt.hashCode),
                                    dst.hashCode),
                                dstEnt.hashCode),
                            x.hashCode),
                        y.hashCode),
                    z.hashCode),
                phi.hashCode),
            theta.hashCode),
        psi.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('DeviceState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('x', '$x (m)')
          ..add('y', '$y (m)')
          ..add('z', '$z (m)')
          ..add('phi', '$phi (rad) [${phi * 180.0 / math.pi} (deg)]')
          ..add('theta', '$theta (rad) [${theta * 180.0 / math.pi} (deg)]')
          ..add('psi', '$psi (rad) [${psi * 180.0 / math.pi} (deg)]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'DeviceState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'x': x,
        'y': y,
        'z': z,
        'phi': phi,
        'theta': theta,
        'psi': psi,
      };
}

/// Device State builder class
///
class DeviceStateBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<DeviceState, DeviceStateBuilder> {
  _$DeviceState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _x = 0;
  double get x => _$this._x;
  set x(double x) => _$this._x = x;

  double _y = 0;
  double get y => _$this._y;
  set y(double y) => _$this._y = y;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  double _phi = 0;
  double get phi => _$this._phi;
  set phi(double phi) => _$this._phi = phi;

  double _theta = 0;
  double get theta => _$this._theta;
  set theta(double theta) => _$this._theta = theta;

  double _psi = 0;
  double get psi => _$this._psi;
  set psi(double psi) => _$this._psi = psi;

  DeviceStateBuilder();

  DeviceStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DeviceStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$DeviceState.fromJson(json);
    replace(v);
  }

  @override
  DeviceStateBuilder fromJson(core.Map<String, dynamic> json) =>
      DeviceStateBuilder.fromJson(json);

  @override
  DeviceStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      DeviceStateBuilder()..copyFromHeader(headerFrom);

  DeviceStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _x = _$v!.x;
      _y = _$v!.y;
      _z = _$v!.z;
      _phi = _$v!.phi;
      _theta = _$v!.theta;
      _psi = _$v!.psi;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(DeviceState other) {
    _$v = other as _$DeviceState;
  }

  @override
  void update(void Function(DeviceStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  DeviceState build() {
    final result = _$v ??
        _$DeviceState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            x: x,
            y: y,
            z: z,
            phi: phi,
            theta: theta,
            psi: psi);
    replace(result);
    return result;
  }
}

/// Beam Configuration immutable class
///
class _$BeamConfig extends BeamConfig {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double beamWidth;
  @override
  final double beamHeight;

  factory _$BeamConfig([void Function(BeamConfigBuilder b)? updates]) =>
      (BeamConfigBuilder()..update(updates)).build() as _$BeamConfig;

  factory _$BeamConfig.fromJson(core.Map<String, dynamic> json) {
    var val = BeamConfigBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.beamWidth =
        json.containsKey('beam_width') ? json['beam_width'] as double : 0;
    val.beamHeight =
        json.containsKey('beam_height') ? json['beam_height'] as double : 0;

    return val.build() as _$BeamConfig;
  }

  _$BeamConfig._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.beamWidth,
      required this.beamHeight})
      : super._();

  @override
  BeamConfig rebuild(void Function(BeamConfigBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  BeamConfigBuilder toBuilder() => BeamConfigBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is BeamConfig &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (beamWidth == other.beamWidth || beamWidth - other.beamWidth <= 1E-7) &&
        (beamHeight == other.beamHeight ||
            beamHeight - other.beamHeight <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            beamWidth.hashCode),
        beamHeight.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('BeamConfig')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('beamWidth',
              '$beamWidth (rad) [${beamWidth * 180.0 / math.pi} (deg)]')
          ..add('beamHeight',
              '$beamHeight (rad) [${beamHeight * 180.0 / math.pi} (deg)]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'BeamConfig',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'beam_width': beamWidth,
        'beam_height': beamHeight,
      };
}

/// Beam Configuration builder class
///
class BeamConfigBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<BeamConfig, BeamConfigBuilder> {
  _$BeamConfig? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _beamWidth = 0;
  double get beamWidth => _$this._beamWidth;
  set beamWidth(double beamWidth) => _$this._beamWidth = beamWidth;

  double _beamHeight = 0;
  double get beamHeight => _$this._beamHeight;
  set beamHeight(double beamHeight) => _$this._beamHeight = beamHeight;

  BeamConfigBuilder();

  BeamConfigBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  BeamConfigBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$BeamConfig.fromJson(json);
    replace(v);
  }

  @override
  BeamConfigBuilder fromJson(core.Map<String, dynamic> json) =>
      BeamConfigBuilder.fromJson(json);

  @override
  BeamConfigBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      BeamConfigBuilder()..copyFromHeader(headerFrom);

  BeamConfigBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _beamWidth = _$v!.beamWidth;
      _beamHeight = _$v!.beamHeight;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(BeamConfig other) {
    _$v = other as _$BeamConfig;
  }

  @override
  void update(void Function(BeamConfigBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  BeamConfig build() {
    final result = _$v ??
        _$BeamConfig._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            beamWidth: beamWidth,
            beamHeight: beamHeight);
    replace(result);
    return result;
  }
}

/// Data Sanity immutable class
///
class _$DataSanity extends DataSanity {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final DataSanityEnumSane sane;

  factory _$DataSanity([void Function(DataSanityBuilder b)? updates]) =>
      (DataSanityBuilder()..update(updates)).build() as _$DataSanity;

  factory _$DataSanity.fromJson(core.Map<String, dynamic> json) {
    var val = DataSanityBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.sane = json.containsKey('sane') && json['sane'] != null
        ? DataSanityEnumSane(json['sane'] as int)
        : DataSanityEnumSane(0);

    return val.build() as _$DataSanity;
  }

  _$DataSanity._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.sane})
      : super._();

  @override
  DataSanity rebuild(void Function(DataSanityBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DataSanityBuilder toBuilder() => DataSanityBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is DataSanity &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        sane == other.sane;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        sane.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('DataSanity')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('sane', '$sane (Enumerated) [${sane.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'DataSanity',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'sane': sane.value,
      };
}

/// Data Sanity builder class
///
class DataSanityBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<DataSanity, DataSanityBuilder> {
  _$DataSanity? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  DataSanityEnumSane _sane = DataSanityEnumSane(0);
  DataSanityEnumSane get sane => _$this._sane;
  set sane(DataSanityEnumSane sane) => _$this._sane = sane;

  DataSanityBuilder();

  DataSanityBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DataSanityBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$DataSanity.fromJson(json);
    replace(v);
  }

  @override
  DataSanityBuilder fromJson(core.Map<String, dynamic> json) =>
      DataSanityBuilder.fromJson(json);

  @override
  DataSanityBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      DataSanityBuilder()..copyFromHeader(headerFrom);

  DataSanityBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _sane = _$v!.sane;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(DataSanity other) {
    _$v = other as _$DataSanity;
  }

  @override
  void update(void Function(DataSanityBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  DataSanity build() {
    final result = _$v ??
        _$DataSanity._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            sane: sane);
    replace(result);
    return result;
  }
}

/// Rhodamine Dye immutable class
///
class _$RhodamineDye extends RhodamineDye {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$RhodamineDye([void Function(RhodamineDyeBuilder b)? updates]) =>
      (RhodamineDyeBuilder()..update(updates)).build() as _$RhodamineDye;

  factory _$RhodamineDye.fromJson(core.Map<String, dynamic> json) {
    var val = RhodamineDyeBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$RhodamineDye;
  }

  _$RhodamineDye._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  RhodamineDye rebuild(void Function(RhodamineDyeBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  RhodamineDyeBuilder toBuilder() => RhodamineDyeBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is RhodamineDye &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('RhodamineDye')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (PPB)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'RhodamineDye',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Rhodamine Dye builder class
///
class RhodamineDyeBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<RhodamineDye, RhodamineDyeBuilder> {
  _$RhodamineDye? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  RhodamineDyeBuilder();

  RhodamineDyeBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  RhodamineDyeBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$RhodamineDye.fromJson(json);
    replace(v);
  }

  @override
  RhodamineDyeBuilder fromJson(core.Map<String, dynamic> json) =>
      RhodamineDyeBuilder.fromJson(json);

  @override
  RhodamineDyeBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      RhodamineDyeBuilder()..copyFromHeader(headerFrom);

  RhodamineDyeBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(RhodamineDye other) {
    _$v = other as _$RhodamineDye;
  }

  @override
  void update(void Function(RhodamineDyeBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  RhodamineDye build() {
    final result = _$v ??
        _$RhodamineDye._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Crude Oil immutable class
///
class _$CrudeOil extends CrudeOil {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$CrudeOil([void Function(CrudeOilBuilder b)? updates]) =>
      (CrudeOilBuilder()..update(updates)).build() as _$CrudeOil;

  factory _$CrudeOil.fromJson(core.Map<String, dynamic> json) {
    var val = CrudeOilBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$CrudeOil;
  }

  _$CrudeOil._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  CrudeOil rebuild(void Function(CrudeOilBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  CrudeOilBuilder toBuilder() => CrudeOilBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is CrudeOil &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('CrudeOil')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (PPB)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'CrudeOil',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Crude Oil builder class
///
class CrudeOilBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<CrudeOil, CrudeOilBuilder> {
  _$CrudeOil? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  CrudeOilBuilder();

  CrudeOilBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  CrudeOilBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$CrudeOil.fromJson(json);
    replace(v);
  }

  @override
  CrudeOilBuilder fromJson(core.Map<String, dynamic> json) =>
      CrudeOilBuilder.fromJson(json);

  @override
  CrudeOilBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      CrudeOilBuilder()..copyFromHeader(headerFrom);

  CrudeOilBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(CrudeOil other) {
    _$v = other as _$CrudeOil;
  }

  @override
  void update(void Function(CrudeOilBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  CrudeOil build() {
    final result = _$v ??
        _$CrudeOil._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Fine Oil immutable class
///
class _$FineOil extends FineOil {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$FineOil([void Function(FineOilBuilder b)? updates]) =>
      (FineOilBuilder()..update(updates)).build() as _$FineOil;

  factory _$FineOil.fromJson(core.Map<String, dynamic> json) {
    var val = FineOilBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$FineOil;
  }

  _$FineOil._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  FineOil rebuild(void Function(FineOilBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  FineOilBuilder toBuilder() => FineOilBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is FineOil &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('FineOil')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (PPB)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'FineOil',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Fine Oil builder class
///
class FineOilBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<FineOil, FineOilBuilder> {
  _$FineOil? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  FineOilBuilder();

  FineOilBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  FineOilBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$FineOil.fromJson(json);
    replace(v);
  }

  @override
  FineOilBuilder fromJson(core.Map<String, dynamic> json) =>
      FineOilBuilder.fromJson(json);

  @override
  FineOilBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      FineOilBuilder()..copyFromHeader(headerFrom);

  FineOilBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(FineOil other) {
    _$v = other as _$FineOil;
  }

  @override
  void update(void Function(FineOilBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  FineOil build() {
    final result = _$v ??
        _$FineOil._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Turbidity immutable class
///
class _$Turbidity extends Turbidity {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$Turbidity([void Function(TurbidityBuilder b)? updates]) =>
      (TurbidityBuilder()..update(updates)).build() as _$Turbidity;

  factory _$Turbidity.fromJson(core.Map<String, dynamic> json) {
    var val = TurbidityBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$Turbidity;
  }

  _$Turbidity._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  Turbidity rebuild(void Function(TurbidityBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  TurbidityBuilder toBuilder() => TurbidityBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Turbidity &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Turbidity')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (NTU)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Turbidity',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Turbidity builder class
///
class TurbidityBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Turbidity, TurbidityBuilder> {
  _$Turbidity? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  TurbidityBuilder();

  TurbidityBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  TurbidityBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Turbidity.fromJson(json);
    replace(v);
  }

  @override
  TurbidityBuilder fromJson(core.Map<String, dynamic> json) =>
      TurbidityBuilder.fromJson(json);

  @override
  TurbidityBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      TurbidityBuilder()..copyFromHeader(headerFrom);

  TurbidityBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Turbidity other) {
    _$v = other as _$Turbidity;
  }

  @override
  void update(void Function(TurbidityBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Turbidity build() {
    final result = _$v ??
        _$Turbidity._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Chlorophyll immutable class
///
class _$Chlorophyll extends Chlorophyll {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$Chlorophyll([void Function(ChlorophyllBuilder b)? updates]) =>
      (ChlorophyllBuilder()..update(updates)).build() as _$Chlorophyll;

  factory _$Chlorophyll.fromJson(core.Map<String, dynamic> json) {
    var val = ChlorophyllBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$Chlorophyll;
  }

  _$Chlorophyll._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  Chlorophyll rebuild(void Function(ChlorophyllBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  ChlorophyllBuilder toBuilder() => ChlorophyllBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Chlorophyll &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Chlorophyll')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (µg/L)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Chlorophyll',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Chlorophyll builder class
///
class ChlorophyllBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Chlorophyll, ChlorophyllBuilder> {
  _$Chlorophyll? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  ChlorophyllBuilder();

  ChlorophyllBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  ChlorophyllBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Chlorophyll.fromJson(json);
    replace(v);
  }

  @override
  ChlorophyllBuilder fromJson(core.Map<String, dynamic> json) =>
      ChlorophyllBuilder.fromJson(json);

  @override
  ChlorophyllBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      ChlorophyllBuilder()..copyFromHeader(headerFrom);

  ChlorophyllBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Chlorophyll other) {
    _$v = other as _$Chlorophyll;
  }

  @override
  void update(void Function(ChlorophyllBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Chlorophyll build() {
    final result = _$v ??
        _$Chlorophyll._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Fluorescein immutable class
///
class _$Fluorescein extends Fluorescein {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$Fluorescein([void Function(FluoresceinBuilder b)? updates]) =>
      (FluoresceinBuilder()..update(updates)).build() as _$Fluorescein;

  factory _$Fluorescein.fromJson(core.Map<String, dynamic> json) {
    var val = FluoresceinBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$Fluorescein;
  }

  _$Fluorescein._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  Fluorescein rebuild(void Function(FluoresceinBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  FluoresceinBuilder toBuilder() => FluoresceinBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Fluorescein &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Fluorescein')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (PPB)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Fluorescein',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Fluorescein builder class
///
class FluoresceinBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Fluorescein, FluoresceinBuilder> {
  _$Fluorescein? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  FluoresceinBuilder();

  FluoresceinBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  FluoresceinBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Fluorescein.fromJson(json);
    replace(v);
  }

  @override
  FluoresceinBuilder fromJson(core.Map<String, dynamic> json) =>
      FluoresceinBuilder.fromJson(json);

  @override
  FluoresceinBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      FluoresceinBuilder()..copyFromHeader(headerFrom);

  FluoresceinBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Fluorescein other) {
    _$v = other as _$Fluorescein;
  }

  @override
  void update(void Function(FluoresceinBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Fluorescein build() {
    final result = _$v ??
        _$Fluorescein._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Phycocyanin immutable class
///
class _$Phycocyanin extends Phycocyanin {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$Phycocyanin([void Function(PhycocyaninBuilder b)? updates]) =>
      (PhycocyaninBuilder()..update(updates)).build() as _$Phycocyanin;

  factory _$Phycocyanin.fromJson(core.Map<String, dynamic> json) {
    var val = PhycocyaninBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$Phycocyanin;
  }

  _$Phycocyanin._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  Phycocyanin rebuild(void Function(PhycocyaninBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  PhycocyaninBuilder toBuilder() => PhycocyaninBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Phycocyanin &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Phycocyanin')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (PPB)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Phycocyanin',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Phycocyanin builder class
///
class PhycocyaninBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Phycocyanin, PhycocyaninBuilder> {
  _$Phycocyanin? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  PhycocyaninBuilder();

  PhycocyaninBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  PhycocyaninBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Phycocyanin.fromJson(json);
    replace(v);
  }

  @override
  PhycocyaninBuilder fromJson(core.Map<String, dynamic> json) =>
      PhycocyaninBuilder.fromJson(json);

  @override
  PhycocyaninBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      PhycocyaninBuilder()..copyFromHeader(headerFrom);

  PhycocyaninBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Phycocyanin other) {
    _$v = other as _$Phycocyanin;
  }

  @override
  void update(void Function(PhycocyaninBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Phycocyanin build() {
    final result = _$v ??
        _$Phycocyanin._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Phycoerythrin immutable class
///
class _$Phycoerythrin extends Phycoerythrin {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$Phycoerythrin([void Function(PhycoerythrinBuilder b)? updates]) =>
      (PhycoerythrinBuilder()..update(updates)).build() as _$Phycoerythrin;

  factory _$Phycoerythrin.fromJson(core.Map<String, dynamic> json) {
    var val = PhycoerythrinBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$Phycoerythrin;
  }

  _$Phycoerythrin._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  Phycoerythrin rebuild(void Function(PhycoerythrinBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  PhycoerythrinBuilder toBuilder() => PhycoerythrinBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Phycoerythrin &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Phycoerythrin')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (PPB)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Phycoerythrin',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Phycoerythrin builder class
///
class PhycoerythrinBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Phycoerythrin, PhycoerythrinBuilder> {
  _$Phycoerythrin? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  PhycoerythrinBuilder();

  PhycoerythrinBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  PhycoerythrinBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Phycoerythrin.fromJson(json);
    replace(v);
  }

  @override
  PhycoerythrinBuilder fromJson(core.Map<String, dynamic> json) =>
      PhycoerythrinBuilder.fromJson(json);

  @override
  PhycoerythrinBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      PhycoerythrinBuilder()..copyFromHeader(headerFrom);

  PhycoerythrinBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Phycoerythrin other) {
    _$v = other as _$Phycoerythrin;
  }

  @override
  void update(void Function(PhycoerythrinBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Phycoerythrin build() {
    final result = _$v ??
        _$Phycoerythrin._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// GPS Fix RTK immutable class
///
class _$GpsFixRtk extends GpsFixRtk {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final GpsFixRtkBitfieldValidity validity;
  @override
  final GpsFixRtkEnumType type;
  @override
  final int tow;
  @override
  final double baseLat;
  @override
  final double baseLon;
  @override
  final double baseHeight;
  @override
  final double n;
  @override
  final double e;
  @override
  final double d;
  @override
  final double vN;
  @override
  final double vE;
  @override
  final double vD;
  @override
  final int satellites;
  @override
  final int iarHyp;
  @override
  final double iarRatio;

  factory _$GpsFixRtk([void Function(GpsFixRtkBuilder b)? updates]) =>
      (GpsFixRtkBuilder()..update(updates)).build() as _$GpsFixRtk;

  factory _$GpsFixRtk.fromJson(core.Map<String, dynamic> json) {
    var val = GpsFixRtkBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.validity = json.containsKey('validity') && json['validity'] != null
        ? GpsFixRtkBitfieldValidity(json['validity'] as int)
        : GpsFixRtkBitfieldValidity(0);
    val.type = json.containsKey('type') && json['type'] != null
        ? GpsFixRtkEnumType(json['type'] as int)
        : GpsFixRtkEnumType(0);
    val.tow = json.containsKey('tow') ? json['tow'] as int : 0;
    val.baseLat = json.containsKey('base_lat') ? json['base_lat'] as double : 0;
    val.baseLon = json.containsKey('base_lon') ? json['base_lon'] as double : 0;
    val.baseHeight =
        json.containsKey('base_height') ? json['base_height'] as double : 0;
    val.n = json.containsKey('n') ? json['n'] as double : 0;
    val.e = json.containsKey('e') ? json['e'] as double : 0;
    val.d = json.containsKey('d') ? json['d'] as double : 0;
    val.vN = json.containsKey('v_n') ? json['v_n'] as double : 0;
    val.vE = json.containsKey('v_e') ? json['v_e'] as double : 0;
    val.vD = json.containsKey('v_d') ? json['v_d'] as double : 0;
    val.satellites =
        json.containsKey('satellites') ? json['satellites'] as int : 0;
    val.iarHyp = json.containsKey('iar_hyp') ? json['iar_hyp'] as int : 0;
    val.iarRatio =
        json.containsKey('iar_ratio') ? json['iar_ratio'] as double : 0;

    return val.build() as _$GpsFixRtk;
  }

  _$GpsFixRtk._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.validity,
      required this.type,
      required this.tow,
      required this.baseLat,
      required this.baseLon,
      required this.baseHeight,
      required this.n,
      required this.e,
      required this.d,
      required this.vN,
      required this.vE,
      required this.vD,
      required this.satellites,
      required this.iarHyp,
      required this.iarRatio})
      : super._();

  @override
  GpsFixRtk rebuild(void Function(GpsFixRtkBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GpsFixRtkBuilder toBuilder() => GpsFixRtkBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GpsFixRtk &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        validity == other.validity &&
        type == other.type &&
        tow == other.tow &&
        (baseLat == other.baseLat || baseLat - other.baseLat <= 1E-7) &&
        (baseLon == other.baseLon || baseLon - other.baseLon <= 1E-7) &&
        (baseHeight == other.baseHeight ||
            baseHeight - other.baseHeight <= 1E-7) &&
        (n == other.n || n - other.n <= 1E-7) &&
        (e == other.e || e - other.e <= 1E-7) &&
        (d == other.d || d - other.d <= 1E-7) &&
        (vN == other.vN || vN - other.vN <= 1E-7) &&
        (vE == other.vE || vE - other.vE <= 1E-7) &&
        (vD == other.vD || vD - other.vD <= 1E-7) &&
        satellites == other.satellites &&
        iarHyp == other.iarHyp &&
        (iarRatio == other.iarRatio || iarRatio - other.iarRatio <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                                                                src.hashCode),
                                                                            srcEnt.hashCode),
                                                                        dst.hashCode),
                                                                    dstEnt.hashCode),
                                                                validity.hashCode),
                                                            type.hashCode),
                                                        tow.hashCode),
                                                    baseLat.hashCode),
                                                baseLon.hashCode),
                                            baseHeight.hashCode),
                                        n.hashCode),
                                    e.hashCode),
                                d.hashCode),
                            vN.hashCode),
                        vE.hashCode),
                    vD.hashCode),
                satellites.hashCode),
            iarHyp.hashCode),
        iarRatio.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GpsFixRtk')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add(
              'validity', '$validity (Bitfield) [${validity.toPrettyString()}]')
          ..add('type', '$type (Enumerated) [${type.toPrettyString()}]')
          ..add('tow', '$tow')
          ..add(
              'baseLat', '$baseLat (rad) [${baseLat * 180.0 / math.pi} (deg)]')
          ..add(
              'baseLon', '$baseLon (rad) [${baseLon * 180.0 / math.pi} (deg)]')
          ..add('baseHeight', '$baseHeight (m)')
          ..add('n', '$n (m)')
          ..add('e', '$e (m)')
          ..add('d', '$d (m)')
          ..add('vN', '$vN (m/s)')
          ..add('vE', '$vE (m/s)')
          ..add('vD', '$vD (m/s)')
          ..add('satellites', '$satellites')
          ..add('iarHyp', '$iarHyp')
          ..add('iarRatio', '$iarRatio'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'GpsFixRtk',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'validity': validity.value,
        'type': type.value,
        'tow': tow,
        'base_lat': baseLat,
        'base_lon': baseLon,
        'base_height': baseHeight,
        'n': n,
        'e': e,
        'd': d,
        'v_n': vN,
        'v_e': vE,
        'v_d': vD,
        'satellites': satellites,
        'iar_hyp': iarHyp,
        'iar_ratio': iarRatio,
      };
}

/// GPS Fix RTK builder class
///
class GpsFixRtkBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<GpsFixRtk, GpsFixRtkBuilder> {
  _$GpsFixRtk? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  GpsFixRtkBitfieldValidity _validity = GpsFixRtkBitfieldValidity(0);
  GpsFixRtkBitfieldValidity get validity => _$this._validity;
  set validity(GpsFixRtkBitfieldValidity validity) =>
      _$this._validity = validity;

  GpsFixRtkEnumType _type = GpsFixRtkEnumType(0);
  GpsFixRtkEnumType get type => _$this._type;
  set type(GpsFixRtkEnumType type) => _$this._type = type;

  int _tow = 0;
  int get tow => _$this._tow;
  set tow(int tow) => _$this._tow = tow;

  double _baseLat = 0;
  double get baseLat => _$this._baseLat;
  set baseLat(double baseLat) => _$this._baseLat = baseLat;

  double _baseLon = 0;
  double get baseLon => _$this._baseLon;
  set baseLon(double baseLon) => _$this._baseLon = baseLon;

  double _baseHeight = 0;
  double get baseHeight => _$this._baseHeight;
  set baseHeight(double baseHeight) => _$this._baseHeight = baseHeight;

  double _n = 0;
  double get n => _$this._n;
  set n(double n) => _$this._n = n;

  double _e = 0;
  double get e => _$this._e;
  set e(double e) => _$this._e = e;

  double _d = 0;
  double get d => _$this._d;
  set d(double d) => _$this._d = d;

  double _vN = 0;
  double get vN => _$this._vN;
  set vN(double vN) => _$this._vN = vN;

  double _vE = 0;
  double get vE => _$this._vE;
  set vE(double vE) => _$this._vE = vE;

  double _vD = 0;
  double get vD => _$this._vD;
  set vD(double vD) => _$this._vD = vD;

  int _satellites = 0;
  int get satellites => _$this._satellites;
  set satellites(int satellites) => _$this._satellites = satellites;

  int _iarHyp = 0;
  int get iarHyp => _$this._iarHyp;
  set iarHyp(int iarHyp) => _$this._iarHyp = iarHyp;

  double _iarRatio = 0;
  double get iarRatio => _$this._iarRatio;
  set iarRatio(double iarRatio) => _$this._iarRatio = iarRatio;

  GpsFixRtkBuilder();

  GpsFixRtkBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  GpsFixRtkBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$GpsFixRtk.fromJson(json);
    replace(v);
  }

  @override
  GpsFixRtkBuilder fromJson(core.Map<String, dynamic> json) =>
      GpsFixRtkBuilder.fromJson(json);

  @override
  GpsFixRtkBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      GpsFixRtkBuilder()..copyFromHeader(headerFrom);

  GpsFixRtkBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _validity = _$v!.validity;
      _type = _$v!.type;
      _tow = _$v!.tow;
      _baseLat = _$v!.baseLat;
      _baseLon = _$v!.baseLon;
      _baseHeight = _$v!.baseHeight;
      _n = _$v!.n;
      _e = _$v!.e;
      _d = _$v!.d;
      _vN = _$v!.vN;
      _vE = _$v!.vE;
      _vD = _$v!.vD;
      _satellites = _$v!.satellites;
      _iarHyp = _$v!.iarHyp;
      _iarRatio = _$v!.iarRatio;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GpsFixRtk other) {
    _$v = other as _$GpsFixRtk;
  }

  @override
  void update(void Function(GpsFixRtkBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GpsFixRtk build() {
    final result = _$v ??
        _$GpsFixRtk._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            validity: validity,
            type: type,
            tow: tow,
            baseLat: baseLat,
            baseLon: baseLon,
            baseHeight: baseHeight,
            n: n,
            e: e,
            d: d,
            vN: vN,
            vE: vE,
            vD: vD,
            satellites: satellites,
            iarHyp: iarHyp,
            iarRatio: iarRatio);
    replace(result);
    return result;
  }
}

/// External Navigation Data immutable class
///
class _$ExternalNavData extends ExternalNavData {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final EstimatedState? state;
  @override
  final ExternalNavDataEnumType type;

  factory _$ExternalNavData(
          [void Function(ExternalNavDataBuilder b)? updates]) =>
      (ExternalNavDataBuilder()..update(updates)).build() as _$ExternalNavData;

  factory _$ExternalNavData.fromJson(core.Map<String, dynamic> json) {
    var val = ExternalNavDataBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    EstimatedState? state;
    if (json.containsKey('state') && json['state'] != null) {
      var msgJson = json['state'] as core.Map<String, dynamic>;
      if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
        var msgType = msgJson['abbrev'] as String;
        var builder = messagesBuilders[msgType]?.call();
        builder = builder?.fromJson(msgJson);
        state = builder?.build() as EstimatedState?;
      }
    }
    val.state = state;
    val.type = json.containsKey('type') && json['type'] != null
        ? ExternalNavDataEnumType(json['type'] as int)
        : ExternalNavDataEnumType(0);

    return val.build() as _$ExternalNavData;
  }

  _$ExternalNavData._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      this.state,
      required this.type})
      : super._();

  @override
  ExternalNavData rebuild(void Function(ExternalNavDataBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  ExternalNavDataBuilder toBuilder() => ExternalNavDataBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is ExternalNavData &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        state == other.state &&
        type == other.type;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            state?.hashCode ?? null.hashCode),
        type.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('ExternalNavData')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('state', '$state')
          ..add('type', '$type (Enumerated) [${type.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'ExternalNavData',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'state': state?.toJson(false),
        'type': type.value,
      };
}

/// External Navigation Data builder class
///
class ExternalNavDataBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<ExternalNavData, ExternalNavDataBuilder> {
  _$ExternalNavData? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  EstimatedState? _state;
  EstimatedState? get state => _$this._state;
  set state(EstimatedState? state) => _$this._state = state;

  ExternalNavDataEnumType _type = ExternalNavDataEnumType(0);
  ExternalNavDataEnumType get type => _$this._type;
  set type(ExternalNavDataEnumType type) => _$this._type = type;

  ExternalNavDataBuilder();

  ExternalNavDataBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  ExternalNavDataBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$ExternalNavData.fromJson(json);
    replace(v);
  }

  @override
  ExternalNavDataBuilder fromJson(core.Map<String, dynamic> json) =>
      ExternalNavDataBuilder.fromJson(json);

  @override
  ExternalNavDataBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      ExternalNavDataBuilder()..copyFromHeader(headerFrom);

  ExternalNavDataBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _state = _$v!.state;
      _type = _$v!.type;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(ExternalNavData other) {
    _$v = other as _$ExternalNavData;
  }

  @override
  void update(void Function(ExternalNavDataBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  ExternalNavData build() {
    final result = _$v ??
        _$ExternalNavData._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            state: state,
            type: type);
    replace(result);
    return result;
  }
}

/// Dissolved Oxygen immutable class
///
class _$DissolvedOxygen extends DissolvedOxygen {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$DissolvedOxygen(
          [void Function(DissolvedOxygenBuilder b)? updates]) =>
      (DissolvedOxygenBuilder()..update(updates)).build() as _$DissolvedOxygen;

  factory _$DissolvedOxygen.fromJson(core.Map<String, dynamic> json) {
    var val = DissolvedOxygenBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$DissolvedOxygen;
  }

  _$DissolvedOxygen._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  DissolvedOxygen rebuild(void Function(DissolvedOxygenBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DissolvedOxygenBuilder toBuilder() => DissolvedOxygenBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is DissolvedOxygen &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('DissolvedOxygen')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (µM)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'DissolvedOxygen',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Dissolved Oxygen builder class
///
class DissolvedOxygenBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<DissolvedOxygen, DissolvedOxygenBuilder> {
  _$DissolvedOxygen? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  DissolvedOxygenBuilder();

  DissolvedOxygenBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DissolvedOxygenBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$DissolvedOxygen.fromJson(json);
    replace(v);
  }

  @override
  DissolvedOxygenBuilder fromJson(core.Map<String, dynamic> json) =>
      DissolvedOxygenBuilder.fromJson(json);

  @override
  DissolvedOxygenBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      DissolvedOxygenBuilder()..copyFromHeader(headerFrom);

  DissolvedOxygenBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(DissolvedOxygen other) {
    _$v = other as _$DissolvedOxygen;
  }

  @override
  void update(void Function(DissolvedOxygenBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  DissolvedOxygen build() {
    final result = _$v ??
        _$DissolvedOxygen._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Air Saturation immutable class
///
class _$AirSaturation extends AirSaturation {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$AirSaturation([void Function(AirSaturationBuilder b)? updates]) =>
      (AirSaturationBuilder()..update(updates)).build() as _$AirSaturation;

  factory _$AirSaturation.fromJson(core.Map<String, dynamic> json) {
    var val = AirSaturationBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$AirSaturation;
  }

  _$AirSaturation._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  AirSaturation rebuild(void Function(AirSaturationBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  AirSaturationBuilder toBuilder() => AirSaturationBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is AirSaturation &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('AirSaturation')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (%)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'AirSaturation',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Air Saturation builder class
///
class AirSaturationBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<AirSaturation, AirSaturationBuilder> {
  _$AirSaturation? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  AirSaturationBuilder();

  AirSaturationBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  AirSaturationBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$AirSaturation.fromJson(json);
    replace(v);
  }

  @override
  AirSaturationBuilder fromJson(core.Map<String, dynamic> json) =>
      AirSaturationBuilder.fromJson(json);

  @override
  AirSaturationBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      AirSaturationBuilder()..copyFromHeader(headerFrom);

  AirSaturationBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(AirSaturation other) {
    _$v = other as _$AirSaturation;
  }

  @override
  void update(void Function(AirSaturationBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  AirSaturation build() {
    final result = _$v ??
        _$AirSaturation._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Throttle immutable class
///
class _$Throttle extends Throttle {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$Throttle([void Function(ThrottleBuilder b)? updates]) =>
      (ThrottleBuilder()..update(updates)).build() as _$Throttle;

  factory _$Throttle.fromJson(core.Map<String, dynamic> json) {
    var val = ThrottleBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$Throttle;
  }

  _$Throttle._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  Throttle rebuild(void Function(ThrottleBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  ThrottleBuilder toBuilder() => ThrottleBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Throttle &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Throttle')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (%)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Throttle',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Throttle builder class
///
class ThrottleBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Throttle, ThrottleBuilder> {
  _$Throttle? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  ThrottleBuilder();

  ThrottleBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  ThrottleBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Throttle.fromJson(json);
    replace(v);
  }

  @override
  ThrottleBuilder fromJson(core.Map<String, dynamic> json) =>
      ThrottleBuilder.fromJson(json);

  @override
  ThrottleBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      ThrottleBuilder()..copyFromHeader(headerFrom);

  ThrottleBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Throttle other) {
    _$v = other as _$Throttle;
  }

  @override
  void update(void Function(ThrottleBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Throttle build() {
    final result = _$v ??
        _$Throttle._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// pH immutable class
///
class _$PH extends PH {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$PH([void Function(PHBuilder b)? updates]) =>
      (PHBuilder()..update(updates)).build() as _$PH;

  factory _$PH.fromJson(core.Map<String, dynamic> json) {
    var val = PHBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$PH;
  }

  _$PH._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  PH rebuild(void Function(PHBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  PHBuilder toBuilder() => PHBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is PH &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('PH')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'PH',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// pH builder class
///
class PHBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<PH, PHBuilder> {
  _$PH? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  PHBuilder();

  PHBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  PHBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$PH.fromJson(json);
    replace(v);
  }

  @override
  PHBuilder fromJson(core.Map<String, dynamic> json) =>
      PHBuilder.fromJson(json);

  @override
  PHBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      PHBuilder()..copyFromHeader(headerFrom);

  PHBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(PH other) {
    _$v = other as _$PH;
  }

  @override
  void update(void Function(PHBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  PH build() {
    final result = _$v ??
        _$PH._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Redox Potential immutable class
///
class _$Redox extends Redox {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$Redox([void Function(RedoxBuilder b)? updates]) =>
      (RedoxBuilder()..update(updates)).build() as _$Redox;

  factory _$Redox.fromJson(core.Map<String, dynamic> json) {
    var val = RedoxBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$Redox;
  }

  _$Redox._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  Redox rebuild(void Function(RedoxBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  RedoxBuilder toBuilder() => RedoxBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Redox &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Redox')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (V)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Redox',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Redox Potential builder class
///
class RedoxBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Redox, RedoxBuilder> {
  _$Redox? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  RedoxBuilder();

  RedoxBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  RedoxBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Redox.fromJson(json);
    replace(v);
  }

  @override
  RedoxBuilder fromJson(core.Map<String, dynamic> json) =>
      RedoxBuilder.fromJson(json);

  @override
  RedoxBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      RedoxBuilder()..copyFromHeader(headerFrom);

  RedoxBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Redox other) {
    _$v = other as _$Redox;
  }

  @override
  void update(void Function(RedoxBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Redox build() {
    final result = _$v ??
        _$Redox._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Camera Zoom immutable class
///
class _$CameraZoom extends CameraZoom {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int id;
  @override
  final int zoom;
  @override
  final CameraZoomEnumAction action;

  factory _$CameraZoom([void Function(CameraZoomBuilder b)? updates]) =>
      (CameraZoomBuilder()..update(updates)).build() as _$CameraZoom;

  factory _$CameraZoom.fromJson(core.Map<String, dynamic> json) {
    var val = CameraZoomBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.id = json.containsKey('id') ? json['id'] as int : 0;
    val.zoom = json.containsKey('zoom') ? json['zoom'] as int : 0;
    val.action = json.containsKey('action') && json['action'] != null
        ? CameraZoomEnumAction(json['action'] as int)
        : CameraZoomEnumAction(0);

    return val.build() as _$CameraZoom;
  }

  _$CameraZoom._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.id,
      required this.zoom,
      required this.action})
      : super._();

  @override
  CameraZoom rebuild(void Function(CameraZoomBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  CameraZoomBuilder toBuilder() => CameraZoomBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is CameraZoom &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        id == other.id &&
        zoom == other.zoom &&
        action == other.action;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                id.hashCode),
            zoom.hashCode),
        action.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('CameraZoom')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('id', '$id')
          ..add('zoom', '$zoom')
          ..add('action', '$action (Enumerated) [${action.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'CameraZoom',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'id': id,
        'zoom': zoom,
        'action': action.value,
      };
}

/// Camera Zoom builder class
///
class CameraZoomBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<CameraZoom, CameraZoomBuilder> {
  _$CameraZoom? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _id = 0;
  int get id => _$this._id;
  set id(int id) => _$this._id = id;

  int _zoom = 0;
  int get zoom => _$this._zoom;
  set zoom(int zoom) => _$this._zoom = zoom;

  CameraZoomEnumAction _action = CameraZoomEnumAction(0);
  CameraZoomEnumAction get action => _$this._action;
  set action(CameraZoomEnumAction action) => _$this._action = action;

  CameraZoomBuilder();

  CameraZoomBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  CameraZoomBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$CameraZoom.fromJson(json);
    replace(v);
  }

  @override
  CameraZoomBuilder fromJson(core.Map<String, dynamic> json) =>
      CameraZoomBuilder.fromJson(json);

  @override
  CameraZoomBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      CameraZoomBuilder()..copyFromHeader(headerFrom);

  CameraZoomBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _id = _$v!.id;
      _zoom = _$v!.zoom;
      _action = _$v!.action;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(CameraZoom other) {
    _$v = other as _$CameraZoom;
  }

  @override
  void update(void Function(CameraZoomBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  CameraZoom build() {
    final result = _$v ??
        _$CameraZoom._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            id: id,
            zoom: zoom,
            action: action);
    replace(result);
    return result;
  }
}

/// Set Thruster Actuation immutable class
///
class _$SetThrusterActuation extends SetThrusterActuation {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int id;
  @override
  final double value;

  factory _$SetThrusterActuation(
          [void Function(SetThrusterActuationBuilder b)? updates]) =>
      (SetThrusterActuationBuilder()..update(updates)).build()
          as _$SetThrusterActuation;

  factory _$SetThrusterActuation.fromJson(core.Map<String, dynamic> json) {
    var val = SetThrusterActuationBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.id = json.containsKey('id') ? json['id'] as int : 0;
    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$SetThrusterActuation;
  }

  _$SetThrusterActuation._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.id,
      required this.value})
      : super._();

  @override
  SetThrusterActuation rebuild(
          void Function(SetThrusterActuationBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SetThrusterActuationBuilder toBuilder() =>
      SetThrusterActuationBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is SetThrusterActuation &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        id == other.id &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            id.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('SetThrusterActuation')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('id', '$id')
          ..add('value', '$value'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'SetThrusterActuation',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'id': id,
        'value': value,
      };
}

/// Set Thruster Actuation builder class
///
class SetThrusterActuationBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<SetThrusterActuation,
            SetThrusterActuationBuilder> {
  _$SetThrusterActuation? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _id = 0;
  int get id => _$this._id;
  set id(int id) => _$this._id = id;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  SetThrusterActuationBuilder();

  SetThrusterActuationBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SetThrusterActuationBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$SetThrusterActuation.fromJson(json);
    replace(v);
  }

  @override
  SetThrusterActuationBuilder fromJson(core.Map<String, dynamic> json) =>
      SetThrusterActuationBuilder.fromJson(json);

  @override
  SetThrusterActuationBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SetThrusterActuationBuilder()..copyFromHeader(headerFrom);

  SetThrusterActuationBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _id = _$v!.id;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(SetThrusterActuation other) {
    _$v = other as _$SetThrusterActuation;
  }

  @override
  void update(void Function(SetThrusterActuationBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  SetThrusterActuation build() {
    final result = _$v ??
        _$SetThrusterActuation._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            id: id,
            value: value);
    replace(result);
    return result;
  }
}

/// Set Servo Position immutable class
///
class _$SetServoPosition extends SetServoPosition {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int id;
  @override
  final double value;

  factory _$SetServoPosition(
          [void Function(SetServoPositionBuilder b)? updates]) =>
      (SetServoPositionBuilder()..update(updates)).build()
          as _$SetServoPosition;

  factory _$SetServoPosition.fromJson(core.Map<String, dynamic> json) {
    var val = SetServoPositionBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.id = json.containsKey('id') ? json['id'] as int : 0;
    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$SetServoPosition;
  }

  _$SetServoPosition._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.id,
      required this.value})
      : super._();

  @override
  SetServoPosition rebuild(void Function(SetServoPositionBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SetServoPositionBuilder toBuilder() =>
      SetServoPositionBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is SetServoPosition &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        id == other.id &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            id.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('SetServoPosition')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('id', '$id')
          ..add('value', '$value (rad) [${value * 180.0 / math.pi} (deg)]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'SetServoPosition',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'id': id,
        'value': value,
      };
}

/// Set Servo Position builder class
///
class SetServoPositionBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<SetServoPosition, SetServoPositionBuilder> {
  _$SetServoPosition? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _id = 0;
  int get id => _$this._id;
  set id(int id) => _$this._id = id;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  SetServoPositionBuilder();

  SetServoPositionBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SetServoPositionBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$SetServoPosition.fromJson(json);
    replace(v);
  }

  @override
  SetServoPositionBuilder fromJson(core.Map<String, dynamic> json) =>
      SetServoPositionBuilder.fromJson(json);

  @override
  SetServoPositionBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SetServoPositionBuilder()..copyFromHeader(headerFrom);

  SetServoPositionBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _id = _$v!.id;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(SetServoPosition other) {
    _$v = other as _$SetServoPosition;
  }

  @override
  void update(void Function(SetServoPositionBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  SetServoPosition build() {
    final result = _$v ??
        _$SetServoPosition._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            id: id,
            value: value);
    replace(result);
    return result;
  }
}

/// Set Control Surface Deflection immutable class
///
class _$SetControlSurfaceDeflection extends SetControlSurfaceDeflection {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int id;
  @override
  final double angle;

  factory _$SetControlSurfaceDeflection(
          [void Function(SetControlSurfaceDeflectionBuilder b)? updates]) =>
      (SetControlSurfaceDeflectionBuilder()..update(updates)).build()
          as _$SetControlSurfaceDeflection;

  factory _$SetControlSurfaceDeflection.fromJson(
      core.Map<String, dynamic> json) {
    var val = SetControlSurfaceDeflectionBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.id = json.containsKey('id') ? json['id'] as int : 0;
    val.angle = json.containsKey('angle') ? json['angle'] as double : 0;

    return val.build() as _$SetControlSurfaceDeflection;
  }

  _$SetControlSurfaceDeflection._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.id,
      required this.angle})
      : super._();

  @override
  SetControlSurfaceDeflection rebuild(
          void Function(SetControlSurfaceDeflectionBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SetControlSurfaceDeflectionBuilder toBuilder() =>
      SetControlSurfaceDeflectionBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is SetControlSurfaceDeflection &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        id == other.id &&
        (angle == other.angle || angle - other.angle <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            id.hashCode),
        angle.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('SetControlSurfaceDeflection')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('id', '$id')
          ..add('angle', '$angle (rad) [${angle * 180.0 / math.pi} (deg)]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'SetControlSurfaceDeflection',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'id': id,
        'angle': angle,
      };
}

/// Set Control Surface Deflection builder class
///
class SetControlSurfaceDeflectionBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<SetControlSurfaceDeflection,
            SetControlSurfaceDeflectionBuilder> {
  _$SetControlSurfaceDeflection? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _id = 0;
  int get id => _$this._id;
  set id(int id) => _$this._id = id;

  double _angle = 0;
  double get angle => _$this._angle;
  set angle(double angle) => _$this._angle = angle;

  SetControlSurfaceDeflectionBuilder();

  SetControlSurfaceDeflectionBuilder.fromHeader(
      ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SetControlSurfaceDeflectionBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$SetControlSurfaceDeflection.fromJson(json);
    replace(v);
  }

  @override
  SetControlSurfaceDeflectionBuilder fromJson(core.Map<String, dynamic> json) =>
      SetControlSurfaceDeflectionBuilder.fromJson(json);

  @override
  SetControlSurfaceDeflectionBuilder newInstance(
          [ImcBuilderHeaderPart? headerFrom]) =>
      SetControlSurfaceDeflectionBuilder()..copyFromHeader(headerFrom);

  SetControlSurfaceDeflectionBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _id = _$v!.id;
      _angle = _$v!.angle;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(SetControlSurfaceDeflection other) {
    _$v = other as _$SetControlSurfaceDeflection;
  }

  @override
  void update(void Function(SetControlSurfaceDeflectionBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  SetControlSurfaceDeflection build() {
    final result = _$v ??
        _$SetControlSurfaceDeflection._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            id: id,
            angle: angle);
    replace(result);
    return result;
  }
}

/// Remote Actions Request immutable class
///
class _$RemoteActionsRequest extends RemoteActionsRequest {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final RemoteActionsRequestEnumOp op;
  @override
  final String actions;

  factory _$RemoteActionsRequest(
          [void Function(RemoteActionsRequestBuilder b)? updates]) =>
      (RemoteActionsRequestBuilder()..update(updates)).build()
          as _$RemoteActionsRequest;

  factory _$RemoteActionsRequest.fromJson(core.Map<String, dynamic> json) {
    var val = RemoteActionsRequestBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.op = json.containsKey('op') && json['op'] != null
        ? RemoteActionsRequestEnumOp(json['op'] as int)
        : RemoteActionsRequestEnumOp(0);
    val.actions = json.containsKey('actions') && json['actions'] != null
        ? json['actions'] as String
        : '';

    return val.build() as _$RemoteActionsRequest;
  }

  _$RemoteActionsRequest._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.op,
      required this.actions})
      : super._();

  @override
  RemoteActionsRequest rebuild(
          void Function(RemoteActionsRequestBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  RemoteActionsRequestBuilder toBuilder() =>
      RemoteActionsRequestBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is RemoteActionsRequest &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        op == other.op &&
        actions == other.actions;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            op.hashCode),
        actions.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('RemoteActionsRequest')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]')
          ..add('actions', '$actions (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'RemoteActionsRequest',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'op': op.value,
        'actions': actions,
      };
}

/// Remote Actions Request builder class
///
class RemoteActionsRequestBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<RemoteActionsRequest,
            RemoteActionsRequestBuilder> {
  _$RemoteActionsRequest? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  RemoteActionsRequestEnumOp _op = RemoteActionsRequestEnumOp(0);
  RemoteActionsRequestEnumOp get op => _$this._op;
  set op(RemoteActionsRequestEnumOp op) => _$this._op = op;

  String _actions = '';
  String get actions => _$this._actions;
  set actions(String actions) => _$this._actions = actions;

  RemoteActionsRequestBuilder();

  RemoteActionsRequestBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  RemoteActionsRequestBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$RemoteActionsRequest.fromJson(json);
    replace(v);
  }

  @override
  RemoteActionsRequestBuilder fromJson(core.Map<String, dynamic> json) =>
      RemoteActionsRequestBuilder.fromJson(json);

  @override
  RemoteActionsRequestBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      RemoteActionsRequestBuilder()..copyFromHeader(headerFrom);

  RemoteActionsRequestBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _op = _$v!.op;
      _actions = _$v!.actions;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(RemoteActionsRequest other) {
    _$v = other as _$RemoteActionsRequest;
  }

  @override
  void update(void Function(RemoteActionsRequestBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  RemoteActionsRequest build() {
    final result = _$v ??
        _$RemoteActionsRequest._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            op: op,
            actions: actions);
    replace(result);
    return result;
  }
}

/// Remote Actions immutable class
///
class _$RemoteActions extends RemoteActions {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String actions;

  factory _$RemoteActions([void Function(RemoteActionsBuilder b)? updates]) =>
      (RemoteActionsBuilder()..update(updates)).build() as _$RemoteActions;

  factory _$RemoteActions.fromJson(core.Map<String, dynamic> json) {
    var val = RemoteActionsBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.actions = json.containsKey('actions') && json['actions'] != null
        ? json['actions'] as String
        : '';

    return val.build() as _$RemoteActions;
  }

  _$RemoteActions._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.actions})
      : super._();

  @override
  RemoteActions rebuild(void Function(RemoteActionsBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  RemoteActionsBuilder toBuilder() => RemoteActionsBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is RemoteActions &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        actions == other.actions;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        actions.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('RemoteActions')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('actions', '$actions (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'RemoteActions',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'actions': actions,
      };
}

/// Remote Actions builder class
///
class RemoteActionsBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<RemoteActions, RemoteActionsBuilder> {
  _$RemoteActions? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _actions = '';
  String get actions => _$this._actions;
  set actions(String actions) => _$this._actions = actions;

  RemoteActionsBuilder();

  RemoteActionsBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  RemoteActionsBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$RemoteActions.fromJson(json);
    replace(v);
  }

  @override
  RemoteActionsBuilder fromJson(core.Map<String, dynamic> json) =>
      RemoteActionsBuilder.fromJson(json);

  @override
  RemoteActionsBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      RemoteActionsBuilder()..copyFromHeader(headerFrom);

  RemoteActionsBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _actions = _$v!.actions;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(RemoteActions other) {
    _$v = other as _$RemoteActions;
  }

  @override
  void update(void Function(RemoteActionsBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  RemoteActions build() {
    final result = _$v ??
        _$RemoteActions._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            actions: actions);
    replace(result);
    return result;
  }
}

/// Button Event immutable class
///
class _$ButtonEvent extends ButtonEvent {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int button;
  @override
  final int value;

  factory _$ButtonEvent([void Function(ButtonEventBuilder b)? updates]) =>
      (ButtonEventBuilder()..update(updates)).build() as _$ButtonEvent;

  factory _$ButtonEvent.fromJson(core.Map<String, dynamic> json) {
    var val = ButtonEventBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.button = json.containsKey('button') ? json['button'] as int : 0;
    val.value = json.containsKey('value') ? json['value'] as int : 0;

    return val.build() as _$ButtonEvent;
  }

  _$ButtonEvent._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.button,
      required this.value})
      : super._();

  @override
  ButtonEvent rebuild(void Function(ButtonEventBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  ButtonEventBuilder toBuilder() => ButtonEventBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is ButtonEvent &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        button == other.button &&
        value == other.value;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            button.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('ButtonEvent')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('button', '$button')
          ..add('value', '$value'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'ButtonEvent',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'button': button,
        'value': value,
      };
}

/// Button Event builder class
///
class ButtonEventBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<ButtonEvent, ButtonEventBuilder> {
  _$ButtonEvent? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _button = 0;
  int get button => _$this._button;
  set button(int button) => _$this._button = button;

  int _value = 0;
  int get value => _$this._value;
  set value(int value) => _$this._value = value;

  ButtonEventBuilder();

  ButtonEventBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  ButtonEventBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$ButtonEvent.fromJson(json);
    replace(v);
  }

  @override
  ButtonEventBuilder fromJson(core.Map<String, dynamic> json) =>
      ButtonEventBuilder.fromJson(json);

  @override
  ButtonEventBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      ButtonEventBuilder()..copyFromHeader(headerFrom);

  ButtonEventBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _button = _$v!.button;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(ButtonEvent other) {
    _$v = other as _$ButtonEvent;
  }

  @override
  void update(void Function(ButtonEventBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  ButtonEvent build() {
    final result = _$v ??
        _$ButtonEvent._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            button: button,
            value: value);
    replace(result);
    return result;
  }
}

/// LCD Control immutable class
///
class _$LcdControl extends LcdControl {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final LcdControlEnumOp op;
  @override
  final String text;

  factory _$LcdControl([void Function(LcdControlBuilder b)? updates]) =>
      (LcdControlBuilder()..update(updates)).build() as _$LcdControl;

  factory _$LcdControl.fromJson(core.Map<String, dynamic> json) {
    var val = LcdControlBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.op = json.containsKey('op') && json['op'] != null
        ? LcdControlEnumOp(json['op'] as int)
        : LcdControlEnumOp(0);
    val.text = json.containsKey('text') && json['text'] != null
        ? json['text'] as String
        : '';

    return val.build() as _$LcdControl;
  }

  _$LcdControl._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.op,
      required this.text})
      : super._();

  @override
  LcdControl rebuild(void Function(LcdControlBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  LcdControlBuilder toBuilder() => LcdControlBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is LcdControl &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        op == other.op &&
        text == other.text;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            op.hashCode),
        text.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('LcdControl')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]')
          ..add('text', text))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'LcdControl',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'op': op.value,
        'text': text,
      };
}

/// LCD Control builder class
///
class LcdControlBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<LcdControl, LcdControlBuilder> {
  _$LcdControl? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  LcdControlEnumOp _op = LcdControlEnumOp(0);
  LcdControlEnumOp get op => _$this._op;
  set op(LcdControlEnumOp op) => _$this._op = op;

  String _text = '';
  String get text => _$this._text;
  set text(String text) => _$this._text = text;

  LcdControlBuilder();

  LcdControlBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  LcdControlBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$LcdControl.fromJson(json);
    replace(v);
  }

  @override
  LcdControlBuilder fromJson(core.Map<String, dynamic> json) =>
      LcdControlBuilder.fromJson(json);

  @override
  LcdControlBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      LcdControlBuilder()..copyFromHeader(headerFrom);

  LcdControlBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _op = _$v!.op;
      _text = _$v!.text;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(LcdControl other) {
    _$v = other as _$LcdControl;
  }

  @override
  void update(void Function(LcdControlBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  LcdControl build() {
    final result = _$v ??
        _$LcdControl._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            op: op,
            text: text);
    replace(result);
    return result;
  }
}

/// Power Operation immutable class
///
class _$PowerOperation extends PowerOperation {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final PowerOperationEnumOp op;
  @override
  final double timeRemain;
  @override
  final double schedTime;

  factory _$PowerOperation([void Function(PowerOperationBuilder b)? updates]) =>
      (PowerOperationBuilder()..update(updates)).build() as _$PowerOperation;

  factory _$PowerOperation.fromJson(core.Map<String, dynamic> json) {
    var val = PowerOperationBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.op = json.containsKey('op') && json['op'] != null
        ? PowerOperationEnumOp(json['op'] as int)
        : PowerOperationEnumOp(0);
    val.timeRemain =
        json.containsKey('time_remain') ? json['time_remain'] as double : 0;
    val.schedTime =
        json.containsKey('sched_time') ? json['sched_time'] as double : 0;

    return val.build() as _$PowerOperation;
  }

  _$PowerOperation._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.op,
      required this.timeRemain,
      required this.schedTime})
      : super._();

  @override
  PowerOperation rebuild(void Function(PowerOperationBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  PowerOperationBuilder toBuilder() => PowerOperationBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is PowerOperation &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        op == other.op &&
        (timeRemain == other.timeRemain ||
            timeRemain - other.timeRemain <= 1E-7) &&
        (schedTime == other.schedTime || schedTime - other.schedTime <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                op.hashCode),
            timeRemain.hashCode),
        schedTime.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('PowerOperation')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]')
          ..add('timeRemain', '$timeRemain (s)')
          ..add('schedTime', '$schedTime (s)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'PowerOperation',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'op': op.value,
        'time_remain': timeRemain,
        'sched_time': schedTime,
      };
}

/// Power Operation builder class
///
class PowerOperationBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<PowerOperation, PowerOperationBuilder> {
  _$PowerOperation? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  PowerOperationEnumOp _op = PowerOperationEnumOp(0);
  PowerOperationEnumOp get op => _$this._op;
  set op(PowerOperationEnumOp op) => _$this._op = op;

  double _timeRemain = 0;
  double get timeRemain => _$this._timeRemain;
  set timeRemain(double timeRemain) => _$this._timeRemain = timeRemain;

  double _schedTime = 0;
  double get schedTime => _$this._schedTime;
  set schedTime(double schedTime) => _$this._schedTime = schedTime;

  PowerOperationBuilder();

  PowerOperationBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  PowerOperationBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$PowerOperation.fromJson(json);
    replace(v);
  }

  @override
  PowerOperationBuilder fromJson(core.Map<String, dynamic> json) =>
      PowerOperationBuilder.fromJson(json);

  @override
  PowerOperationBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      PowerOperationBuilder()..copyFromHeader(headerFrom);

  PowerOperationBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _op = _$v!.op;
      _timeRemain = _$v!.timeRemain;
      _schedTime = _$v!.schedTime;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(PowerOperation other) {
    _$v = other as _$PowerOperation;
  }

  @override
  void update(void Function(PowerOperationBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  PowerOperation build() {
    final result = _$v ??
        _$PowerOperation._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            op: op,
            timeRemain: timeRemain,
            schedTime: schedTime);
    replace(result);
    return result;
  }
}

/// Power Channel Control immutable class
///
class _$PowerChannelControl extends PowerChannelControl {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String name;
  @override
  final PowerChannelControlEnumOp op;
  @override
  final double schedTime;

  factory _$PowerChannelControl(
          [void Function(PowerChannelControlBuilder b)? updates]) =>
      (PowerChannelControlBuilder()..update(updates)).build()
          as _$PowerChannelControl;

  factory _$PowerChannelControl.fromJson(core.Map<String, dynamic> json) {
    var val = PowerChannelControlBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.name = json.containsKey('name') && json['name'] != null
        ? json['name'] as String
        : '';
    val.op = json.containsKey('op') && json['op'] != null
        ? PowerChannelControlEnumOp(json['op'] as int)
        : PowerChannelControlEnumOp(0);
    val.schedTime =
        json.containsKey('sched_time') ? json['sched_time'] as double : 0;

    return val.build() as _$PowerChannelControl;
  }

  _$PowerChannelControl._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.name,
      required this.op,
      required this.schedTime})
      : super._();

  @override
  PowerChannelControl rebuild(
          void Function(PowerChannelControlBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  PowerChannelControlBuilder toBuilder() =>
      PowerChannelControlBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is PowerChannelControl &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        name == other.name &&
        op == other.op &&
        (schedTime == other.schedTime || schedTime - other.schedTime <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                name.hashCode),
            op.hashCode),
        schedTime.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('PowerChannelControl')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('name', name)
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]')
          ..add('schedTime', '$schedTime (s)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'PowerChannelControl',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'name': name,
        'op': op.value,
        'sched_time': schedTime,
      };
}

/// Power Channel Control builder class
///
class PowerChannelControlBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<PowerChannelControl,
            PowerChannelControlBuilder> {
  _$PowerChannelControl? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _name = '';
  String get name => _$this._name;
  set name(String name) => _$this._name = name;

  PowerChannelControlEnumOp _op = PowerChannelControlEnumOp(0);
  PowerChannelControlEnumOp get op => _$this._op;
  set op(PowerChannelControlEnumOp op) => _$this._op = op;

  double _schedTime = 0;
  double get schedTime => _$this._schedTime;
  set schedTime(double schedTime) => _$this._schedTime = schedTime;

  PowerChannelControlBuilder();

  PowerChannelControlBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  PowerChannelControlBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$PowerChannelControl.fromJson(json);
    replace(v);
  }

  @override
  PowerChannelControlBuilder fromJson(core.Map<String, dynamic> json) =>
      PowerChannelControlBuilder.fromJson(json);

  @override
  PowerChannelControlBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      PowerChannelControlBuilder()..copyFromHeader(headerFrom);

  PowerChannelControlBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _name = _$v!.name;
      _op = _$v!.op;
      _schedTime = _$v!.schedTime;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(PowerChannelControl other) {
    _$v = other as _$PowerChannelControl;
  }

  @override
  void update(void Function(PowerChannelControlBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  PowerChannelControl build() {
    final result = _$v ??
        _$PowerChannelControl._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            name: name,
            op: op,
            schedTime: schedTime);
    replace(result);
    return result;
  }
}

/// Query Power Channel State immutable class
///
class _$QueryPowerChannelState extends QueryPowerChannelState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  factory _$QueryPowerChannelState(
          [void Function(QueryPowerChannelStateBuilder b)? updates]) =>
      (QueryPowerChannelStateBuilder()..update(updates)).build()
          as _$QueryPowerChannelState;

  factory _$QueryPowerChannelState.fromJson(core.Map<String, dynamic> json) {
    var val = QueryPowerChannelStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    return val.build() as _$QueryPowerChannelState;
  }

  _$QueryPowerChannelState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId})
      : super._();

  @override
  QueryPowerChannelState rebuild(
          void Function(QueryPowerChannelStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  QueryPowerChannelStateBuilder toBuilder() =>
      QueryPowerChannelStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is QueryPowerChannelState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc($jc($jc(0, timestamp?.hashCode ?? null.hashCode), src.hashCode),
                srcEnt.hashCode),
            dst.hashCode),
        dstEnt.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('QueryPowerChannelState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'QueryPowerChannelState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
      };
}

/// Query Power Channel State builder class
///
class QueryPowerChannelStateBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<QueryPowerChannelState,
            QueryPowerChannelStateBuilder> {
  _$QueryPowerChannelState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  QueryPowerChannelStateBuilder();

  QueryPowerChannelStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  QueryPowerChannelStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$QueryPowerChannelState.fromJson(json);
    replace(v);
  }

  @override
  QueryPowerChannelStateBuilder fromJson(core.Map<String, dynamic> json) =>
      QueryPowerChannelStateBuilder.fromJson(json);

  @override
  QueryPowerChannelStateBuilder newInstance(
          [ImcBuilderHeaderPart? headerFrom]) =>
      QueryPowerChannelStateBuilder()..copyFromHeader(headerFrom);

  QueryPowerChannelStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(QueryPowerChannelState other) {
    _$v = other as _$QueryPowerChannelState;
  }

  @override
  void update(void Function(QueryPowerChannelStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  QueryPowerChannelState build() {
    final result = _$v ??
        _$QueryPowerChannelState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt);
    replace(result);
    return result;
  }
}

/// Power Channel State immutable class
///
class _$PowerChannelState extends PowerChannelState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String name;
  @override
  final PowerChannelStateEnumState state;

  factory _$PowerChannelState(
          [void Function(PowerChannelStateBuilder b)? updates]) =>
      (PowerChannelStateBuilder()..update(updates)).build()
          as _$PowerChannelState;

  factory _$PowerChannelState.fromJson(core.Map<String, dynamic> json) {
    var val = PowerChannelStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.name = json.containsKey('name') && json['name'] != null
        ? json['name'] as String
        : '';
    val.state = json.containsKey('state') && json['state'] != null
        ? PowerChannelStateEnumState(json['state'] as int)
        : PowerChannelStateEnumState(0);

    return val.build() as _$PowerChannelState;
  }

  _$PowerChannelState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.name,
      required this.state})
      : super._();

  @override
  PowerChannelState rebuild(
          void Function(PowerChannelStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  PowerChannelStateBuilder toBuilder() =>
      PowerChannelStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is PowerChannelState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        name == other.name &&
        state == other.state;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            name.hashCode),
        state.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('PowerChannelState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('name', name)
          ..add('state', '$state (Enumerated) [${state.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'PowerChannelState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'name': name,
        'state': state.value,
      };
}

/// Power Channel State builder class
///
class PowerChannelStateBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<PowerChannelState, PowerChannelStateBuilder> {
  _$PowerChannelState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _name = '';
  String get name => _$this._name;
  set name(String name) => _$this._name = name;

  PowerChannelStateEnumState _state = PowerChannelStateEnumState(0);
  PowerChannelStateEnumState get state => _$this._state;
  set state(PowerChannelStateEnumState state) => _$this._state = state;

  PowerChannelStateBuilder();

  PowerChannelStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  PowerChannelStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$PowerChannelState.fromJson(json);
    replace(v);
  }

  @override
  PowerChannelStateBuilder fromJson(core.Map<String, dynamic> json) =>
      PowerChannelStateBuilder.fromJson(json);

  @override
  PowerChannelStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      PowerChannelStateBuilder()..copyFromHeader(headerFrom);

  PowerChannelStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _name = _$v!.name;
      _state = _$v!.state;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(PowerChannelState other) {
    _$v = other as _$PowerChannelState;
  }

  @override
  void update(void Function(PowerChannelStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  PowerChannelState build() {
    final result = _$v ??
        _$PowerChannelState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            name: name,
            state: state);
    replace(result);
    return result;
  }
}

/// LED Brightness immutable class
///
class _$LedBrightness extends LedBrightness {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String name;
  @override
  final int value;

  factory _$LedBrightness([void Function(LedBrightnessBuilder b)? updates]) =>
      (LedBrightnessBuilder()..update(updates)).build() as _$LedBrightness;

  factory _$LedBrightness.fromJson(core.Map<String, dynamic> json) {
    var val = LedBrightnessBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.name = json.containsKey('name') && json['name'] != null
        ? json['name'] as String
        : '';
    val.value = json.containsKey('value') ? json['value'] as int : 0;

    return val.build() as _$LedBrightness;
  }

  _$LedBrightness._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.name,
      required this.value})
      : super._();

  @override
  LedBrightness rebuild(void Function(LedBrightnessBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  LedBrightnessBuilder toBuilder() => LedBrightnessBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is LedBrightness &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        name == other.name &&
        value == other.value;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            name.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('LedBrightness')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('name', name)
          ..add('value', '$value'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'LedBrightness',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'name': name,
        'value': value,
      };
}

/// LED Brightness builder class
///
class LedBrightnessBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<LedBrightness, LedBrightnessBuilder> {
  _$LedBrightness? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _name = '';
  String get name => _$this._name;
  set name(String name) => _$this._name = name;

  int _value = 0;
  int get value => _$this._value;
  set value(int value) => _$this._value = value;

  LedBrightnessBuilder();

  LedBrightnessBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  LedBrightnessBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$LedBrightness.fromJson(json);
    replace(v);
  }

  @override
  LedBrightnessBuilder fromJson(core.Map<String, dynamic> json) =>
      LedBrightnessBuilder.fromJson(json);

  @override
  LedBrightnessBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      LedBrightnessBuilder()..copyFromHeader(headerFrom);

  LedBrightnessBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _name = _$v!.name;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(LedBrightness other) {
    _$v = other as _$LedBrightness;
  }

  @override
  void update(void Function(LedBrightnessBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  LedBrightness build() {
    final result = _$v ??
        _$LedBrightness._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            name: name,
            value: value);
    replace(result);
    return result;
  }
}

/// Query LED Brightness immutable class
///
class _$QueryLedBrightness extends QueryLedBrightness {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String name;

  factory _$QueryLedBrightness(
          [void Function(QueryLedBrightnessBuilder b)? updates]) =>
      (QueryLedBrightnessBuilder()..update(updates)).build()
          as _$QueryLedBrightness;

  factory _$QueryLedBrightness.fromJson(core.Map<String, dynamic> json) {
    var val = QueryLedBrightnessBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.name = json.containsKey('name') && json['name'] != null
        ? json['name'] as String
        : '';

    return val.build() as _$QueryLedBrightness;
  }

  _$QueryLedBrightness._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.name})
      : super._();

  @override
  QueryLedBrightness rebuild(
          void Function(QueryLedBrightnessBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  QueryLedBrightnessBuilder toBuilder() =>
      QueryLedBrightnessBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is QueryLedBrightness &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        name == other.name;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        name.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('QueryLedBrightness')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('name', name))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'QueryLedBrightness',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'name': name,
      };
}

/// Query LED Brightness builder class
///
class QueryLedBrightnessBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<QueryLedBrightness, QueryLedBrightnessBuilder> {
  _$QueryLedBrightness? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _name = '';
  String get name => _$this._name;
  set name(String name) => _$this._name = name;

  QueryLedBrightnessBuilder();

  QueryLedBrightnessBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  QueryLedBrightnessBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$QueryLedBrightness.fromJson(json);
    replace(v);
  }

  @override
  QueryLedBrightnessBuilder fromJson(core.Map<String, dynamic> json) =>
      QueryLedBrightnessBuilder.fromJson(json);

  @override
  QueryLedBrightnessBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      QueryLedBrightnessBuilder()..copyFromHeader(headerFrom);

  QueryLedBrightnessBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _name = _$v!.name;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(QueryLedBrightness other) {
    _$v = other as _$QueryLedBrightness;
  }

  @override
  void update(void Function(QueryLedBrightnessBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  QueryLedBrightness build() {
    final result = _$v ??
        _$QueryLedBrightness._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            name: name);
    replace(result);
    return result;
  }
}

/// Set LED Brightness immutable class
///
class _$SetLedBrightness extends SetLedBrightness {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String name;
  @override
  final int value;

  factory _$SetLedBrightness(
          [void Function(SetLedBrightnessBuilder b)? updates]) =>
      (SetLedBrightnessBuilder()..update(updates)).build()
          as _$SetLedBrightness;

  factory _$SetLedBrightness.fromJson(core.Map<String, dynamic> json) {
    var val = SetLedBrightnessBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.name = json.containsKey('name') && json['name'] != null
        ? json['name'] as String
        : '';
    val.value = json.containsKey('value') ? json['value'] as int : 0;

    return val.build() as _$SetLedBrightness;
  }

  _$SetLedBrightness._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.name,
      required this.value})
      : super._();

  @override
  SetLedBrightness rebuild(void Function(SetLedBrightnessBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SetLedBrightnessBuilder toBuilder() =>
      SetLedBrightnessBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is SetLedBrightness &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        name == other.name &&
        value == other.value;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            name.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('SetLedBrightness')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('name', name)
          ..add('value', '$value'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'SetLedBrightness',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'name': name,
        'value': value,
      };
}

/// Set LED Brightness builder class
///
class SetLedBrightnessBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<SetLedBrightness, SetLedBrightnessBuilder> {
  _$SetLedBrightness? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _name = '';
  String get name => _$this._name;
  set name(String name) => _$this._name = name;

  int _value = 0;
  int get value => _$this._value;
  set value(int value) => _$this._value = value;

  SetLedBrightnessBuilder();

  SetLedBrightnessBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SetLedBrightnessBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$SetLedBrightness.fromJson(json);
    replace(v);
  }

  @override
  SetLedBrightnessBuilder fromJson(core.Map<String, dynamic> json) =>
      SetLedBrightnessBuilder.fromJson(json);

  @override
  SetLedBrightnessBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SetLedBrightnessBuilder()..copyFromHeader(headerFrom);

  SetLedBrightnessBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _name = _$v!.name;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(SetLedBrightness other) {
    _$v = other as _$SetLedBrightness;
  }

  @override
  void update(void Function(SetLedBrightnessBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  SetLedBrightness build() {
    final result = _$v ??
        _$SetLedBrightness._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            name: name,
            value: value);
    replace(result);
    return result;
  }
}

/// Set PWM immutable class
///
class _$SetPWM extends SetPWM {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int id;
  @override
  final int period;
  @override
  final int dutyCycle;

  factory _$SetPWM([void Function(SetPWMBuilder b)? updates]) =>
      (SetPWMBuilder()..update(updates)).build() as _$SetPWM;

  factory _$SetPWM.fromJson(core.Map<String, dynamic> json) {
    var val = SetPWMBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.id = json.containsKey('id') ? json['id'] as int : 0;
    val.period = json.containsKey('period') ? json['period'] as int : 0;
    val.dutyCycle =
        json.containsKey('duty_cycle') ? json['duty_cycle'] as int : 0;

    return val.build() as _$SetPWM;
  }

  _$SetPWM._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.id,
      required this.period,
      required this.dutyCycle})
      : super._();

  @override
  SetPWM rebuild(void Function(SetPWMBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SetPWMBuilder toBuilder() => SetPWMBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is SetPWM &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        id == other.id &&
        period == other.period &&
        dutyCycle == other.dutyCycle;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                id.hashCode),
            period.hashCode),
        dutyCycle.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('SetPWM')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('id', '$id')
          ..add('period', '$period (µs)')
          ..add('dutyCycle', '$dutyCycle (µs)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'SetPWM',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'id': id,
        'period': period,
        'duty_cycle': dutyCycle,
      };
}

/// Set PWM builder class
///
class SetPWMBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<SetPWM, SetPWMBuilder> {
  _$SetPWM? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _id = 0;
  int get id => _$this._id;
  set id(int id) => _$this._id = id;

  int _period = 0;
  int get period => _$this._period;
  set period(int period) => _$this._period = period;

  int _dutyCycle = 0;
  int get dutyCycle => _$this._dutyCycle;
  set dutyCycle(int dutyCycle) => _$this._dutyCycle = dutyCycle;

  SetPWMBuilder();

  SetPWMBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SetPWMBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$SetPWM.fromJson(json);
    replace(v);
  }

  @override
  SetPWMBuilder fromJson(core.Map<String, dynamic> json) =>
      SetPWMBuilder.fromJson(json);

  @override
  SetPWMBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SetPWMBuilder()..copyFromHeader(headerFrom);

  SetPWMBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _id = _$v!.id;
      _period = _$v!.period;
      _dutyCycle = _$v!.dutyCycle;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(SetPWM other) {
    _$v = other as _$SetPWM;
  }

  @override
  void update(void Function(SetPWMBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  SetPWM build() {
    final result = _$v ??
        _$SetPWM._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            id: id,
            period: period,
            dutyCycle: dutyCycle);
    replace(result);
    return result;
  }
}

/// PWM immutable class
///
class _$PWM extends PWM {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int id;
  @override
  final int period;
  @override
  final int dutyCycle;

  factory _$PWM([void Function(PWMBuilder b)? updates]) =>
      (PWMBuilder()..update(updates)).build() as _$PWM;

  factory _$PWM.fromJson(core.Map<String, dynamic> json) {
    var val = PWMBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.id = json.containsKey('id') ? json['id'] as int : 0;
    val.period = json.containsKey('period') ? json['period'] as int : 0;
    val.dutyCycle =
        json.containsKey('duty_cycle') ? json['duty_cycle'] as int : 0;

    return val.build() as _$PWM;
  }

  _$PWM._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.id,
      required this.period,
      required this.dutyCycle})
      : super._();

  @override
  PWM rebuild(void Function(PWMBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  PWMBuilder toBuilder() => PWMBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is PWM &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        id == other.id &&
        period == other.period &&
        dutyCycle == other.dutyCycle;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                id.hashCode),
            period.hashCode),
        dutyCycle.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('PWM')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('id', '$id')
          ..add('period', '$period (µs)')
          ..add('dutyCycle', '$dutyCycle (µs)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'PWM',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'id': id,
        'period': period,
        'duty_cycle': dutyCycle,
      };
}

/// PWM builder class
///
class PWMBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<PWM, PWMBuilder> {
  _$PWM? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _id = 0;
  int get id => _$this._id;
  set id(int id) => _$this._id = id;

  int _period = 0;
  int get period => _$this._period;
  set period(int period) => _$this._period = period;

  int _dutyCycle = 0;
  int get dutyCycle => _$this._dutyCycle;
  set dutyCycle(int dutyCycle) => _$this._dutyCycle = dutyCycle;

  PWMBuilder();

  PWMBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  PWMBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$PWM.fromJson(json);
    replace(v);
  }

  @override
  PWMBuilder fromJson(core.Map<String, dynamic> json) =>
      PWMBuilder.fromJson(json);

  @override
  PWMBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      PWMBuilder()..copyFromHeader(headerFrom);

  PWMBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _id = _$v!.id;
      _period = _$v!.period;
      _dutyCycle = _$v!.dutyCycle;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(PWM other) {
    _$v = other as _$PWM;
  }

  @override
  void update(void Function(PWMBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  PWM build() {
    final result = _$v ??
        _$PWM._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            id: id,
            period: period,
            dutyCycle: dutyCycle);
    replace(result);
    return result;
  }
}

/// Estimated State immutable class
///
class _$EstimatedState extends EstimatedState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double lat;
  @override
  final double lon;
  @override
  final double height;
  @override
  final double x;
  @override
  final double y;
  @override
  final double z;
  @override
  final double phi;
  @override
  final double theta;
  @override
  final double psi;
  @override
  final double u;
  @override
  final double v;
  @override
  final double w;
  @override
  final double vx;
  @override
  final double vy;
  @override
  final double vz;
  @override
  final double p;
  @override
  final double q;
  @override
  final double r;
  @override
  final double depth;
  @override
  final double alt;

  factory _$EstimatedState([void Function(EstimatedStateBuilder b)? updates]) =>
      (EstimatedStateBuilder()..update(updates)).build() as _$EstimatedState;

  factory _$EstimatedState.fromJson(core.Map<String, dynamic> json) {
    var val = EstimatedStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.height = json.containsKey('height') ? json['height'] as double : 0;
    val.x = json.containsKey('x') ? json['x'] as double : 0;
    val.y = json.containsKey('y') ? json['y'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.phi = json.containsKey('phi') ? json['phi'] as double : 0;
    val.theta = json.containsKey('theta') ? json['theta'] as double : 0;
    val.psi = json.containsKey('psi') ? json['psi'] as double : 0;
    val.u = json.containsKey('u') ? json['u'] as double : 0;
    val.v = json.containsKey('v') ? json['v'] as double : 0;
    val.w = json.containsKey('w') ? json['w'] as double : 0;
    val.vx = json.containsKey('vx') ? json['vx'] as double : 0;
    val.vy = json.containsKey('vy') ? json['vy'] as double : 0;
    val.vz = json.containsKey('vz') ? json['vz'] as double : 0;
    val.p = json.containsKey('p') ? json['p'] as double : 0;
    val.q = json.containsKey('q') ? json['q'] as double : 0;
    val.r = json.containsKey('r') ? json['r'] as double : 0;
    val.depth = json.containsKey('depth') ? json['depth'] as double : 0;
    val.alt = json.containsKey('alt') ? json['alt'] as double : 0;

    return val.build() as _$EstimatedState;
  }

  _$EstimatedState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.lat,
      required this.lon,
      required this.height,
      required this.x,
      required this.y,
      required this.z,
      required this.phi,
      required this.theta,
      required this.psi,
      required this.u,
      required this.v,
      required this.w,
      required this.vx,
      required this.vy,
      required this.vz,
      required this.p,
      required this.q,
      required this.r,
      required this.depth,
      required this.alt})
      : super._();

  @override
  EstimatedState rebuild(void Function(EstimatedStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  EstimatedStateBuilder toBuilder() => EstimatedStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is EstimatedState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (height == other.height || height - other.height <= 1E-7) &&
        (x == other.x || x - other.x <= 1E-7) &&
        (y == other.y || y - other.y <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        (phi == other.phi || phi - other.phi <= 1E-7) &&
        (theta == other.theta || theta - other.theta <= 1E-7) &&
        (psi == other.psi || psi - other.psi <= 1E-7) &&
        (u == other.u || u - other.u <= 1E-7) &&
        (v == other.v || v - other.v <= 1E-7) &&
        (w == other.w || w - other.w <= 1E-7) &&
        (vx == other.vx || vx - other.vx <= 1E-7) &&
        (vy == other.vy || vy - other.vy <= 1E-7) &&
        (vz == other.vz || vz - other.vz <= 1E-7) &&
        (p == other.p || p - other.p <= 1E-7) &&
        (q == other.q || q - other.q <= 1E-7) &&
        (r == other.r || r - other.r <= 1E-7) &&
        (depth == other.depth || depth - other.depth <= 1E-7) &&
        (alt == other.alt || alt - other.alt <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc($jc($jc($jc($jc($jc(0, timestamp?.hashCode ?? null.hashCode), src.hashCode), srcEnt.hashCode), dst.hashCode), dstEnt.hashCode), lat.hashCode),
                                                                                lon.hashCode),
                                                                            height.hashCode),
                                                                        x.hashCode),
                                                                    y.hashCode),
                                                                z.hashCode),
                                                            phi.hashCode),
                                                        theta.hashCode),
                                                    psi.hashCode),
                                                u.hashCode),
                                            v.hashCode),
                                        w.hashCode),
                                    vx.hashCode),
                                vy.hashCode),
                            vz.hashCode),
                        p.hashCode),
                    q.hashCode),
                r.hashCode),
            depth.hashCode),
        alt.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('EstimatedState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('height', '$height (m)')
          ..add('x', '$x (m)')
          ..add('y', '$y (m)')
          ..add('z', '$z (m)')
          ..add('phi', '$phi (rad) [${phi * 180.0 / math.pi} (deg)]')
          ..add('theta', '$theta (rad) [${theta * 180.0 / math.pi} (deg)]')
          ..add('psi', '$psi (rad) [${psi * 180.0 / math.pi} (deg)]')
          ..add('u', '$u (m/s)')
          ..add('v', '$v (m/s)')
          ..add('w', '$w (m/s)')
          ..add('vx', '$vx (m/s)')
          ..add('vy', '$vy (m/s)')
          ..add('vz', '$vz (m/s)')
          ..add('p', '$p (rad/s) [${p * 180.0 / math.pi} (deg/s)]')
          ..add('q', '$q (rad/s) [${q * 180.0 / math.pi} (deg/s)]')
          ..add('r', '$r (rad/s) [${r * 180.0 / math.pi} (deg/s)]')
          ..add('depth', '$depth (m)')
          ..add('alt', '$alt (m)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'EstimatedState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'lat': lat,
        'lon': lon,
        'height': height,
        'x': x,
        'y': y,
        'z': z,
        'phi': phi,
        'theta': theta,
        'psi': psi,
        'u': u,
        'v': v,
        'w': w,
        'vx': vx,
        'vy': vy,
        'vz': vz,
        'p': p,
        'q': q,
        'r': r,
        'depth': depth,
        'alt': alt,
      };
}

/// Estimated State builder class
///
class EstimatedStateBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<EstimatedState, EstimatedStateBuilder> {
  _$EstimatedState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _height = 0;
  double get height => _$this._height;
  set height(double height) => _$this._height = height;

  double _x = 0;
  double get x => _$this._x;
  set x(double x) => _$this._x = x;

  double _y = 0;
  double get y => _$this._y;
  set y(double y) => _$this._y = y;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  double _phi = 0;
  double get phi => _$this._phi;
  set phi(double phi) => _$this._phi = phi;

  double _theta = 0;
  double get theta => _$this._theta;
  set theta(double theta) => _$this._theta = theta;

  double _psi = 0;
  double get psi => _$this._psi;
  set psi(double psi) => _$this._psi = psi;

  double _u = 0;
  double get u => _$this._u;
  set u(double u) => _$this._u = u;

  double _v = 0;
  double get v => _$this._v;
  set v(double v) => _$this._v = v;

  double _w = 0;
  double get w => _$this._w;
  set w(double w) => _$this._w = w;

  double _vx = 0;
  double get vx => _$this._vx;
  set vx(double vx) => _$this._vx = vx;

  double _vy = 0;
  double get vy => _$this._vy;
  set vy(double vy) => _$this._vy = vy;

  double _vz = 0;
  double get vz => _$this._vz;
  set vz(double vz) => _$this._vz = vz;

  double _p = 0;
  double get p => _$this._p;
  set p(double p) => _$this._p = p;

  double _q = 0;
  double get q => _$this._q;
  set q(double q) => _$this._q = q;

  double _r = 0;
  double get r => _$this._r;
  set r(double r) => _$this._r = r;

  double _depth = 0;
  double get depth => _$this._depth;
  set depth(double depth) => _$this._depth = depth;

  double _alt = 0;
  double get alt => _$this._alt;
  set alt(double alt) => _$this._alt = alt;

  EstimatedStateBuilder();

  EstimatedStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  EstimatedStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$EstimatedState.fromJson(json);
    replace(v);
  }

  @override
  EstimatedStateBuilder fromJson(core.Map<String, dynamic> json) =>
      EstimatedStateBuilder.fromJson(json);

  @override
  EstimatedStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      EstimatedStateBuilder()..copyFromHeader(headerFrom);

  EstimatedStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _height = _$v!.height;
      _x = _$v!.x;
      _y = _$v!.y;
      _z = _$v!.z;
      _phi = _$v!.phi;
      _theta = _$v!.theta;
      _psi = _$v!.psi;
      _u = _$v!.u;
      _v = _$v!.v;
      _w = _$v!.w;
      _vx = _$v!.vx;
      _vy = _$v!.vy;
      _vz = _$v!.vz;
      _p = _$v!.p;
      _q = _$v!.q;
      _r = _$v!.r;
      _depth = _$v!.depth;
      _alt = _$v!.alt;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(EstimatedState other) {
    _$v = other as _$EstimatedState;
  }

  @override
  void update(void Function(EstimatedStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  EstimatedState build() {
    final result = _$v ??
        _$EstimatedState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            lat: lat,
            lon: lon,
            height: height,
            x: x,
            y: y,
            z: z,
            phi: phi,
            theta: theta,
            psi: psi,
            u: u,
            v: v,
            w: w,
            vx: vx,
            vy: vy,
            vz: vz,
            p: p,
            q: q,
            r: r,
            depth: depth,
            alt: alt);
    replace(result);
    return result;
  }
}

/// Estimated Stream Velocity immutable class
///
class _$EstimatedStreamVelocity extends EstimatedStreamVelocity {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double x;
  @override
  final double y;
  @override
  final double z;

  factory _$EstimatedStreamVelocity(
          [void Function(EstimatedStreamVelocityBuilder b)? updates]) =>
      (EstimatedStreamVelocityBuilder()..update(updates)).build()
          as _$EstimatedStreamVelocity;

  factory _$EstimatedStreamVelocity.fromJson(core.Map<String, dynamic> json) {
    var val = EstimatedStreamVelocityBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.x = json.containsKey('x') ? json['x'] as double : 0;
    val.y = json.containsKey('y') ? json['y'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;

    return val.build() as _$EstimatedStreamVelocity;
  }

  _$EstimatedStreamVelocity._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.x,
      required this.y,
      required this.z})
      : super._();

  @override
  EstimatedStreamVelocity rebuild(
          void Function(EstimatedStreamVelocityBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  EstimatedStreamVelocityBuilder toBuilder() =>
      EstimatedStreamVelocityBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is EstimatedStreamVelocity &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (x == other.x || x - other.x <= 1E-7) &&
        (y == other.y || y - other.y <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                x.hashCode),
            y.hashCode),
        z.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('EstimatedStreamVelocity')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('x', '$x (m/s)')
          ..add('y', '$y (m/s)')
          ..add('z', '$z (m/s)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'EstimatedStreamVelocity',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'x': x,
        'y': y,
        'z': z,
      };
}

/// Estimated Stream Velocity builder class
///
class EstimatedStreamVelocityBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<EstimatedStreamVelocity,
            EstimatedStreamVelocityBuilder> {
  _$EstimatedStreamVelocity? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _x = 0;
  double get x => _$this._x;
  set x(double x) => _$this._x = x;

  double _y = 0;
  double get y => _$this._y;
  set y(double y) => _$this._y = y;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  EstimatedStreamVelocityBuilder();

  EstimatedStreamVelocityBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  EstimatedStreamVelocityBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$EstimatedStreamVelocity.fromJson(json);
    replace(v);
  }

  @override
  EstimatedStreamVelocityBuilder fromJson(core.Map<String, dynamic> json) =>
      EstimatedStreamVelocityBuilder.fromJson(json);

  @override
  EstimatedStreamVelocityBuilder newInstance(
          [ImcBuilderHeaderPart? headerFrom]) =>
      EstimatedStreamVelocityBuilder()..copyFromHeader(headerFrom);

  EstimatedStreamVelocityBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _x = _$v!.x;
      _y = _$v!.y;
      _z = _$v!.z;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(EstimatedStreamVelocity other) {
    _$v = other as _$EstimatedStreamVelocity;
  }

  @override
  void update(void Function(EstimatedStreamVelocityBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  EstimatedStreamVelocity build() {
    final result = _$v ??
        _$EstimatedStreamVelocity._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            x: x,
            y: y,
            z: z);
    replace(result);
    return result;
  }
}

/// Indicated Speed immutable class
///
class _$IndicatedSpeed extends IndicatedSpeed {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$IndicatedSpeed([void Function(IndicatedSpeedBuilder b)? updates]) =>
      (IndicatedSpeedBuilder()..update(updates)).build() as _$IndicatedSpeed;

  factory _$IndicatedSpeed.fromJson(core.Map<String, dynamic> json) {
    var val = IndicatedSpeedBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$IndicatedSpeed;
  }

  _$IndicatedSpeed._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  IndicatedSpeed rebuild(void Function(IndicatedSpeedBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  IndicatedSpeedBuilder toBuilder() => IndicatedSpeedBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is IndicatedSpeed &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('IndicatedSpeed')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (m/s)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'IndicatedSpeed',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Indicated Speed builder class
///
class IndicatedSpeedBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<IndicatedSpeed, IndicatedSpeedBuilder> {
  _$IndicatedSpeed? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  IndicatedSpeedBuilder();

  IndicatedSpeedBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  IndicatedSpeedBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$IndicatedSpeed.fromJson(json);
    replace(v);
  }

  @override
  IndicatedSpeedBuilder fromJson(core.Map<String, dynamic> json) =>
      IndicatedSpeedBuilder.fromJson(json);

  @override
  IndicatedSpeedBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      IndicatedSpeedBuilder()..copyFromHeader(headerFrom);

  IndicatedSpeedBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(IndicatedSpeed other) {
    _$v = other as _$IndicatedSpeed;
  }

  @override
  void update(void Function(IndicatedSpeedBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  IndicatedSpeed build() {
    final result = _$v ??
        _$IndicatedSpeed._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// True Speed immutable class
///
class _$TrueSpeed extends TrueSpeed {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$TrueSpeed([void Function(TrueSpeedBuilder b)? updates]) =>
      (TrueSpeedBuilder()..update(updates)).build() as _$TrueSpeed;

  factory _$TrueSpeed.fromJson(core.Map<String, dynamic> json) {
    var val = TrueSpeedBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$TrueSpeed;
  }

  _$TrueSpeed._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  TrueSpeed rebuild(void Function(TrueSpeedBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  TrueSpeedBuilder toBuilder() => TrueSpeedBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is TrueSpeed &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('TrueSpeed')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (m/s)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'TrueSpeed',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// True Speed builder class
///
class TrueSpeedBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<TrueSpeed, TrueSpeedBuilder> {
  _$TrueSpeed? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  TrueSpeedBuilder();

  TrueSpeedBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  TrueSpeedBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$TrueSpeed.fromJson(json);
    replace(v);
  }

  @override
  TrueSpeedBuilder fromJson(core.Map<String, dynamic> json) =>
      TrueSpeedBuilder.fromJson(json);

  @override
  TrueSpeedBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      TrueSpeedBuilder()..copyFromHeader(headerFrom);

  TrueSpeedBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(TrueSpeed other) {
    _$v = other as _$TrueSpeed;
  }

  @override
  void update(void Function(TrueSpeedBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  TrueSpeed build() {
    final result = _$v ??
        _$TrueSpeed._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Navigation Uncertainty immutable class
///
class _$NavigationUncertainty extends NavigationUncertainty {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double x;
  @override
  final double y;
  @override
  final double z;
  @override
  final double phi;
  @override
  final double theta;
  @override
  final double psi;
  @override
  final double p;
  @override
  final double q;
  @override
  final double r;
  @override
  final double u;
  @override
  final double v;
  @override
  final double w;
  @override
  final double biasPsi;
  @override
  final double biasR;

  factory _$NavigationUncertainty(
          [void Function(NavigationUncertaintyBuilder b)? updates]) =>
      (NavigationUncertaintyBuilder()..update(updates)).build()
          as _$NavigationUncertainty;

  factory _$NavigationUncertainty.fromJson(core.Map<String, dynamic> json) {
    var val = NavigationUncertaintyBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.x = json.containsKey('x') ? json['x'] as double : 0;
    val.y = json.containsKey('y') ? json['y'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.phi = json.containsKey('phi') ? json['phi'] as double : 0;
    val.theta = json.containsKey('theta') ? json['theta'] as double : 0;
    val.psi = json.containsKey('psi') ? json['psi'] as double : 0;
    val.p = json.containsKey('p') ? json['p'] as double : 0;
    val.q = json.containsKey('q') ? json['q'] as double : 0;
    val.r = json.containsKey('r') ? json['r'] as double : 0;
    val.u = json.containsKey('u') ? json['u'] as double : 0;
    val.v = json.containsKey('v') ? json['v'] as double : 0;
    val.w = json.containsKey('w') ? json['w'] as double : 0;
    val.biasPsi = json.containsKey('bias_psi') ? json['bias_psi'] as double : 0;
    val.biasR = json.containsKey('bias_r') ? json['bias_r'] as double : 0;

    return val.build() as _$NavigationUncertainty;
  }

  _$NavigationUncertainty._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.x,
      required this.y,
      required this.z,
      required this.phi,
      required this.theta,
      required this.psi,
      required this.p,
      required this.q,
      required this.r,
      required this.u,
      required this.v,
      required this.w,
      required this.biasPsi,
      required this.biasR})
      : super._();

  @override
  NavigationUncertainty rebuild(
          void Function(NavigationUncertaintyBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  NavigationUncertaintyBuilder toBuilder() =>
      NavigationUncertaintyBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is NavigationUncertainty &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (x == other.x || x - other.x <= 1E-7) &&
        (y == other.y || y - other.y <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        (phi == other.phi || phi - other.phi <= 1E-7) &&
        (theta == other.theta || theta - other.theta <= 1E-7) &&
        (psi == other.psi || psi - other.psi <= 1E-7) &&
        (p == other.p || p - other.p <= 1E-7) &&
        (q == other.q || q - other.q <= 1E-7) &&
        (r == other.r || r - other.r <= 1E-7) &&
        (u == other.u || u - other.u <= 1E-7) &&
        (v == other.v || v - other.v <= 1E-7) &&
        (w == other.w || w - other.w <= 1E-7) &&
        (biasPsi == other.biasPsi || biasPsi - other.biasPsi <= 1E-7) &&
        (biasR == other.biasR || biasR - other.biasR <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc(0,
                                                                                timestamp?.hashCode ?? null.hashCode),
                                                                            src.hashCode),
                                                                        srcEnt.hashCode),
                                                                    dst.hashCode),
                                                                dstEnt.hashCode),
                                                            x.hashCode),
                                                        y.hashCode),
                                                    z.hashCode),
                                                phi.hashCode),
                                            theta.hashCode),
                                        psi.hashCode),
                                    p.hashCode),
                                q.hashCode),
                            r.hashCode),
                        u.hashCode),
                    v.hashCode),
                w.hashCode),
            biasPsi.hashCode),
        biasR.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('NavigationUncertainty')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('x', '$x (m)')
          ..add('y', '$y (m)')
          ..add('z', '$z (m)')
          ..add('phi', '$phi (rad) [${phi * 180.0 / math.pi} (deg)]')
          ..add('theta', '$theta (rad) [${theta * 180.0 / math.pi} (deg)]')
          ..add('psi', '$psi (rad) [${psi * 180.0 / math.pi} (deg)]')
          ..add('p', '$p (rad/s) [${p * 180.0 / math.pi} (deg/s)]')
          ..add('q', '$q (rad/s) [${q * 180.0 / math.pi} (deg/s)]')
          ..add('r', '$r (rad/s) [${r * 180.0 / math.pi} (deg/s)]')
          ..add('u', '$u (m/s)')
          ..add('v', '$v (m/s)')
          ..add('w', '$w (m/s)')
          ..add(
              'biasPsi', '$biasPsi (rad) [${biasPsi * 180.0 / math.pi} (deg)]')
          ..add('biasR', '$biasR (rad/s) [${biasR * 180.0 / math.pi} (deg/s)]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'NavigationUncertainty',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'x': x,
        'y': y,
        'z': z,
        'phi': phi,
        'theta': theta,
        'psi': psi,
        'p': p,
        'q': q,
        'r': r,
        'u': u,
        'v': v,
        'w': w,
        'bias_psi': biasPsi,
        'bias_r': biasR,
      };
}

/// Navigation Uncertainty builder class
///
class NavigationUncertaintyBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<NavigationUncertainty,
            NavigationUncertaintyBuilder> {
  _$NavigationUncertainty? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _x = 0;
  double get x => _$this._x;
  set x(double x) => _$this._x = x;

  double _y = 0;
  double get y => _$this._y;
  set y(double y) => _$this._y = y;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  double _phi = 0;
  double get phi => _$this._phi;
  set phi(double phi) => _$this._phi = phi;

  double _theta = 0;
  double get theta => _$this._theta;
  set theta(double theta) => _$this._theta = theta;

  double _psi = 0;
  double get psi => _$this._psi;
  set psi(double psi) => _$this._psi = psi;

  double _p = 0;
  double get p => _$this._p;
  set p(double p) => _$this._p = p;

  double _q = 0;
  double get q => _$this._q;
  set q(double q) => _$this._q = q;

  double _r = 0;
  double get r => _$this._r;
  set r(double r) => _$this._r = r;

  double _u = 0;
  double get u => _$this._u;
  set u(double u) => _$this._u = u;

  double _v = 0;
  double get v => _$this._v;
  set v(double v) => _$this._v = v;

  double _w = 0;
  double get w => _$this._w;
  set w(double w) => _$this._w = w;

  double _biasPsi = 0;
  double get biasPsi => _$this._biasPsi;
  set biasPsi(double biasPsi) => _$this._biasPsi = biasPsi;

  double _biasR = 0;
  double get biasR => _$this._biasR;
  set biasR(double biasR) => _$this._biasR = biasR;

  NavigationUncertaintyBuilder();

  NavigationUncertaintyBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  NavigationUncertaintyBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$NavigationUncertainty.fromJson(json);
    replace(v);
  }

  @override
  NavigationUncertaintyBuilder fromJson(core.Map<String, dynamic> json) =>
      NavigationUncertaintyBuilder.fromJson(json);

  @override
  NavigationUncertaintyBuilder newInstance(
          [ImcBuilderHeaderPart? headerFrom]) =>
      NavigationUncertaintyBuilder()..copyFromHeader(headerFrom);

  NavigationUncertaintyBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _x = _$v!.x;
      _y = _$v!.y;
      _z = _$v!.z;
      _phi = _$v!.phi;
      _theta = _$v!.theta;
      _psi = _$v!.psi;
      _p = _$v!.p;
      _q = _$v!.q;
      _r = _$v!.r;
      _u = _$v!.u;
      _v = _$v!.v;
      _w = _$v!.w;
      _biasPsi = _$v!.biasPsi;
      _biasR = _$v!.biasR;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(NavigationUncertainty other) {
    _$v = other as _$NavigationUncertainty;
  }

  @override
  void update(void Function(NavigationUncertaintyBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  NavigationUncertainty build() {
    final result = _$v ??
        _$NavigationUncertainty._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            x: x,
            y: y,
            z: z,
            phi: phi,
            theta: theta,
            psi: psi,
            p: p,
            q: q,
            r: r,
            u: u,
            v: v,
            w: w,
            biasPsi: biasPsi,
            biasR: biasR);
    replace(result);
    return result;
  }
}

/// Navigation Data immutable class
///
class _$NavigationData extends NavigationData {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double biasPsi;
  @override
  final double biasR;
  @override
  final double cog;
  @override
  final double cyaw;
  @override
  final double lblRejLevel;
  @override
  final double gpsRejLevel;
  @override
  final double customX;
  @override
  final double customY;
  @override
  final double customZ;

  factory _$NavigationData([void Function(NavigationDataBuilder b)? updates]) =>
      (NavigationDataBuilder()..update(updates)).build() as _$NavigationData;

  factory _$NavigationData.fromJson(core.Map<String, dynamic> json) {
    var val = NavigationDataBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.biasPsi = json.containsKey('bias_psi') ? json['bias_psi'] as double : 0;
    val.biasR = json.containsKey('bias_r') ? json['bias_r'] as double : 0;
    val.cog = json.containsKey('cog') ? json['cog'] as double : 0;
    val.cyaw = json.containsKey('cyaw') ? json['cyaw'] as double : 0;
    val.lblRejLevel =
        json.containsKey('lbl_rej_level') ? json['lbl_rej_level'] as double : 0;
    val.gpsRejLevel =
        json.containsKey('gps_rej_level') ? json['gps_rej_level'] as double : 0;
    val.customX = json.containsKey('custom_x') ? json['custom_x'] as double : 0;
    val.customY = json.containsKey('custom_y') ? json['custom_y'] as double : 0;
    val.customZ = json.containsKey('custom_z') ? json['custom_z'] as double : 0;

    return val.build() as _$NavigationData;
  }

  _$NavigationData._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.biasPsi,
      required this.biasR,
      required this.cog,
      required this.cyaw,
      required this.lblRejLevel,
      required this.gpsRejLevel,
      required this.customX,
      required this.customY,
      required this.customZ})
      : super._();

  @override
  NavigationData rebuild(void Function(NavigationDataBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  NavigationDataBuilder toBuilder() => NavigationDataBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is NavigationData &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (biasPsi == other.biasPsi || biasPsi - other.biasPsi <= 1E-7) &&
        (biasR == other.biasR || biasR - other.biasR <= 1E-7) &&
        (cog == other.cog || cog - other.cog <= 1E-7) &&
        (cyaw == other.cyaw || cyaw - other.cyaw <= 1E-7) &&
        (lblRejLevel == other.lblRejLevel ||
            lblRejLevel - other.lblRejLevel <= 1E-7) &&
        (gpsRejLevel == other.gpsRejLevel ||
            gpsRejLevel - other.gpsRejLevel <= 1E-7) &&
        (customX == other.customX || customX - other.customX <= 1E-7) &&
        (customY == other.customY || customY - other.customY <= 1E-7) &&
        (customZ == other.customZ || customZ - other.customZ <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            0,
                                                            timestamp
                                                                    ?.hashCode ??
                                                                null.hashCode),
                                                        src.hashCode),
                                                    srcEnt.hashCode),
                                                dst.hashCode),
                                            dstEnt.hashCode),
                                        biasPsi.hashCode),
                                    biasR.hashCode),
                                cog.hashCode),
                            cyaw.hashCode),
                        lblRejLevel.hashCode),
                    gpsRejLevel.hashCode),
                customX.hashCode),
            customY.hashCode),
        customZ.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('NavigationData')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add(
              'biasPsi', '$biasPsi (rad) [${biasPsi * 180.0 / math.pi} (deg)]')
          ..add('biasR', '$biasR (rad/s) [${biasR * 180.0 / math.pi} (deg/s)]')
          ..add('cog', '$cog (rad) [${cog * 180.0 / math.pi} (deg)]')
          ..add('cyaw', '$cyaw (rad) [${cyaw * 180.0 / math.pi} (deg)]')
          ..add('lblRejLevel', '$lblRejLevel')
          ..add('gpsRejLevel', '$gpsRejLevel')
          ..add('customX', '$customX')
          ..add('customY', '$customY')
          ..add('customZ', '$customZ'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'NavigationData',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'bias_psi': biasPsi,
        'bias_r': biasR,
        'cog': cog,
        'cyaw': cyaw,
        'lbl_rej_level': lblRejLevel,
        'gps_rej_level': gpsRejLevel,
        'custom_x': customX,
        'custom_y': customY,
        'custom_z': customZ,
      };
}

/// Navigation Data builder class
///
class NavigationDataBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<NavigationData, NavigationDataBuilder> {
  _$NavigationData? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _biasPsi = 0;
  double get biasPsi => _$this._biasPsi;
  set biasPsi(double biasPsi) => _$this._biasPsi = biasPsi;

  double _biasR = 0;
  double get biasR => _$this._biasR;
  set biasR(double biasR) => _$this._biasR = biasR;

  double _cog = 0;
  double get cog => _$this._cog;
  set cog(double cog) => _$this._cog = cog;

  double _cyaw = 0;
  double get cyaw => _$this._cyaw;
  set cyaw(double cyaw) => _$this._cyaw = cyaw;

  double _lblRejLevel = 0;
  double get lblRejLevel => _$this._lblRejLevel;
  set lblRejLevel(double lblRejLevel) => _$this._lblRejLevel = lblRejLevel;

  double _gpsRejLevel = 0;
  double get gpsRejLevel => _$this._gpsRejLevel;
  set gpsRejLevel(double gpsRejLevel) => _$this._gpsRejLevel = gpsRejLevel;

  double _customX = 0;
  double get customX => _$this._customX;
  set customX(double customX) => _$this._customX = customX;

  double _customY = 0;
  double get customY => _$this._customY;
  set customY(double customY) => _$this._customY = customY;

  double _customZ = 0;
  double get customZ => _$this._customZ;
  set customZ(double customZ) => _$this._customZ = customZ;

  NavigationDataBuilder();

  NavigationDataBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  NavigationDataBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$NavigationData.fromJson(json);
    replace(v);
  }

  @override
  NavigationDataBuilder fromJson(core.Map<String, dynamic> json) =>
      NavigationDataBuilder.fromJson(json);

  @override
  NavigationDataBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      NavigationDataBuilder()..copyFromHeader(headerFrom);

  NavigationDataBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _biasPsi = _$v!.biasPsi;
      _biasR = _$v!.biasR;
      _cog = _$v!.cog;
      _cyaw = _$v!.cyaw;
      _lblRejLevel = _$v!.lblRejLevel;
      _gpsRejLevel = _$v!.gpsRejLevel;
      _customX = _$v!.customX;
      _customY = _$v!.customY;
      _customZ = _$v!.customZ;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(NavigationData other) {
    _$v = other as _$NavigationData;
  }

  @override
  void update(void Function(NavigationDataBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  NavigationData build() {
    final result = _$v ??
        _$NavigationData._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            biasPsi: biasPsi,
            biasR: biasR,
            cog: cog,
            cyaw: cyaw,
            lblRejLevel: lblRejLevel,
            gpsRejLevel: gpsRejLevel,
            customX: customX,
            customY: customY,
            customZ: customZ);
    replace(result);
    return result;
  }
}

/// GPS Fix Rejection immutable class
///
class _$GpsFixRejection extends GpsFixRejection {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double utcTime;
  @override
  final GpsFixRejectionEnumReason reason;

  factory _$GpsFixRejection(
          [void Function(GpsFixRejectionBuilder b)? updates]) =>
      (GpsFixRejectionBuilder()..update(updates)).build() as _$GpsFixRejection;

  factory _$GpsFixRejection.fromJson(core.Map<String, dynamic> json) {
    var val = GpsFixRejectionBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.utcTime = json.containsKey('utc_time') ? json['utc_time'] as double : 0;
    val.reason = json.containsKey('reason') && json['reason'] != null
        ? GpsFixRejectionEnumReason(json['reason'] as int)
        : GpsFixRejectionEnumReason(0);

    return val.build() as _$GpsFixRejection;
  }

  _$GpsFixRejection._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.utcTime,
      required this.reason})
      : super._();

  @override
  GpsFixRejection rebuild(void Function(GpsFixRejectionBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GpsFixRejectionBuilder toBuilder() => GpsFixRejectionBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GpsFixRejection &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (utcTime == other.utcTime || utcTime - other.utcTime <= 1E-7) &&
        reason == other.reason;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            utcTime.hashCode),
        reason.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GpsFixRejection')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('utcTime', '$utcTime (s)')
          ..add('reason', '$reason (Enumerated) [${reason.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'GpsFixRejection',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'utc_time': utcTime,
        'reason': reason.value,
      };
}

/// GPS Fix Rejection builder class
///
class GpsFixRejectionBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<GpsFixRejection, GpsFixRejectionBuilder> {
  _$GpsFixRejection? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _utcTime = 0;
  double get utcTime => _$this._utcTime;
  set utcTime(double utcTime) => _$this._utcTime = utcTime;

  GpsFixRejectionEnumReason _reason = GpsFixRejectionEnumReason(0);
  GpsFixRejectionEnumReason get reason => _$this._reason;
  set reason(GpsFixRejectionEnumReason reason) => _$this._reason = reason;

  GpsFixRejectionBuilder();

  GpsFixRejectionBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  GpsFixRejectionBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$GpsFixRejection.fromJson(json);
    replace(v);
  }

  @override
  GpsFixRejectionBuilder fromJson(core.Map<String, dynamic> json) =>
      GpsFixRejectionBuilder.fromJson(json);

  @override
  GpsFixRejectionBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      GpsFixRejectionBuilder()..copyFromHeader(headerFrom);

  GpsFixRejectionBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _utcTime = _$v!.utcTime;
      _reason = _$v!.reason;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GpsFixRejection other) {
    _$v = other as _$GpsFixRejection;
  }

  @override
  void update(void Function(GpsFixRejectionBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GpsFixRejection build() {
    final result = _$v ??
        _$GpsFixRejection._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            utcTime: utcTime,
            reason: reason);
    replace(result);
    return result;
  }
}

/// LBL Range Acceptance immutable class
///
class _$LblRangeAcceptance extends LblRangeAcceptance {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int id;
  @override
  final double range;
  @override
  final LblRangeAcceptanceEnumAcceptance acceptance;

  factory _$LblRangeAcceptance(
          [void Function(LblRangeAcceptanceBuilder b)? updates]) =>
      (LblRangeAcceptanceBuilder()..update(updates)).build()
          as _$LblRangeAcceptance;

  factory _$LblRangeAcceptance.fromJson(core.Map<String, dynamic> json) {
    var val = LblRangeAcceptanceBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.id = json.containsKey('id') ? json['id'] as int : 0;
    val.range = json.containsKey('range') ? json['range'] as double : 0;
    val.acceptance =
        json.containsKey('acceptance') && json['acceptance'] != null
            ? LblRangeAcceptanceEnumAcceptance(json['acceptance'] as int)
            : LblRangeAcceptanceEnumAcceptance(0);

    return val.build() as _$LblRangeAcceptance;
  }

  _$LblRangeAcceptance._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.id,
      required this.range,
      required this.acceptance})
      : super._();

  @override
  LblRangeAcceptance rebuild(
          void Function(LblRangeAcceptanceBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  LblRangeAcceptanceBuilder toBuilder() =>
      LblRangeAcceptanceBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is LblRangeAcceptance &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        id == other.id &&
        (range == other.range || range - other.range <= 1E-7) &&
        acceptance == other.acceptance;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                id.hashCode),
            range.hashCode),
        acceptance.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('LblRangeAcceptance')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('id', '$id')
          ..add('range', '$range (m)')
          ..add('acceptance',
              '$acceptance (Enumerated) [${acceptance.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'LblRangeAcceptance',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'id': id,
        'range': range,
        'acceptance': acceptance.value,
      };
}

/// LBL Range Acceptance builder class
///
class LblRangeAcceptanceBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<LblRangeAcceptance, LblRangeAcceptanceBuilder> {
  _$LblRangeAcceptance? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _id = 0;
  int get id => _$this._id;
  set id(int id) => _$this._id = id;

  double _range = 0;
  double get range => _$this._range;
  set range(double range) => _$this._range = range;

  LblRangeAcceptanceEnumAcceptance _acceptance =
      LblRangeAcceptanceEnumAcceptance(0);
  LblRangeAcceptanceEnumAcceptance get acceptance => _$this._acceptance;
  set acceptance(LblRangeAcceptanceEnumAcceptance acceptance) =>
      _$this._acceptance = acceptance;

  LblRangeAcceptanceBuilder();

  LblRangeAcceptanceBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  LblRangeAcceptanceBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$LblRangeAcceptance.fromJson(json);
    replace(v);
  }

  @override
  LblRangeAcceptanceBuilder fromJson(core.Map<String, dynamic> json) =>
      LblRangeAcceptanceBuilder.fromJson(json);

  @override
  LblRangeAcceptanceBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      LblRangeAcceptanceBuilder()..copyFromHeader(headerFrom);

  LblRangeAcceptanceBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _id = _$v!.id;
      _range = _$v!.range;
      _acceptance = _$v!.acceptance;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(LblRangeAcceptance other) {
    _$v = other as _$LblRangeAcceptance;
  }

  @override
  void update(void Function(LblRangeAcceptanceBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  LblRangeAcceptance build() {
    final result = _$v ??
        _$LblRangeAcceptance._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            id: id,
            range: range,
            acceptance: acceptance);
    replace(result);
    return result;
  }
}

/// DVL Rejection immutable class
///
class _$DvlRejection extends DvlRejection {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final DvlRejectionBitfieldType type;
  @override
  final DvlRejectionEnumReason reason;
  @override
  final double value;
  @override
  final double timestep;

  factory _$DvlRejection([void Function(DvlRejectionBuilder b)? updates]) =>
      (DvlRejectionBuilder()..update(updates)).build() as _$DvlRejection;

  factory _$DvlRejection.fromJson(core.Map<String, dynamic> json) {
    var val = DvlRejectionBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.type = json.containsKey('type') && json['type'] != null
        ? DvlRejectionBitfieldType(json['type'] as int)
        : DvlRejectionBitfieldType(0);
    val.reason = json.containsKey('reason') && json['reason'] != null
        ? DvlRejectionEnumReason(json['reason'] as int)
        : DvlRejectionEnumReason(0);
    val.value = json.containsKey('value') ? json['value'] as double : 0;
    val.timestep =
        json.containsKey('timestep') ? json['timestep'] as double : 0;

    return val.build() as _$DvlRejection;
  }

  _$DvlRejection._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.type,
      required this.reason,
      required this.value,
      required this.timestep})
      : super._();

  @override
  DvlRejection rebuild(void Function(DvlRejectionBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DvlRejectionBuilder toBuilder() => DvlRejectionBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is DvlRejection &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        type == other.type &&
        reason == other.reason &&
        (value == other.value || value - other.value <= 1E-7) &&
        (timestep == other.timestep || timestep - other.timestep <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    type.hashCode),
                reason.hashCode),
            value.hashCode),
        timestep.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('DvlRejection')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('type', '$type (Bitfield) [${type.toPrettyString()}]')
          ..add('reason', '$reason (Enumerated) [${reason.toPrettyString()}]')
          ..add('value', '$value (m/s)')
          ..add('timestep', '$timestep (s)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'DvlRejection',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'type': type.value,
        'reason': reason.value,
        'value': value,
        'timestep': timestep,
      };
}

/// DVL Rejection builder class
///
class DvlRejectionBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<DvlRejection, DvlRejectionBuilder> {
  _$DvlRejection? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  DvlRejectionBitfieldType _type = DvlRejectionBitfieldType(0);
  DvlRejectionBitfieldType get type => _$this._type;
  set type(DvlRejectionBitfieldType type) => _$this._type = type;

  DvlRejectionEnumReason _reason = DvlRejectionEnumReason(0);
  DvlRejectionEnumReason get reason => _$this._reason;
  set reason(DvlRejectionEnumReason reason) => _$this._reason = reason;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  double _timestep = 0;
  double get timestep => _$this._timestep;
  set timestep(double timestep) => _$this._timestep = timestep;

  DvlRejectionBuilder();

  DvlRejectionBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DvlRejectionBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$DvlRejection.fromJson(json);
    replace(v);
  }

  @override
  DvlRejectionBuilder fromJson(core.Map<String, dynamic> json) =>
      DvlRejectionBuilder.fromJson(json);

  @override
  DvlRejectionBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      DvlRejectionBuilder()..copyFromHeader(headerFrom);

  DvlRejectionBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _type = _$v!.type;
      _reason = _$v!.reason;
      _value = _$v!.value;
      _timestep = _$v!.timestep;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(DvlRejection other) {
    _$v = other as _$DvlRejection;
  }

  @override
  void update(void Function(DvlRejectionBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  DvlRejection build() {
    final result = _$v ??
        _$DvlRejection._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            type: type,
            reason: reason,
            value: value,
            timestep: timestep);
    replace(result);
    return result;
  }
}

/// LBL Beacon Position Estimate immutable class
///
class _$LblEstimate extends LblEstimate {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final LblBeacon? beacon;
  @override
  final double x;
  @override
  final double y;
  @override
  final double varX;
  @override
  final double varY;
  @override
  final double distance;

  factory _$LblEstimate([void Function(LblEstimateBuilder b)? updates]) =>
      (LblEstimateBuilder()..update(updates)).build() as _$LblEstimate;

  factory _$LblEstimate.fromJson(core.Map<String, dynamic> json) {
    var val = LblEstimateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    LblBeacon? beacon;
    if (json.containsKey('beacon') && json['beacon'] != null) {
      var msgJson = json['beacon'] as core.Map<String, dynamic>;
      if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
        var msgType = msgJson['abbrev'] as String;
        var builder = messagesBuilders[msgType]?.call();
        builder = builder?.fromJson(msgJson);
        beacon = builder?.build() as LblBeacon?;
      }
    }
    val.beacon = beacon;
    val.x = json.containsKey('x') ? json['x'] as double : 0;
    val.y = json.containsKey('y') ? json['y'] as double : 0;
    val.varX = json.containsKey('var_x') ? json['var_x'] as double : 0;
    val.varY = json.containsKey('var_y') ? json['var_y'] as double : 0;
    val.distance =
        json.containsKey('distance') ? json['distance'] as double : 0;

    return val.build() as _$LblEstimate;
  }

  _$LblEstimate._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      this.beacon,
      required this.x,
      required this.y,
      required this.varX,
      required this.varY,
      required this.distance})
      : super._();

  @override
  LblEstimate rebuild(void Function(LblEstimateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  LblEstimateBuilder toBuilder() => LblEstimateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is LblEstimate &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        beacon == other.beacon &&
        (x == other.x || x - other.x <= 1E-7) &&
        (y == other.y || y - other.y <= 1E-7) &&
        (varX == other.varX || varX - other.varX <= 1E-7) &&
        (varY == other.varY || varY - other.varY <= 1E-7) &&
        (distance == other.distance || distance - other.distance <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                0,
                                                timestamp?.hashCode ??
                                                    null.hashCode),
                                            src.hashCode),
                                        srcEnt.hashCode),
                                    dst.hashCode),
                                dstEnt.hashCode),
                            beacon?.hashCode ?? null.hashCode),
                        x.hashCode),
                    y.hashCode),
                varX.hashCode),
            varY.hashCode),
        distance.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('LblEstimate')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('beacon', '$beacon')
          ..add('x', '$x (m)')
          ..add('y', '$y (m)')
          ..add('varX', '$varX (m)')
          ..add('varY', '$varY (m)')
          ..add('distance', '$distance (m)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'LblEstimate',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'beacon': beacon?.toJson(false),
        'x': x,
        'y': y,
        'var_x': varX,
        'var_y': varY,
        'distance': distance,
      };
}

/// LBL Beacon Position Estimate builder class
///
class LblEstimateBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<LblEstimate, LblEstimateBuilder> {
  _$LblEstimate? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  LblBeacon? _beacon;
  LblBeacon? get beacon => _$this._beacon;
  set beacon(LblBeacon? beacon) => _$this._beacon = beacon;

  double _x = 0;
  double get x => _$this._x;
  set x(double x) => _$this._x = x;

  double _y = 0;
  double get y => _$this._y;
  set y(double y) => _$this._y = y;

  double _varX = 0;
  double get varX => _$this._varX;
  set varX(double varX) => _$this._varX = varX;

  double _varY = 0;
  double get varY => _$this._varY;
  set varY(double varY) => _$this._varY = varY;

  double _distance = 0;
  double get distance => _$this._distance;
  set distance(double distance) => _$this._distance = distance;

  LblEstimateBuilder();

  LblEstimateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  LblEstimateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$LblEstimate.fromJson(json);
    replace(v);
  }

  @override
  LblEstimateBuilder fromJson(core.Map<String, dynamic> json) =>
      LblEstimateBuilder.fromJson(json);

  @override
  LblEstimateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      LblEstimateBuilder()..copyFromHeader(headerFrom);

  LblEstimateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _beacon = _$v!.beacon;
      _x = _$v!.x;
      _y = _$v!.y;
      _varX = _$v!.varX;
      _varY = _$v!.varY;
      _distance = _$v!.distance;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(LblEstimate other) {
    _$v = other as _$LblEstimate;
  }

  @override
  void update(void Function(LblEstimateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  LblEstimate build() {
    final result = _$v ??
        _$LblEstimate._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            beacon: beacon,
            x: x,
            y: y,
            varX: varX,
            varY: varY,
            distance: distance);
    replace(result);
    return result;
  }
}

/// Alignment State immutable class
///
class _$AlignmentState extends AlignmentState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final AlignmentStateEnumState state;

  factory _$AlignmentState([void Function(AlignmentStateBuilder b)? updates]) =>
      (AlignmentStateBuilder()..update(updates)).build() as _$AlignmentState;

  factory _$AlignmentState.fromJson(core.Map<String, dynamic> json) {
    var val = AlignmentStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.state = json.containsKey('state') && json['state'] != null
        ? AlignmentStateEnumState(json['state'] as int)
        : AlignmentStateEnumState(0);

    return val.build() as _$AlignmentState;
  }

  _$AlignmentState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.state})
      : super._();

  @override
  AlignmentState rebuild(void Function(AlignmentStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  AlignmentStateBuilder toBuilder() => AlignmentStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is AlignmentState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        state == other.state;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        state.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('AlignmentState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('state', '$state (Enumerated) [${state.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'AlignmentState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'state': state.value,
      };
}

/// Alignment State builder class
///
class AlignmentStateBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<AlignmentState, AlignmentStateBuilder> {
  _$AlignmentState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  AlignmentStateEnumState _state = AlignmentStateEnumState(0);
  AlignmentStateEnumState get state => _$this._state;
  set state(AlignmentStateEnumState state) => _$this._state = state;

  AlignmentStateBuilder();

  AlignmentStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  AlignmentStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$AlignmentState.fromJson(json);
    replace(v);
  }

  @override
  AlignmentStateBuilder fromJson(core.Map<String, dynamic> json) =>
      AlignmentStateBuilder.fromJson(json);

  @override
  AlignmentStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      AlignmentStateBuilder()..copyFromHeader(headerFrom);

  AlignmentStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _state = _$v!.state;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(AlignmentState other) {
    _$v = other as _$AlignmentState;
  }

  @override
  void update(void Function(AlignmentStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  AlignmentState build() {
    final result = _$v ??
        _$AlignmentState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            state: state);
    replace(result);
    return result;
  }
}

/// GroupStreamVelocity immutable class
///
class _$GroupStreamVelocity extends GroupStreamVelocity {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double x;
  @override
  final double y;
  @override
  final double z;

  factory _$GroupStreamVelocity(
          [void Function(GroupStreamVelocityBuilder b)? updates]) =>
      (GroupStreamVelocityBuilder()..update(updates)).build()
          as _$GroupStreamVelocity;

  factory _$GroupStreamVelocity.fromJson(core.Map<String, dynamic> json) {
    var val = GroupStreamVelocityBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.x = json.containsKey('x') ? json['x'] as double : 0;
    val.y = json.containsKey('y') ? json['y'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;

    return val.build() as _$GroupStreamVelocity;
  }

  _$GroupStreamVelocity._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.x,
      required this.y,
      required this.z})
      : super._();

  @override
  GroupStreamVelocity rebuild(
          void Function(GroupStreamVelocityBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GroupStreamVelocityBuilder toBuilder() =>
      GroupStreamVelocityBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GroupStreamVelocity &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (x == other.x || x - other.x <= 1E-7) &&
        (y == other.y || y - other.y <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                x.hashCode),
            y.hashCode),
        z.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GroupStreamVelocity')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('x', '$x (m/s)')
          ..add('y', '$y (m/s)')
          ..add('z', '$z (m/s)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'GroupStreamVelocity',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'x': x,
        'y': y,
        'z': z,
      };
}

/// GroupStreamVelocity builder class
///
class GroupStreamVelocityBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<GroupStreamVelocity,
            GroupStreamVelocityBuilder> {
  _$GroupStreamVelocity? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _x = 0;
  double get x => _$this._x;
  set x(double x) => _$this._x = x;

  double _y = 0;
  double get y => _$this._y;
  set y(double y) => _$this._y = y;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  GroupStreamVelocityBuilder();

  GroupStreamVelocityBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  GroupStreamVelocityBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$GroupStreamVelocity.fromJson(json);
    replace(v);
  }

  @override
  GroupStreamVelocityBuilder fromJson(core.Map<String, dynamic> json) =>
      GroupStreamVelocityBuilder.fromJson(json);

  @override
  GroupStreamVelocityBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      GroupStreamVelocityBuilder()..copyFromHeader(headerFrom);

  GroupStreamVelocityBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _x = _$v!.x;
      _y = _$v!.y;
      _z = _$v!.z;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GroupStreamVelocity other) {
    _$v = other as _$GroupStreamVelocity;
  }

  @override
  void update(void Function(GroupStreamVelocityBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GroupStreamVelocity build() {
    final result = _$v ??
        _$GroupStreamVelocity._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            x: x,
            y: y,
            z: z);
    replace(result);
    return result;
  }
}

/// Airflow immutable class
///
class _$Airflow extends Airflow {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double va;
  @override
  final double aoa;
  @override
  final double ssa;

  factory _$Airflow([void Function(AirflowBuilder b)? updates]) =>
      (AirflowBuilder()..update(updates)).build() as _$Airflow;

  factory _$Airflow.fromJson(core.Map<String, dynamic> json) {
    var val = AirflowBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.va = json.containsKey('va') ? json['va'] as double : 0;
    val.aoa = json.containsKey('aoa') ? json['aoa'] as double : 0;
    val.ssa = json.containsKey('ssa') ? json['ssa'] as double : 0;

    return val.build() as _$Airflow;
  }

  _$Airflow._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.va,
      required this.aoa,
      required this.ssa})
      : super._();

  @override
  Airflow rebuild(void Function(AirflowBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  AirflowBuilder toBuilder() => AirflowBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Airflow &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (va == other.va || va - other.va <= 1E-7) &&
        (aoa == other.aoa || aoa - other.aoa <= 1E-7) &&
        (ssa == other.ssa || ssa - other.ssa <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                va.hashCode),
            aoa.hashCode),
        ssa.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Airflow')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('va', '$va (m/s)')
          ..add('aoa', '$aoa (rad) [${aoa * 180.0 / math.pi} (deg)]')
          ..add('ssa', '$ssa (rad) [${ssa * 180.0 / math.pi} (deg)]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Airflow',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'va': va,
        'aoa': aoa,
        'ssa': ssa,
      };
}

/// Airflow builder class
///
class AirflowBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Airflow, AirflowBuilder> {
  _$Airflow? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _va = 0;
  double get va => _$this._va;
  set va(double va) => _$this._va = va;

  double _aoa = 0;
  double get aoa => _$this._aoa;
  set aoa(double aoa) => _$this._aoa = aoa;

  double _ssa = 0;
  double get ssa => _$this._ssa;
  set ssa(double ssa) => _$this._ssa = ssa;

  AirflowBuilder();

  AirflowBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  AirflowBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Airflow.fromJson(json);
    replace(v);
  }

  @override
  AirflowBuilder fromJson(core.Map<String, dynamic> json) =>
      AirflowBuilder.fromJson(json);

  @override
  AirflowBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      AirflowBuilder()..copyFromHeader(headerFrom);

  AirflowBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _va = _$v!.va;
      _aoa = _$v!.aoa;
      _ssa = _$v!.ssa;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Airflow other) {
    _$v = other as _$Airflow;
  }

  @override
  void update(void Function(AirflowBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Airflow build() {
    final result = _$v ??
        _$Airflow._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            va: va,
            aoa: aoa,
            ssa: ssa);
    replace(result);
    return result;
  }
}

/// Desired Heading immutable class
///
class _$DesiredHeading extends DesiredHeading {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$DesiredHeading([void Function(DesiredHeadingBuilder b)? updates]) =>
      (DesiredHeadingBuilder()..update(updates)).build() as _$DesiredHeading;

  factory _$DesiredHeading.fromJson(core.Map<String, dynamic> json) {
    var val = DesiredHeadingBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$DesiredHeading;
  }

  _$DesiredHeading._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  DesiredHeading rebuild(void Function(DesiredHeadingBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DesiredHeadingBuilder toBuilder() => DesiredHeadingBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is DesiredHeading &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('DesiredHeading')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (rad) [${value * 180.0 / math.pi} (deg)]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'DesiredHeading',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Desired Heading builder class
///
class DesiredHeadingBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<DesiredHeading, DesiredHeadingBuilder> {
  _$DesiredHeading? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  DesiredHeadingBuilder();

  DesiredHeadingBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DesiredHeadingBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$DesiredHeading.fromJson(json);
    replace(v);
  }

  @override
  DesiredHeadingBuilder fromJson(core.Map<String, dynamic> json) =>
      DesiredHeadingBuilder.fromJson(json);

  @override
  DesiredHeadingBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      DesiredHeadingBuilder()..copyFromHeader(headerFrom);

  DesiredHeadingBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(DesiredHeading other) {
    _$v = other as _$DesiredHeading;
  }

  @override
  void update(void Function(DesiredHeadingBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  DesiredHeading build() {
    final result = _$v ??
        _$DesiredHeading._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Desired Z immutable class
///
class _$DesiredZ extends DesiredZ {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;
  @override
  final ZUnitsEnum zUnits;

  factory _$DesiredZ([void Function(DesiredZBuilder b)? updates]) =>
      (DesiredZBuilder()..update(updates)).build() as _$DesiredZ;

  factory _$DesiredZ.fromJson(core.Map<String, dynamic> json) {
    var val = DesiredZBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;
    val.zUnits = json.containsKey('z_units') && json['z_units'] != null
        ? ZUnitsEnum(json['z_units'] as int)
        : ZUnitsEnum(0);

    return val.build() as _$DesiredZ;
  }

  _$DesiredZ._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value,
      required this.zUnits})
      : super._();

  @override
  DesiredZ rebuild(void Function(DesiredZBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DesiredZBuilder toBuilder() => DesiredZBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is DesiredZ &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7) &&
        zUnits == other.zUnits;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            value.hashCode),
        zUnits.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('DesiredZ')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (m)')
          ..add('zUnits', '$zUnits (Enumerated) [${zUnits.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'DesiredZ',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
        'z_units': zUnits.value,
      };
}

/// Desired Z builder class
///
class DesiredZBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<DesiredZ, DesiredZBuilder> {
  _$DesiredZ? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  ZUnitsEnum _zUnits = ZUnitsEnum(0);
  ZUnitsEnum get zUnits => _$this._zUnits;
  set zUnits(ZUnitsEnum zUnits) => _$this._zUnits = zUnits;

  DesiredZBuilder();

  DesiredZBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DesiredZBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$DesiredZ.fromJson(json);
    replace(v);
  }

  @override
  DesiredZBuilder fromJson(core.Map<String, dynamic> json) =>
      DesiredZBuilder.fromJson(json);

  @override
  DesiredZBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      DesiredZBuilder()..copyFromHeader(headerFrom);

  DesiredZBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _zUnits = _$v!.zUnits;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(DesiredZ other) {
    _$v = other as _$DesiredZ;
  }

  @override
  void update(void Function(DesiredZBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  DesiredZ build() {
    final result = _$v ??
        _$DesiredZ._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value,
            zUnits: zUnits);
    replace(result);
    return result;
  }
}

/// Desired Speed immutable class
///
class _$DesiredSpeed extends DesiredSpeed {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;
  @override
  final SpeedUnitsEnum speedUnits;

  factory _$DesiredSpeed([void Function(DesiredSpeedBuilder b)? updates]) =>
      (DesiredSpeedBuilder()..update(updates)).build() as _$DesiredSpeed;

  factory _$DesiredSpeed.fromJson(core.Map<String, dynamic> json) {
    var val = DesiredSpeedBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;
    val.speedUnits =
        json.containsKey('speed_units') && json['speed_units'] != null
            ? SpeedUnitsEnum(json['speed_units'] as int)
            : SpeedUnitsEnum(0);

    return val.build() as _$DesiredSpeed;
  }

  _$DesiredSpeed._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value,
      required this.speedUnits})
      : super._();

  @override
  DesiredSpeed rebuild(void Function(DesiredSpeedBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DesiredSpeedBuilder toBuilder() => DesiredSpeedBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is DesiredSpeed &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7) &&
        speedUnits == other.speedUnits;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            value.hashCode),
        speedUnits.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('DesiredSpeed')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value')
          ..add('speedUnits',
              '$speedUnits (Enumerated) [${speedUnits.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'DesiredSpeed',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
        'speed_units': speedUnits.value,
      };
}

/// Desired Speed builder class
///
class DesiredSpeedBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<DesiredSpeed, DesiredSpeedBuilder> {
  _$DesiredSpeed? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  SpeedUnitsEnum _speedUnits = SpeedUnitsEnum(0);
  SpeedUnitsEnum get speedUnits => _$this._speedUnits;
  set speedUnits(SpeedUnitsEnum speedUnits) => _$this._speedUnits = speedUnits;

  DesiredSpeedBuilder();

  DesiredSpeedBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DesiredSpeedBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$DesiredSpeed.fromJson(json);
    replace(v);
  }

  @override
  DesiredSpeedBuilder fromJson(core.Map<String, dynamic> json) =>
      DesiredSpeedBuilder.fromJson(json);

  @override
  DesiredSpeedBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      DesiredSpeedBuilder()..copyFromHeader(headerFrom);

  DesiredSpeedBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _speedUnits = _$v!.speedUnits;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(DesiredSpeed other) {
    _$v = other as _$DesiredSpeed;
  }

  @override
  void update(void Function(DesiredSpeedBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  DesiredSpeed build() {
    final result = _$v ??
        _$DesiredSpeed._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value,
            speedUnits: speedUnits);
    replace(result);
    return result;
  }
}

/// Desired Roll immutable class
///
class _$DesiredRoll extends DesiredRoll {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$DesiredRoll([void Function(DesiredRollBuilder b)? updates]) =>
      (DesiredRollBuilder()..update(updates)).build() as _$DesiredRoll;

  factory _$DesiredRoll.fromJson(core.Map<String, dynamic> json) {
    var val = DesiredRollBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$DesiredRoll;
  }

  _$DesiredRoll._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  DesiredRoll rebuild(void Function(DesiredRollBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DesiredRollBuilder toBuilder() => DesiredRollBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is DesiredRoll &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('DesiredRoll')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (rad) [${value * 180.0 / math.pi} (deg)]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'DesiredRoll',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Desired Roll builder class
///
class DesiredRollBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<DesiredRoll, DesiredRollBuilder> {
  _$DesiredRoll? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  DesiredRollBuilder();

  DesiredRollBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DesiredRollBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$DesiredRoll.fromJson(json);
    replace(v);
  }

  @override
  DesiredRollBuilder fromJson(core.Map<String, dynamic> json) =>
      DesiredRollBuilder.fromJson(json);

  @override
  DesiredRollBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      DesiredRollBuilder()..copyFromHeader(headerFrom);

  DesiredRollBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(DesiredRoll other) {
    _$v = other as _$DesiredRoll;
  }

  @override
  void update(void Function(DesiredRollBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  DesiredRoll build() {
    final result = _$v ??
        _$DesiredRoll._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Desired Pitch immutable class
///
class _$DesiredPitch extends DesiredPitch {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$DesiredPitch([void Function(DesiredPitchBuilder b)? updates]) =>
      (DesiredPitchBuilder()..update(updates)).build() as _$DesiredPitch;

  factory _$DesiredPitch.fromJson(core.Map<String, dynamic> json) {
    var val = DesiredPitchBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$DesiredPitch;
  }

  _$DesiredPitch._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  DesiredPitch rebuild(void Function(DesiredPitchBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DesiredPitchBuilder toBuilder() => DesiredPitchBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is DesiredPitch &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('DesiredPitch')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (rad) [${value * 180.0 / math.pi} (deg)]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'DesiredPitch',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Desired Pitch builder class
///
class DesiredPitchBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<DesiredPitch, DesiredPitchBuilder> {
  _$DesiredPitch? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  DesiredPitchBuilder();

  DesiredPitchBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DesiredPitchBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$DesiredPitch.fromJson(json);
    replace(v);
  }

  @override
  DesiredPitchBuilder fromJson(core.Map<String, dynamic> json) =>
      DesiredPitchBuilder.fromJson(json);

  @override
  DesiredPitchBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      DesiredPitchBuilder()..copyFromHeader(headerFrom);

  DesiredPitchBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(DesiredPitch other) {
    _$v = other as _$DesiredPitch;
  }

  @override
  void update(void Function(DesiredPitchBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  DesiredPitch build() {
    final result = _$v ??
        _$DesiredPitch._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Desired Vertical Rate immutable class
///
class _$DesiredVerticalRate extends DesiredVerticalRate {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$DesiredVerticalRate(
          [void Function(DesiredVerticalRateBuilder b)? updates]) =>
      (DesiredVerticalRateBuilder()..update(updates)).build()
          as _$DesiredVerticalRate;

  factory _$DesiredVerticalRate.fromJson(core.Map<String, dynamic> json) {
    var val = DesiredVerticalRateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$DesiredVerticalRate;
  }

  _$DesiredVerticalRate._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  DesiredVerticalRate rebuild(
          void Function(DesiredVerticalRateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DesiredVerticalRateBuilder toBuilder() =>
      DesiredVerticalRateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is DesiredVerticalRate &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('DesiredVerticalRate')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (m/s)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'DesiredVerticalRate',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Desired Vertical Rate builder class
///
class DesiredVerticalRateBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<DesiredVerticalRate,
            DesiredVerticalRateBuilder> {
  _$DesiredVerticalRate? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  DesiredVerticalRateBuilder();

  DesiredVerticalRateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DesiredVerticalRateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$DesiredVerticalRate.fromJson(json);
    replace(v);
  }

  @override
  DesiredVerticalRateBuilder fromJson(core.Map<String, dynamic> json) =>
      DesiredVerticalRateBuilder.fromJson(json);

  @override
  DesiredVerticalRateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      DesiredVerticalRateBuilder()..copyFromHeader(headerFrom);

  DesiredVerticalRateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(DesiredVerticalRate other) {
    _$v = other as _$DesiredVerticalRate;
  }

  @override
  void update(void Function(DesiredVerticalRateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  DesiredVerticalRate build() {
    final result = _$v ??
        _$DesiredVerticalRate._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Desired Path immutable class
///
class _$DesiredPath extends DesiredPath {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int pathRef;
  @override
  final double startLat;
  @override
  final double startLon;
  @override
  final double startZ;
  @override
  final ZUnitsEnum startZUnits;
  @override
  final double endLat;
  @override
  final double endLon;
  @override
  final double endZ;
  @override
  final ZUnitsEnum endZUnits;
  @override
  final double speed;
  @override
  final SpeedUnitsEnum speedUnits;
  @override
  final double lradius;
  @override
  final DesiredPathBitfieldFlags flags;

  factory _$DesiredPath([void Function(DesiredPathBuilder b)? updates]) =>
      (DesiredPathBuilder()..update(updates)).build() as _$DesiredPath;

  factory _$DesiredPath.fromJson(core.Map<String, dynamic> json) {
    var val = DesiredPathBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.pathRef = json.containsKey('path_ref') ? json['path_ref'] as int : 0;
    val.startLat =
        json.containsKey('start_lat') ? json['start_lat'] as double : 0;
    val.startLon =
        json.containsKey('start_lon') ? json['start_lon'] as double : 0;
    val.startZ = json.containsKey('start_z') ? json['start_z'] as double : 0;
    val.startZUnits =
        json.containsKey('start_z_units') && json['start_z_units'] != null
            ? ZUnitsEnum(json['start_z_units'] as int)
            : ZUnitsEnum(0);
    val.endLat = json.containsKey('end_lat') ? json['end_lat'] as double : 0;
    val.endLon = json.containsKey('end_lon') ? json['end_lon'] as double : 0;
    val.endZ = json.containsKey('end_z') ? json['end_z'] as double : 0;
    val.endZUnits =
        json.containsKey('end_z_units') && json['end_z_units'] != null
            ? ZUnitsEnum(json['end_z_units'] as int)
            : ZUnitsEnum(0);
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.speedUnits =
        json.containsKey('speed_units') && json['speed_units'] != null
            ? SpeedUnitsEnum(json['speed_units'] as int)
            : SpeedUnitsEnum(0);
    val.lradius = json.containsKey('lradius') ? json['lradius'] as double : 0;
    val.flags = json.containsKey('flags') && json['flags'] != null
        ? DesiredPathBitfieldFlags(json['flags'] as int)
        : DesiredPathBitfieldFlags(0);

    return val.build() as _$DesiredPath;
  }

  _$DesiredPath._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.pathRef,
      required this.startLat,
      required this.startLon,
      required this.startZ,
      required this.startZUnits,
      required this.endLat,
      required this.endLon,
      required this.endZ,
      required this.endZUnits,
      required this.speed,
      required this.speedUnits,
      required this.lradius,
      required this.flags})
      : super._();

  @override
  DesiredPath rebuild(void Function(DesiredPathBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DesiredPathBuilder toBuilder() => DesiredPathBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is DesiredPath &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        pathRef == other.pathRef &&
        (startLat == other.startLat || startLat - other.startLat <= 1E-7) &&
        (startLon == other.startLon || startLon - other.startLon <= 1E-7) &&
        (startZ == other.startZ || startZ - other.startZ <= 1E-7) &&
        startZUnits == other.startZUnits &&
        (endLat == other.endLat || endLat - other.endLat <= 1E-7) &&
        (endLon == other.endLon || endLon - other.endLon <= 1E-7) &&
        (endZ == other.endZ || endZ - other.endZ <= 1E-7) &&
        endZUnits == other.endZUnits &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        speedUnits == other.speedUnits &&
        (lradius == other.lradius || lradius - other.lradius <= 1E-7) &&
        flags == other.flags;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            0,
                                                                            timestamp?.hashCode ??
                                                                                null.hashCode),
                                                                        src.hashCode),
                                                                    srcEnt.hashCode),
                                                                dst.hashCode),
                                                            dstEnt.hashCode),
                                                        pathRef.hashCode),
                                                    startLat.hashCode),
                                                startLon.hashCode),
                                            startZ.hashCode),
                                        startZUnits.hashCode),
                                    endLat.hashCode),
                                endLon.hashCode),
                            endZ.hashCode),
                        endZUnits.hashCode),
                    speed.hashCode),
                speedUnits.hashCode),
            lradius.hashCode),
        flags.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('DesiredPath')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('pathRef', '$pathRef')
          ..add('startLat',
              '$startLat (rad) [${startLat * 180.0 / math.pi} (deg)]')
          ..add('startLon',
              '$startLon (rad) [${startLon * 180.0 / math.pi} (deg)]')
          ..add('startZ', '$startZ (m)')
          ..add('startZUnits',
              '$startZUnits (Enumerated) [${startZUnits.toPrettyString()}]')
          ..add('endLat', '$endLat (rad) [${endLat * 180.0 / math.pi} (deg)]')
          ..add('endLon', '$endLon (rad) [${endLon * 180.0 / math.pi} (deg)]')
          ..add('endZ', '$endZ (m)')
          ..add('endZUnits',
              '$endZUnits (Enumerated) [${endZUnits.toPrettyString()}]')
          ..add('speed', '$speed')
          ..add('speedUnits',
              '$speedUnits (Enumerated) [${speedUnits.toPrettyString()}]')
          ..add('lradius', '$lradius (m)')
          ..add('flags', '$flags (Bitfield) [${flags.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'DesiredPath',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'path_ref': pathRef,
        'start_lat': startLat,
        'start_lon': startLon,
        'start_z': startZ,
        'start_z_units': startZUnits.value,
        'end_lat': endLat,
        'end_lon': endLon,
        'end_z': endZ,
        'end_z_units': endZUnits.value,
        'speed': speed,
        'speed_units': speedUnits.value,
        'lradius': lradius,
        'flags': flags.value,
      };
}

/// Desired Path builder class
///
class DesiredPathBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<DesiredPath, DesiredPathBuilder> {
  _$DesiredPath? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _pathRef = 0;
  int get pathRef => _$this._pathRef;
  set pathRef(int pathRef) => _$this._pathRef = pathRef;

  double _startLat = 0;
  double get startLat => _$this._startLat;
  set startLat(double startLat) => _$this._startLat = startLat;

  double _startLon = 0;
  double get startLon => _$this._startLon;
  set startLon(double startLon) => _$this._startLon = startLon;

  double _startZ = 0;
  double get startZ => _$this._startZ;
  set startZ(double startZ) => _$this._startZ = startZ;

  ZUnitsEnum _startZUnits = ZUnitsEnum(0);
  ZUnitsEnum get startZUnits => _$this._startZUnits;
  set startZUnits(ZUnitsEnum startZUnits) => _$this._startZUnits = startZUnits;

  double _endLat = 0;
  double get endLat => _$this._endLat;
  set endLat(double endLat) => _$this._endLat = endLat;

  double _endLon = 0;
  double get endLon => _$this._endLon;
  set endLon(double endLon) => _$this._endLon = endLon;

  double _endZ = 0;
  double get endZ => _$this._endZ;
  set endZ(double endZ) => _$this._endZ = endZ;

  ZUnitsEnum _endZUnits = ZUnitsEnum(0);
  ZUnitsEnum get endZUnits => _$this._endZUnits;
  set endZUnits(ZUnitsEnum endZUnits) => _$this._endZUnits = endZUnits;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  SpeedUnitsEnum _speedUnits = SpeedUnitsEnum(0);
  SpeedUnitsEnum get speedUnits => _$this._speedUnits;
  set speedUnits(SpeedUnitsEnum speedUnits) => _$this._speedUnits = speedUnits;

  double _lradius = 0;
  double get lradius => _$this._lradius;
  set lradius(double lradius) => _$this._lradius = lradius;

  DesiredPathBitfieldFlags _flags = DesiredPathBitfieldFlags(0);
  DesiredPathBitfieldFlags get flags => _$this._flags;
  set flags(DesiredPathBitfieldFlags flags) => _$this._flags = flags;

  DesiredPathBuilder();

  DesiredPathBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DesiredPathBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$DesiredPath.fromJson(json);
    replace(v);
  }

  @override
  DesiredPathBuilder fromJson(core.Map<String, dynamic> json) =>
      DesiredPathBuilder.fromJson(json);

  @override
  DesiredPathBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      DesiredPathBuilder()..copyFromHeader(headerFrom);

  DesiredPathBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _pathRef = _$v!.pathRef;
      _startLat = _$v!.startLat;
      _startLon = _$v!.startLon;
      _startZ = _$v!.startZ;
      _startZUnits = _$v!.startZUnits;
      _endLat = _$v!.endLat;
      _endLon = _$v!.endLon;
      _endZ = _$v!.endZ;
      _endZUnits = _$v!.endZUnits;
      _speed = _$v!.speed;
      _speedUnits = _$v!.speedUnits;
      _lradius = _$v!.lradius;
      _flags = _$v!.flags;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(DesiredPath other) {
    _$v = other as _$DesiredPath;
  }

  @override
  void update(void Function(DesiredPathBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  DesiredPath build() {
    final result = _$v ??
        _$DesiredPath._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            pathRef: pathRef,
            startLat: startLat,
            startLon: startLon,
            startZ: startZ,
            startZUnits: startZUnits,
            endLat: endLat,
            endLon: endLon,
            endZ: endZ,
            endZUnits: endZUnits,
            speed: speed,
            speedUnits: speedUnits,
            lradius: lradius,
            flags: flags);
    replace(result);
    return result;
  }
}

/// Desired Control immutable class
///
class _$DesiredControl extends DesiredControl {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double x;
  @override
  final double y;
  @override
  final double z;
  @override
  final double k;
  @override
  final double m;
  @override
  final double n;
  @override
  final DesiredControlBitfieldFlags flags;

  factory _$DesiredControl([void Function(DesiredControlBuilder b)? updates]) =>
      (DesiredControlBuilder()..update(updates)).build() as _$DesiredControl;

  factory _$DesiredControl.fromJson(core.Map<String, dynamic> json) {
    var val = DesiredControlBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.x = json.containsKey('x') ? json['x'] as double : 0;
    val.y = json.containsKey('y') ? json['y'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.k = json.containsKey('k') ? json['k'] as double : 0;
    val.m = json.containsKey('m') ? json['m'] as double : 0;
    val.n = json.containsKey('n') ? json['n'] as double : 0;
    val.flags = json.containsKey('flags') && json['flags'] != null
        ? DesiredControlBitfieldFlags(json['flags'] as int)
        : DesiredControlBitfieldFlags(0);

    return val.build() as _$DesiredControl;
  }

  _$DesiredControl._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.x,
      required this.y,
      required this.z,
      required this.k,
      required this.m,
      required this.n,
      required this.flags})
      : super._();

  @override
  DesiredControl rebuild(void Function(DesiredControlBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DesiredControlBuilder toBuilder() => DesiredControlBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is DesiredControl &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (x == other.x || x - other.x <= 1E-7) &&
        (y == other.y || y - other.y <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        (k == other.k || k - other.k <= 1E-7) &&
        (m == other.m || m - other.m <= 1E-7) &&
        (n == other.n || n - other.n <= 1E-7) &&
        flags == other.flags;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    0,
                                                    timestamp?.hashCode ??
                                                        null.hashCode),
                                                src.hashCode),
                                            srcEnt.hashCode),
                                        dst.hashCode),
                                    dstEnt.hashCode),
                                x.hashCode),
                            y.hashCode),
                        z.hashCode),
                    k.hashCode),
                m.hashCode),
            n.hashCode),
        flags.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('DesiredControl')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('x', '$x (N)')
          ..add('y', '$y (N)')
          ..add('z', '$z (N)')
          ..add('k', '$k (Nm)')
          ..add('m', '$m (Nm)')
          ..add('n', '$n (Nm)')
          ..add('flags', '$flags (Bitfield) [${flags.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'DesiredControl',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'x': x,
        'y': y,
        'z': z,
        'k': k,
        'm': m,
        'n': n,
        'flags': flags.value,
      };
}

/// Desired Control builder class
///
class DesiredControlBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<DesiredControl, DesiredControlBuilder> {
  _$DesiredControl? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _x = 0;
  double get x => _$this._x;
  set x(double x) => _$this._x = x;

  double _y = 0;
  double get y => _$this._y;
  set y(double y) => _$this._y = y;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  double _k = 0;
  double get k => _$this._k;
  set k(double k) => _$this._k = k;

  double _m = 0;
  double get m => _$this._m;
  set m(double m) => _$this._m = m;

  double _n = 0;
  double get n => _$this._n;
  set n(double n) => _$this._n = n;

  DesiredControlBitfieldFlags _flags = DesiredControlBitfieldFlags(0);
  DesiredControlBitfieldFlags get flags => _$this._flags;
  set flags(DesiredControlBitfieldFlags flags) => _$this._flags = flags;

  DesiredControlBuilder();

  DesiredControlBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DesiredControlBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$DesiredControl.fromJson(json);
    replace(v);
  }

  @override
  DesiredControlBuilder fromJson(core.Map<String, dynamic> json) =>
      DesiredControlBuilder.fromJson(json);

  @override
  DesiredControlBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      DesiredControlBuilder()..copyFromHeader(headerFrom);

  DesiredControlBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _x = _$v!.x;
      _y = _$v!.y;
      _z = _$v!.z;
      _k = _$v!.k;
      _m = _$v!.m;
      _n = _$v!.n;
      _flags = _$v!.flags;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(DesiredControl other) {
    _$v = other as _$DesiredControl;
  }

  @override
  void update(void Function(DesiredControlBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  DesiredControl build() {
    final result = _$v ??
        _$DesiredControl._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            x: x,
            y: y,
            z: z,
            k: k,
            m: m,
            n: n,
            flags: flags);
    replace(result);
    return result;
  }
}

/// Desired Heading Rate immutable class
///
class _$DesiredHeadingRate extends DesiredHeadingRate {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$DesiredHeadingRate(
          [void Function(DesiredHeadingRateBuilder b)? updates]) =>
      (DesiredHeadingRateBuilder()..update(updates)).build()
          as _$DesiredHeadingRate;

  factory _$DesiredHeadingRate.fromJson(core.Map<String, dynamic> json) {
    var val = DesiredHeadingRateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$DesiredHeadingRate;
  }

  _$DesiredHeadingRate._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  DesiredHeadingRate rebuild(
          void Function(DesiredHeadingRateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DesiredHeadingRateBuilder toBuilder() =>
      DesiredHeadingRateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is DesiredHeadingRate &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('DesiredHeadingRate')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (rad/s) [${value * 180.0 / math.pi} (deg/s)]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'DesiredHeadingRate',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Desired Heading Rate builder class
///
class DesiredHeadingRateBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<DesiredHeadingRate, DesiredHeadingRateBuilder> {
  _$DesiredHeadingRate? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  DesiredHeadingRateBuilder();

  DesiredHeadingRateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DesiredHeadingRateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$DesiredHeadingRate.fromJson(json);
    replace(v);
  }

  @override
  DesiredHeadingRateBuilder fromJson(core.Map<String, dynamic> json) =>
      DesiredHeadingRateBuilder.fromJson(json);

  @override
  DesiredHeadingRateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      DesiredHeadingRateBuilder()..copyFromHeader(headerFrom);

  DesiredHeadingRateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(DesiredHeadingRate other) {
    _$v = other as _$DesiredHeadingRate;
  }

  @override
  void update(void Function(DesiredHeadingRateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  DesiredHeadingRate build() {
    final result = _$v ??
        _$DesiredHeadingRate._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Desired Velocity immutable class
///
class _$DesiredVelocity extends DesiredVelocity {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double u;
  @override
  final double v;
  @override
  final double w;
  @override
  final double p;
  @override
  final double q;
  @override
  final double r;
  @override
  final DesiredVelocityBitfieldFlags flags;

  factory _$DesiredVelocity(
          [void Function(DesiredVelocityBuilder b)? updates]) =>
      (DesiredVelocityBuilder()..update(updates)).build() as _$DesiredVelocity;

  factory _$DesiredVelocity.fromJson(core.Map<String, dynamic> json) {
    var val = DesiredVelocityBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.u = json.containsKey('u') ? json['u'] as double : 0;
    val.v = json.containsKey('v') ? json['v'] as double : 0;
    val.w = json.containsKey('w') ? json['w'] as double : 0;
    val.p = json.containsKey('p') ? json['p'] as double : 0;
    val.q = json.containsKey('q') ? json['q'] as double : 0;
    val.r = json.containsKey('r') ? json['r'] as double : 0;
    val.flags = json.containsKey('flags') && json['flags'] != null
        ? DesiredVelocityBitfieldFlags(json['flags'] as int)
        : DesiredVelocityBitfieldFlags(0);

    return val.build() as _$DesiredVelocity;
  }

  _$DesiredVelocity._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.u,
      required this.v,
      required this.w,
      required this.p,
      required this.q,
      required this.r,
      required this.flags})
      : super._();

  @override
  DesiredVelocity rebuild(void Function(DesiredVelocityBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DesiredVelocityBuilder toBuilder() => DesiredVelocityBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is DesiredVelocity &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (u == other.u || u - other.u <= 1E-7) &&
        (v == other.v || v - other.v <= 1E-7) &&
        (w == other.w || w - other.w <= 1E-7) &&
        (p == other.p || p - other.p <= 1E-7) &&
        (q == other.q || q - other.q <= 1E-7) &&
        (r == other.r || r - other.r <= 1E-7) &&
        flags == other.flags;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    0,
                                                    timestamp?.hashCode ??
                                                        null.hashCode),
                                                src.hashCode),
                                            srcEnt.hashCode),
                                        dst.hashCode),
                                    dstEnt.hashCode),
                                u.hashCode),
                            v.hashCode),
                        w.hashCode),
                    p.hashCode),
                q.hashCode),
            r.hashCode),
        flags.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('DesiredVelocity')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('u', '$u (m/s)')
          ..add('v', '$v (m/s)')
          ..add('w', '$w (m/s)')
          ..add('p', '$p (m/s)')
          ..add('q', '$q (m/s)')
          ..add('r', '$r (m/s)')
          ..add('flags', '$flags (Bitfield) [${flags.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'DesiredVelocity',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'u': u,
        'v': v,
        'w': w,
        'p': p,
        'q': q,
        'r': r,
        'flags': flags.value,
      };
}

/// Desired Velocity builder class
///
class DesiredVelocityBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<DesiredVelocity, DesiredVelocityBuilder> {
  _$DesiredVelocity? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _u = 0;
  double get u => _$this._u;
  set u(double u) => _$this._u = u;

  double _v = 0;
  double get v => _$this._v;
  set v(double v) => _$this._v = v;

  double _w = 0;
  double get w => _$this._w;
  set w(double w) => _$this._w = w;

  double _p = 0;
  double get p => _$this._p;
  set p(double p) => _$this._p = p;

  double _q = 0;
  double get q => _$this._q;
  set q(double q) => _$this._q = q;

  double _r = 0;
  double get r => _$this._r;
  set r(double r) => _$this._r = r;

  DesiredVelocityBitfieldFlags _flags = DesiredVelocityBitfieldFlags(0);
  DesiredVelocityBitfieldFlags get flags => _$this._flags;
  set flags(DesiredVelocityBitfieldFlags flags) => _$this._flags = flags;

  DesiredVelocityBuilder();

  DesiredVelocityBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DesiredVelocityBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$DesiredVelocity.fromJson(json);
    replace(v);
  }

  @override
  DesiredVelocityBuilder fromJson(core.Map<String, dynamic> json) =>
      DesiredVelocityBuilder.fromJson(json);

  @override
  DesiredVelocityBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      DesiredVelocityBuilder()..copyFromHeader(headerFrom);

  DesiredVelocityBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _u = _$v!.u;
      _v = _$v!.v;
      _w = _$v!.w;
      _p = _$v!.p;
      _q = _$v!.q;
      _r = _$v!.r;
      _flags = _$v!.flags;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(DesiredVelocity other) {
    _$v = other as _$DesiredVelocity;
  }

  @override
  void update(void Function(DesiredVelocityBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  DesiredVelocity build() {
    final result = _$v ??
        _$DesiredVelocity._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            u: u,
            v: v,
            w: w,
            p: p,
            q: q,
            r: r,
            flags: flags);
    replace(result);
    return result;
  }
}

/// Path Control State immutable class
///
class _$PathControlState extends PathControlState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int pathRef;
  @override
  final double startLat;
  @override
  final double startLon;
  @override
  final double startZ;
  @override
  final ZUnitsEnum startZUnits;
  @override
  final double endLat;
  @override
  final double endLon;
  @override
  final double endZ;
  @override
  final ZUnitsEnum endZUnits;
  @override
  final double lradius;
  @override
  final PathControlStateBitfieldFlags flags;
  @override
  final double x;
  @override
  final double y;
  @override
  final double z;
  @override
  final double vx;
  @override
  final double vy;
  @override
  final double vz;
  @override
  final double courseError;
  @override
  final int eta;

  factory _$PathControlState(
          [void Function(PathControlStateBuilder b)? updates]) =>
      (PathControlStateBuilder()..update(updates)).build()
          as _$PathControlState;

  factory _$PathControlState.fromJson(core.Map<String, dynamic> json) {
    var val = PathControlStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.pathRef = json.containsKey('path_ref') ? json['path_ref'] as int : 0;
    val.startLat =
        json.containsKey('start_lat') ? json['start_lat'] as double : 0;
    val.startLon =
        json.containsKey('start_lon') ? json['start_lon'] as double : 0;
    val.startZ = json.containsKey('start_z') ? json['start_z'] as double : 0;
    val.startZUnits =
        json.containsKey('start_z_units') && json['start_z_units'] != null
            ? ZUnitsEnum(json['start_z_units'] as int)
            : ZUnitsEnum(0);
    val.endLat = json.containsKey('end_lat') ? json['end_lat'] as double : 0;
    val.endLon = json.containsKey('end_lon') ? json['end_lon'] as double : 0;
    val.endZ = json.containsKey('end_z') ? json['end_z'] as double : 0;
    val.endZUnits =
        json.containsKey('end_z_units') && json['end_z_units'] != null
            ? ZUnitsEnum(json['end_z_units'] as int)
            : ZUnitsEnum(0);
    val.lradius = json.containsKey('lradius') ? json['lradius'] as double : 0;
    val.flags = json.containsKey('flags') && json['flags'] != null
        ? PathControlStateBitfieldFlags(json['flags'] as int)
        : PathControlStateBitfieldFlags(0);
    val.x = json.containsKey('x') ? json['x'] as double : 0;
    val.y = json.containsKey('y') ? json['y'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.vx = json.containsKey('vx') ? json['vx'] as double : 0;
    val.vy = json.containsKey('vy') ? json['vy'] as double : 0;
    val.vz = json.containsKey('vz') ? json['vz'] as double : 0;
    val.courseError =
        json.containsKey('course_error') ? json['course_error'] as double : 0;
    val.eta = json.containsKey('eta') ? json['eta'] as int : 0;

    return val.build() as _$PathControlState;
  }

  _$PathControlState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.pathRef,
      required this.startLat,
      required this.startLon,
      required this.startZ,
      required this.startZUnits,
      required this.endLat,
      required this.endLon,
      required this.endZ,
      required this.endZUnits,
      required this.lradius,
      required this.flags,
      required this.x,
      required this.y,
      required this.z,
      required this.vx,
      required this.vy,
      required this.vz,
      required this.courseError,
      required this.eta})
      : super._();

  @override
  PathControlState rebuild(void Function(PathControlStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  PathControlStateBuilder toBuilder() =>
      PathControlStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is PathControlState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        pathRef == other.pathRef &&
        (startLat == other.startLat || startLat - other.startLat <= 1E-7) &&
        (startLon == other.startLon || startLon - other.startLon <= 1E-7) &&
        (startZ == other.startZ || startZ - other.startZ <= 1E-7) &&
        startZUnits == other.startZUnits &&
        (endLat == other.endLat || endLat - other.endLat <= 1E-7) &&
        (endLon == other.endLon || endLon - other.endLon <= 1E-7) &&
        (endZ == other.endZ || endZ - other.endZ <= 1E-7) &&
        endZUnits == other.endZUnits &&
        (lradius == other.lradius || lradius - other.lradius <= 1E-7) &&
        flags == other.flags &&
        (x == other.x || x - other.x <= 1E-7) &&
        (y == other.y || y - other.y <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        (vx == other.vx || vx - other.vx <= 1E-7) &&
        (vy == other.vy || vy - other.vy <= 1E-7) &&
        (vz == other.vz || vz - other.vz <= 1E-7) &&
        (courseError == other.courseError ||
            courseError - other.courseError <= 1E-7) &&
        eta == other.eta;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc($jc($jc($jc($jc(0, timestamp?.hashCode ?? null.hashCode), src.hashCode), srcEnt.hashCode), dst.hashCode), dstEnt.hashCode),
                                                                                pathRef.hashCode),
                                                                            startLat.hashCode),
                                                                        startLon.hashCode),
                                                                    startZ.hashCode),
                                                                startZUnits.hashCode),
                                                            endLat.hashCode),
                                                        endLon.hashCode),
                                                    endZ.hashCode),
                                                endZUnits.hashCode),
                                            lradius.hashCode),
                                        flags.hashCode),
                                    x.hashCode),
                                y.hashCode),
                            z.hashCode),
                        vx.hashCode),
                    vy.hashCode),
                vz.hashCode),
            courseError.hashCode),
        eta.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('PathControlState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('pathRef', '$pathRef')
          ..add('startLat',
              '$startLat (rad) [${startLat * 180.0 / math.pi} (deg)]')
          ..add('startLon',
              '$startLon (rad) [${startLon * 180.0 / math.pi} (deg)]')
          ..add('startZ', '$startZ (m)')
          ..add('startZUnits',
              '$startZUnits (Enumerated) [${startZUnits.toPrettyString()}]')
          ..add('endLat', '$endLat (rad) [${endLat * 180.0 / math.pi} (deg)]')
          ..add('endLon', '$endLon (rad) [${endLon * 180.0 / math.pi} (deg)]')
          ..add('endZ', '$endZ (m)')
          ..add('endZUnits',
              '$endZUnits (Enumerated) [${endZUnits.toPrettyString()}]')
          ..add('lradius', '$lradius (m)')
          ..add('flags', '$flags (Bitfield) [${flags.toPrettyString()}]')
          ..add('x', '$x (m)')
          ..add('y', '$y (m)')
          ..add('z', '$z (m)')
          ..add('vx', '$vx (m/s)')
          ..add('vy', '$vy (m/s)')
          ..add('vz', '$vz (m/s)')
          ..add('courseError',
              '$courseError (rad) [${courseError * 180.0 / math.pi} (deg)]')
          ..add('eta', '$eta (s)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'PathControlState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'path_ref': pathRef,
        'start_lat': startLat,
        'start_lon': startLon,
        'start_z': startZ,
        'start_z_units': startZUnits.value,
        'end_lat': endLat,
        'end_lon': endLon,
        'end_z': endZ,
        'end_z_units': endZUnits.value,
        'lradius': lradius,
        'flags': flags.value,
        'x': x,
        'y': y,
        'z': z,
        'vx': vx,
        'vy': vy,
        'vz': vz,
        'course_error': courseError,
        'eta': eta,
      };
}

/// Path Control State builder class
///
class PathControlStateBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<PathControlState, PathControlStateBuilder> {
  _$PathControlState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _pathRef = 0;
  int get pathRef => _$this._pathRef;
  set pathRef(int pathRef) => _$this._pathRef = pathRef;

  double _startLat = 0;
  double get startLat => _$this._startLat;
  set startLat(double startLat) => _$this._startLat = startLat;

  double _startLon = 0;
  double get startLon => _$this._startLon;
  set startLon(double startLon) => _$this._startLon = startLon;

  double _startZ = 0;
  double get startZ => _$this._startZ;
  set startZ(double startZ) => _$this._startZ = startZ;

  ZUnitsEnum _startZUnits = ZUnitsEnum(0);
  ZUnitsEnum get startZUnits => _$this._startZUnits;
  set startZUnits(ZUnitsEnum startZUnits) => _$this._startZUnits = startZUnits;

  double _endLat = 0;
  double get endLat => _$this._endLat;
  set endLat(double endLat) => _$this._endLat = endLat;

  double _endLon = 0;
  double get endLon => _$this._endLon;
  set endLon(double endLon) => _$this._endLon = endLon;

  double _endZ = 0;
  double get endZ => _$this._endZ;
  set endZ(double endZ) => _$this._endZ = endZ;

  ZUnitsEnum _endZUnits = ZUnitsEnum(0);
  ZUnitsEnum get endZUnits => _$this._endZUnits;
  set endZUnits(ZUnitsEnum endZUnits) => _$this._endZUnits = endZUnits;

  double _lradius = 0;
  double get lradius => _$this._lradius;
  set lradius(double lradius) => _$this._lradius = lradius;

  PathControlStateBitfieldFlags _flags = PathControlStateBitfieldFlags(0);
  PathControlStateBitfieldFlags get flags => _$this._flags;
  set flags(PathControlStateBitfieldFlags flags) => _$this._flags = flags;

  double _x = 0;
  double get x => _$this._x;
  set x(double x) => _$this._x = x;

  double _y = 0;
  double get y => _$this._y;
  set y(double y) => _$this._y = y;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  double _vx = 0;
  double get vx => _$this._vx;
  set vx(double vx) => _$this._vx = vx;

  double _vy = 0;
  double get vy => _$this._vy;
  set vy(double vy) => _$this._vy = vy;

  double _vz = 0;
  double get vz => _$this._vz;
  set vz(double vz) => _$this._vz = vz;

  double _courseError = 0;
  double get courseError => _$this._courseError;
  set courseError(double courseError) => _$this._courseError = courseError;

  int _eta = 0;
  int get eta => _$this._eta;
  set eta(int eta) => _$this._eta = eta;

  PathControlStateBuilder();

  PathControlStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  PathControlStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$PathControlState.fromJson(json);
    replace(v);
  }

  @override
  PathControlStateBuilder fromJson(core.Map<String, dynamic> json) =>
      PathControlStateBuilder.fromJson(json);

  @override
  PathControlStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      PathControlStateBuilder()..copyFromHeader(headerFrom);

  PathControlStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _pathRef = _$v!.pathRef;
      _startLat = _$v!.startLat;
      _startLon = _$v!.startLon;
      _startZ = _$v!.startZ;
      _startZUnits = _$v!.startZUnits;
      _endLat = _$v!.endLat;
      _endLon = _$v!.endLon;
      _endZ = _$v!.endZ;
      _endZUnits = _$v!.endZUnits;
      _lradius = _$v!.lradius;
      _flags = _$v!.flags;
      _x = _$v!.x;
      _y = _$v!.y;
      _z = _$v!.z;
      _vx = _$v!.vx;
      _vy = _$v!.vy;
      _vz = _$v!.vz;
      _courseError = _$v!.courseError;
      _eta = _$v!.eta;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(PathControlState other) {
    _$v = other as _$PathControlState;
  }

  @override
  void update(void Function(PathControlStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  PathControlState build() {
    final result = _$v ??
        _$PathControlState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            pathRef: pathRef,
            startLat: startLat,
            startLon: startLon,
            startZ: startZ,
            startZUnits: startZUnits,
            endLat: endLat,
            endLon: endLon,
            endZ: endZ,
            endZUnits: endZUnits,
            lradius: lradius,
            flags: flags,
            x: x,
            y: y,
            z: z,
            vx: vx,
            vy: vy,
            vz: vz,
            courseError: courseError,
            eta: eta);
    replace(result);
    return result;
  }
}

/// Allocated Control Torques immutable class
///
class _$AllocatedControlTorques extends AllocatedControlTorques {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double k;
  @override
  final double m;
  @override
  final double n;

  factory _$AllocatedControlTorques(
          [void Function(AllocatedControlTorquesBuilder b)? updates]) =>
      (AllocatedControlTorquesBuilder()..update(updates)).build()
          as _$AllocatedControlTorques;

  factory _$AllocatedControlTorques.fromJson(core.Map<String, dynamic> json) {
    var val = AllocatedControlTorquesBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.k = json.containsKey('k') ? json['k'] as double : 0;
    val.m = json.containsKey('m') ? json['m'] as double : 0;
    val.n = json.containsKey('n') ? json['n'] as double : 0;

    return val.build() as _$AllocatedControlTorques;
  }

  _$AllocatedControlTorques._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.k,
      required this.m,
      required this.n})
      : super._();

  @override
  AllocatedControlTorques rebuild(
          void Function(AllocatedControlTorquesBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  AllocatedControlTorquesBuilder toBuilder() =>
      AllocatedControlTorquesBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is AllocatedControlTorques &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (k == other.k || k - other.k <= 1E-7) &&
        (m == other.m || m - other.m <= 1E-7) &&
        (n == other.n || n - other.n <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                k.hashCode),
            m.hashCode),
        n.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('AllocatedControlTorques')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('k', '$k (Nm)')
          ..add('m', '$m (Nm)')
          ..add('n', '$n (Nm)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'AllocatedControlTorques',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'k': k,
        'm': m,
        'n': n,
      };
}

/// Allocated Control Torques builder class
///
class AllocatedControlTorquesBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<AllocatedControlTorques,
            AllocatedControlTorquesBuilder> {
  _$AllocatedControlTorques? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _k = 0;
  double get k => _$this._k;
  set k(double k) => _$this._k = k;

  double _m = 0;
  double get m => _$this._m;
  set m(double m) => _$this._m = m;

  double _n = 0;
  double get n => _$this._n;
  set n(double n) => _$this._n = n;

  AllocatedControlTorquesBuilder();

  AllocatedControlTorquesBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  AllocatedControlTorquesBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$AllocatedControlTorques.fromJson(json);
    replace(v);
  }

  @override
  AllocatedControlTorquesBuilder fromJson(core.Map<String, dynamic> json) =>
      AllocatedControlTorquesBuilder.fromJson(json);

  @override
  AllocatedControlTorquesBuilder newInstance(
          [ImcBuilderHeaderPart? headerFrom]) =>
      AllocatedControlTorquesBuilder()..copyFromHeader(headerFrom);

  AllocatedControlTorquesBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _k = _$v!.k;
      _m = _$v!.m;
      _n = _$v!.n;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(AllocatedControlTorques other) {
    _$v = other as _$AllocatedControlTorques;
  }

  @override
  void update(void Function(AllocatedControlTorquesBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  AllocatedControlTorques build() {
    final result = _$v ??
        _$AllocatedControlTorques._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            k: k,
            m: m,
            n: n);
    replace(result);
    return result;
  }
}

/// Control Parcel immutable class
///
class _$ControlParcel extends ControlParcel {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double p;
  @override
  final double i;
  @override
  final double d;
  @override
  final double a;

  factory _$ControlParcel([void Function(ControlParcelBuilder b)? updates]) =>
      (ControlParcelBuilder()..update(updates)).build() as _$ControlParcel;

  factory _$ControlParcel.fromJson(core.Map<String, dynamic> json) {
    var val = ControlParcelBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.p = json.containsKey('p') ? json['p'] as double : 0;
    val.i = json.containsKey('i') ? json['i'] as double : 0;
    val.d = json.containsKey('d') ? json['d'] as double : 0;
    val.a = json.containsKey('a') ? json['a'] as double : 0;

    return val.build() as _$ControlParcel;
  }

  _$ControlParcel._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.p,
      required this.i,
      required this.d,
      required this.a})
      : super._();

  @override
  ControlParcel rebuild(void Function(ControlParcelBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  ControlParcelBuilder toBuilder() => ControlParcelBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is ControlParcel &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (p == other.p || p - other.p <= 1E-7) &&
        (i == other.i || i - other.i <= 1E-7) &&
        (d == other.d || d - other.d <= 1E-7) &&
        (a == other.a || a - other.a <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    p.hashCode),
                i.hashCode),
            d.hashCode),
        a.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('ControlParcel')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('p', '$p')
          ..add('i', '$i')
          ..add('d', '$d')
          ..add('a', '$a'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'ControlParcel',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'p': p,
        'i': i,
        'd': d,
        'a': a,
      };
}

/// Control Parcel builder class
///
class ControlParcelBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<ControlParcel, ControlParcelBuilder> {
  _$ControlParcel? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _p = 0;
  double get p => _$this._p;
  set p(double p) => _$this._p = p;

  double _i = 0;
  double get i => _$this._i;
  set i(double i) => _$this._i = i;

  double _d = 0;
  double get d => _$this._d;
  set d(double d) => _$this._d = d;

  double _a = 0;
  double get a => _$this._a;
  set a(double a) => _$this._a = a;

  ControlParcelBuilder();

  ControlParcelBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  ControlParcelBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$ControlParcel.fromJson(json);
    replace(v);
  }

  @override
  ControlParcelBuilder fromJson(core.Map<String, dynamic> json) =>
      ControlParcelBuilder.fromJson(json);

  @override
  ControlParcelBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      ControlParcelBuilder()..copyFromHeader(headerFrom);

  ControlParcelBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _p = _$v!.p;
      _i = _$v!.i;
      _d = _$v!.d;
      _a = _$v!.a;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(ControlParcel other) {
    _$v = other as _$ControlParcel;
  }

  @override
  void update(void Function(ControlParcelBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  ControlParcel build() {
    final result = _$v ??
        _$ControlParcel._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            p: p,
            i: i,
            d: d,
            a: a);
    replace(result);
    return result;
  }
}

/// Brake immutable class
///
class _$Brake extends Brake {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final BrakeEnumOp op;

  factory _$Brake([void Function(BrakeBuilder b)? updates]) =>
      (BrakeBuilder()..update(updates)).build() as _$Brake;

  factory _$Brake.fromJson(core.Map<String, dynamic> json) {
    var val = BrakeBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.op = json.containsKey('op') && json['op'] != null
        ? BrakeEnumOp(json['op'] as int)
        : BrakeEnumOp(0);

    return val.build() as _$Brake;
  }

  _$Brake._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.op})
      : super._();

  @override
  Brake rebuild(void Function(BrakeBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  BrakeBuilder toBuilder() => BrakeBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Brake &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        op == other.op;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        op.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Brake')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Brake',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'op': op.value,
      };
}

/// Brake builder class
///
class BrakeBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Brake, BrakeBuilder> {
  _$Brake? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  BrakeEnumOp _op = BrakeEnumOp(0);
  BrakeEnumOp get op => _$this._op;
  set op(BrakeEnumOp op) => _$this._op = op;

  BrakeBuilder();

  BrakeBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  BrakeBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Brake.fromJson(json);
    replace(v);
  }

  @override
  BrakeBuilder fromJson(core.Map<String, dynamic> json) =>
      BrakeBuilder.fromJson(json);

  @override
  BrakeBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      BrakeBuilder()..copyFromHeader(headerFrom);

  BrakeBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _op = _$v!.op;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Brake other) {
    _$v = other as _$Brake;
  }

  @override
  void update(void Function(BrakeBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Brake build() {
    final result = _$v ??
        _$Brake._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            op: op);
    replace(result);
    return result;
  }
}

/// Desired Linear State immutable class
///
class _$DesiredLinearState extends DesiredLinearState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double x;
  @override
  final double y;
  @override
  final double z;
  @override
  final double vx;
  @override
  final double vy;
  @override
  final double vz;
  @override
  final double ax;
  @override
  final double ay;
  @override
  final double az;
  @override
  final DesiredLinearStateBitfieldFlags flags;

  factory _$DesiredLinearState(
          [void Function(DesiredLinearStateBuilder b)? updates]) =>
      (DesiredLinearStateBuilder()..update(updates)).build()
          as _$DesiredLinearState;

  factory _$DesiredLinearState.fromJson(core.Map<String, dynamic> json) {
    var val = DesiredLinearStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.x = json.containsKey('x') ? json['x'] as double : 0;
    val.y = json.containsKey('y') ? json['y'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.vx = json.containsKey('vx') ? json['vx'] as double : 0;
    val.vy = json.containsKey('vy') ? json['vy'] as double : 0;
    val.vz = json.containsKey('vz') ? json['vz'] as double : 0;
    val.ax = json.containsKey('ax') ? json['ax'] as double : 0;
    val.ay = json.containsKey('ay') ? json['ay'] as double : 0;
    val.az = json.containsKey('az') ? json['az'] as double : 0;
    val.flags = json.containsKey('flags') && json['flags'] != null
        ? DesiredLinearStateBitfieldFlags(json['flags'] as int)
        : DesiredLinearStateBitfieldFlags(0);

    return val.build() as _$DesiredLinearState;
  }

  _$DesiredLinearState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.x,
      required this.y,
      required this.z,
      required this.vx,
      required this.vy,
      required this.vz,
      required this.ax,
      required this.ay,
      required this.az,
      required this.flags})
      : super._();

  @override
  DesiredLinearState rebuild(
          void Function(DesiredLinearStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DesiredLinearStateBuilder toBuilder() =>
      DesiredLinearStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is DesiredLinearState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (x == other.x || x - other.x <= 1E-7) &&
        (y == other.y || y - other.y <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        (vx == other.vx || vx - other.vx <= 1E-7) &&
        (vy == other.vy || vy - other.vy <= 1E-7) &&
        (vz == other.vz || vz - other.vz <= 1E-7) &&
        (ax == other.ax || ax - other.ax <= 1E-7) &&
        (ay == other.ay || ay - other.ay <= 1E-7) &&
        (az == other.az || az - other.az <= 1E-7) &&
        flags == other.flags;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                0,
                                                                timestamp
                                                                        ?.hashCode ??
                                                                    null.hashCode),
                                                            src.hashCode),
                                                        srcEnt.hashCode),
                                                    dst.hashCode),
                                                dstEnt.hashCode),
                                            x.hashCode),
                                        y.hashCode),
                                    z.hashCode),
                                vx.hashCode),
                            vy.hashCode),
                        vz.hashCode),
                    ax.hashCode),
                ay.hashCode),
            az.hashCode),
        flags.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('DesiredLinearState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('x', '$x (m)')
          ..add('y', '$y (m)')
          ..add('z', '$z (m)')
          ..add('vx', '$vx (m/s)')
          ..add('vy', '$vy (m/s)')
          ..add('vz', '$vz (m/s)')
          ..add('ax', '$ax (m/s/s)')
          ..add('ay', '$ay (m/s/s)')
          ..add('az', '$az (m/s/s)')
          ..add('flags', '$flags (Bitfield) [${flags.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'DesiredLinearState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'x': x,
        'y': y,
        'z': z,
        'vx': vx,
        'vy': vy,
        'vz': vz,
        'ax': ax,
        'ay': ay,
        'az': az,
        'flags': flags.value,
      };
}

/// Desired Linear State builder class
///
class DesiredLinearStateBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<DesiredLinearState, DesiredLinearStateBuilder> {
  _$DesiredLinearState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _x = 0;
  double get x => _$this._x;
  set x(double x) => _$this._x = x;

  double _y = 0;
  double get y => _$this._y;
  set y(double y) => _$this._y = y;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  double _vx = 0;
  double get vx => _$this._vx;
  set vx(double vx) => _$this._vx = vx;

  double _vy = 0;
  double get vy => _$this._vy;
  set vy(double vy) => _$this._vy = vy;

  double _vz = 0;
  double get vz => _$this._vz;
  set vz(double vz) => _$this._vz = vz;

  double _ax = 0;
  double get ax => _$this._ax;
  set ax(double ax) => _$this._ax = ax;

  double _ay = 0;
  double get ay => _$this._ay;
  set ay(double ay) => _$this._ay = ay;

  double _az = 0;
  double get az => _$this._az;
  set az(double az) => _$this._az = az;

  DesiredLinearStateBitfieldFlags _flags = DesiredLinearStateBitfieldFlags(0);
  DesiredLinearStateBitfieldFlags get flags => _$this._flags;
  set flags(DesiredLinearStateBitfieldFlags flags) => _$this._flags = flags;

  DesiredLinearStateBuilder();

  DesiredLinearStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DesiredLinearStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$DesiredLinearState.fromJson(json);
    replace(v);
  }

  @override
  DesiredLinearStateBuilder fromJson(core.Map<String, dynamic> json) =>
      DesiredLinearStateBuilder.fromJson(json);

  @override
  DesiredLinearStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      DesiredLinearStateBuilder()..copyFromHeader(headerFrom);

  DesiredLinearStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _x = _$v!.x;
      _y = _$v!.y;
      _z = _$v!.z;
      _vx = _$v!.vx;
      _vy = _$v!.vy;
      _vz = _$v!.vz;
      _ax = _$v!.ax;
      _ay = _$v!.ay;
      _az = _$v!.az;
      _flags = _$v!.flags;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(DesiredLinearState other) {
    _$v = other as _$DesiredLinearState;
  }

  @override
  void update(void Function(DesiredLinearStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  DesiredLinearState build() {
    final result = _$v ??
        _$DesiredLinearState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            x: x,
            y: y,
            z: z,
            vx: vx,
            vy: vy,
            vz: vz,
            ax: ax,
            ay: ay,
            az: az,
            flags: flags);
    replace(result);
    return result;
  }
}

/// Desired Throttle immutable class
///
class _$DesiredThrottle extends DesiredThrottle {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$DesiredThrottle(
          [void Function(DesiredThrottleBuilder b)? updates]) =>
      (DesiredThrottleBuilder()..update(updates)).build() as _$DesiredThrottle;

  factory _$DesiredThrottle.fromJson(core.Map<String, dynamic> json) {
    var val = DesiredThrottleBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$DesiredThrottle;
  }

  _$DesiredThrottle._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  DesiredThrottle rebuild(void Function(DesiredThrottleBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DesiredThrottleBuilder toBuilder() => DesiredThrottleBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is DesiredThrottle &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('DesiredThrottle')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (%)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'DesiredThrottle',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Desired Throttle builder class
///
class DesiredThrottleBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<DesiredThrottle, DesiredThrottleBuilder> {
  _$DesiredThrottle? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  DesiredThrottleBuilder();

  DesiredThrottleBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DesiredThrottleBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$DesiredThrottle.fromJson(json);
    replace(v);
  }

  @override
  DesiredThrottleBuilder fromJson(core.Map<String, dynamic> json) =>
      DesiredThrottleBuilder.fromJson(json);

  @override
  DesiredThrottleBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      DesiredThrottleBuilder()..copyFromHeader(headerFrom);

  DesiredThrottleBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(DesiredThrottle other) {
    _$v = other as _$DesiredThrottle;
  }

  @override
  void update(void Function(DesiredThrottleBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  DesiredThrottle build() {
    final result = _$v ??
        _$DesiredThrottle._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Goto Maneuver immutable class
///
class _$Goto extends Goto {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int timeout;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double z;
  @override
  final ZUnitsEnum zUnits;
  @override
  final double speed;
  @override
  final SpeedUnitsEnum speedUnits;
  @override
  final double roll;
  @override
  final double pitch;
  @override
  final double yaw;
  @override
  final String custom;

  factory _$Goto([void Function(GotoBuilder b)? updates]) =>
      (GotoBuilder()..update(updates)).build() as _$Goto;

  factory _$Goto.fromJson(core.Map<String, dynamic> json) {
    var val = GotoBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.timeout = json.containsKey('timeout') ? json['timeout'] as int : 0;
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.zUnits = json.containsKey('z_units') && json['z_units'] != null
        ? ZUnitsEnum(json['z_units'] as int)
        : ZUnitsEnum(0);
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.speedUnits =
        json.containsKey('speed_units') && json['speed_units'] != null
            ? SpeedUnitsEnum(json['speed_units'] as int)
            : SpeedUnitsEnum(0);
    val.roll = json.containsKey('roll') ? json['roll'] as double : 0;
    val.pitch = json.containsKey('pitch') ? json['pitch'] as double : 0;
    val.yaw = json.containsKey('yaw') ? json['yaw'] as double : 0;
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$Goto;
  }

  _$Goto._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.timeout,
      required this.lat,
      required this.lon,
      required this.z,
      required this.zUnits,
      required this.speed,
      required this.speedUnits,
      required this.roll,
      required this.pitch,
      required this.yaw,
      required this.custom})
      : super._();

  @override
  Goto rebuild(void Function(GotoBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GotoBuilder toBuilder() => GotoBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Goto &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        timeout == other.timeout &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        zUnits == other.zUnits &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        speedUnits == other.speedUnits &&
        (roll == other.roll || roll - other.roll <= 1E-7) &&
        (pitch == other.pitch || pitch - other.pitch <= 1E-7) &&
        (yaw == other.yaw || yaw - other.yaw <= 1E-7) &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    0,
                                                                    timestamp
                                                                            ?.hashCode ??
                                                                        null.hashCode),
                                                                src.hashCode),
                                                            srcEnt.hashCode),
                                                        dst.hashCode),
                                                    dstEnt.hashCode),
                                                timeout.hashCode),
                                            lat.hashCode),
                                        lon.hashCode),
                                    z.hashCode),
                                zUnits.hashCode),
                            speed.hashCode),
                        speedUnits.hashCode),
                    roll.hashCode),
                pitch.hashCode),
            yaw.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Goto')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('timeout', '$timeout (s)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('z', '$z (m)')
          ..add('zUnits', '$zUnits (Enumerated) [${zUnits.toPrettyString()}]')
          ..add('speed', '$speed')
          ..add('speedUnits',
              '$speedUnits (Enumerated) [${speedUnits.toPrettyString()}]')
          ..add('roll', '$roll (rad) [${roll * 180.0 / math.pi} (deg)]')
          ..add('pitch', '$pitch (rad) [${pitch * 180.0 / math.pi} (deg)]')
          ..add('yaw', '$yaw (rad) [${yaw * 180.0 / math.pi} (deg)]')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Goto',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'timeout': timeout,
        'lat': lat,
        'lon': lon,
        'z': z,
        'z_units': zUnits.value,
        'speed': speed,
        'speed_units': speedUnits.value,
        'roll': roll,
        'pitch': pitch,
        'yaw': yaw,
        'custom': custom,
      };
}

/// Goto Maneuver builder class
///
class GotoBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Goto, GotoBuilder> {
  _$Goto? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _timeout = 0;
  int get timeout => _$this._timeout;
  set timeout(int timeout) => _$this._timeout = timeout;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  ZUnitsEnum _zUnits = ZUnitsEnum(0);
  ZUnitsEnum get zUnits => _$this._zUnits;
  set zUnits(ZUnitsEnum zUnits) => _$this._zUnits = zUnits;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  SpeedUnitsEnum _speedUnits = SpeedUnitsEnum(0);
  SpeedUnitsEnum get speedUnits => _$this._speedUnits;
  set speedUnits(SpeedUnitsEnum speedUnits) => _$this._speedUnits = speedUnits;

  double _roll = 0;
  double get roll => _$this._roll;
  set roll(double roll) => _$this._roll = roll;

  double _pitch = 0;
  double get pitch => _$this._pitch;
  set pitch(double pitch) => _$this._pitch = pitch;

  double _yaw = 0;
  double get yaw => _$this._yaw;
  set yaw(double yaw) => _$this._yaw = yaw;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  GotoBuilder();

  GotoBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  GotoBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Goto.fromJson(json);
    replace(v);
  }

  @override
  GotoBuilder fromJson(core.Map<String, dynamic> json) =>
      GotoBuilder.fromJson(json);

  @override
  GotoBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      GotoBuilder()..copyFromHeader(headerFrom);

  GotoBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _timeout = _$v!.timeout;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _z = _$v!.z;
      _zUnits = _$v!.zUnits;
      _speed = _$v!.speed;
      _speedUnits = _$v!.speedUnits;
      _roll = _$v!.roll;
      _pitch = _$v!.pitch;
      _yaw = _$v!.yaw;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Goto other) {
    _$v = other as _$Goto;
  }

  @override
  void update(void Function(GotoBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Goto build() {
    final result = _$v ??
        _$Goto._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            timeout: timeout,
            lat: lat,
            lon: lon,
            z: z,
            zUnits: zUnits,
            speed: speed,
            speedUnits: speedUnits,
            roll: roll,
            pitch: pitch,
            yaw: yaw,
            custom: custom);
    replace(result);
    return result;
  }
}

/// PopUp Maneuver immutable class
///
class _$PopUp extends PopUp {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int timeout;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double z;
  @override
  final ZUnitsEnum zUnits;
  @override
  final double speed;
  @override
  final SpeedUnitsEnum speedUnits;
  @override
  final int duration;
  @override
  final double radius;
  @override
  final PopUpBitfieldFlags flags;
  @override
  final String custom;

  factory _$PopUp([void Function(PopUpBuilder b)? updates]) =>
      (PopUpBuilder()..update(updates)).build() as _$PopUp;

  factory _$PopUp.fromJson(core.Map<String, dynamic> json) {
    var val = PopUpBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.timeout = json.containsKey('timeout') ? json['timeout'] as int : 0;
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.zUnits = json.containsKey('z_units') && json['z_units'] != null
        ? ZUnitsEnum(json['z_units'] as int)
        : ZUnitsEnum(0);
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.speedUnits =
        json.containsKey('speed_units') && json['speed_units'] != null
            ? SpeedUnitsEnum(json['speed_units'] as int)
            : SpeedUnitsEnum(0);
    val.duration = json.containsKey('duration') ? json['duration'] as int : 0;
    val.radius = json.containsKey('radius') ? json['radius'] as double : 0;
    val.flags = json.containsKey('flags') && json['flags'] != null
        ? PopUpBitfieldFlags(json['flags'] as int)
        : PopUpBitfieldFlags(0);
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$PopUp;
  }

  _$PopUp._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.timeout,
      required this.lat,
      required this.lon,
      required this.z,
      required this.zUnits,
      required this.speed,
      required this.speedUnits,
      required this.duration,
      required this.radius,
      required this.flags,
      required this.custom})
      : super._();

  @override
  PopUp rebuild(void Function(PopUpBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  PopUpBuilder toBuilder() => PopUpBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is PopUp &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        timeout == other.timeout &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        zUnits == other.zUnits &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        speedUnits == other.speedUnits &&
        duration == other.duration &&
        (radius == other.radius || radius - other.radius <= 1E-7) &&
        flags == other.flags &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    0,
                                                                    timestamp
                                                                            ?.hashCode ??
                                                                        null.hashCode),
                                                                src.hashCode),
                                                            srcEnt.hashCode),
                                                        dst.hashCode),
                                                    dstEnt.hashCode),
                                                timeout.hashCode),
                                            lat.hashCode),
                                        lon.hashCode),
                                    z.hashCode),
                                zUnits.hashCode),
                            speed.hashCode),
                        speedUnits.hashCode),
                    duration.hashCode),
                radius.hashCode),
            flags.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('PopUp')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('timeout', '$timeout (s)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('z', '$z (m)')
          ..add('zUnits', '$zUnits (Enumerated) [${zUnits.toPrettyString()}]')
          ..add('speed', '$speed')
          ..add('speedUnits',
              '$speedUnits (Enumerated) [${speedUnits.toPrettyString()}]')
          ..add('duration', '$duration (s)')
          ..add('radius', '$radius (m)')
          ..add('flags', '$flags (Bitfield) [${flags.toPrettyString()}]')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'PopUp',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'timeout': timeout,
        'lat': lat,
        'lon': lon,
        'z': z,
        'z_units': zUnits.value,
        'speed': speed,
        'speed_units': speedUnits.value,
        'duration': duration,
        'radius': radius,
        'flags': flags.value,
        'custom': custom,
      };
}

/// PopUp Maneuver builder class
///
class PopUpBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<PopUp, PopUpBuilder> {
  _$PopUp? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _timeout = 0;
  int get timeout => _$this._timeout;
  set timeout(int timeout) => _$this._timeout = timeout;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  ZUnitsEnum _zUnits = ZUnitsEnum(0);
  ZUnitsEnum get zUnits => _$this._zUnits;
  set zUnits(ZUnitsEnum zUnits) => _$this._zUnits = zUnits;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  SpeedUnitsEnum _speedUnits = SpeedUnitsEnum(0);
  SpeedUnitsEnum get speedUnits => _$this._speedUnits;
  set speedUnits(SpeedUnitsEnum speedUnits) => _$this._speedUnits = speedUnits;

  int _duration = 0;
  int get duration => _$this._duration;
  set duration(int duration) => _$this._duration = duration;

  double _radius = 0;
  double get radius => _$this._radius;
  set radius(double radius) => _$this._radius = radius;

  PopUpBitfieldFlags _flags = PopUpBitfieldFlags(0);
  PopUpBitfieldFlags get flags => _$this._flags;
  set flags(PopUpBitfieldFlags flags) => _$this._flags = flags;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  PopUpBuilder();

  PopUpBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  PopUpBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$PopUp.fromJson(json);
    replace(v);
  }

  @override
  PopUpBuilder fromJson(core.Map<String, dynamic> json) =>
      PopUpBuilder.fromJson(json);

  @override
  PopUpBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      PopUpBuilder()..copyFromHeader(headerFrom);

  PopUpBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _timeout = _$v!.timeout;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _z = _$v!.z;
      _zUnits = _$v!.zUnits;
      _speed = _$v!.speed;
      _speedUnits = _$v!.speedUnits;
      _duration = _$v!.duration;
      _radius = _$v!.radius;
      _flags = _$v!.flags;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(PopUp other) {
    _$v = other as _$PopUp;
  }

  @override
  void update(void Function(PopUpBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  PopUp build() {
    final result = _$v ??
        _$PopUp._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            timeout: timeout,
            lat: lat,
            lon: lon,
            z: z,
            zUnits: zUnits,
            speed: speed,
            speedUnits: speedUnits,
            duration: duration,
            radius: radius,
            flags: flags,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Teleoperation Maneuver immutable class
///
class _$Teleoperation extends Teleoperation {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String custom;

  factory _$Teleoperation([void Function(TeleoperationBuilder b)? updates]) =>
      (TeleoperationBuilder()..update(updates)).build() as _$Teleoperation;

  factory _$Teleoperation.fromJson(core.Map<String, dynamic> json) {
    var val = TeleoperationBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$Teleoperation;
  }

  _$Teleoperation._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.custom})
      : super._();

  @override
  Teleoperation rebuild(void Function(TeleoperationBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  TeleoperationBuilder toBuilder() => TeleoperationBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Teleoperation &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Teleoperation')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Teleoperation',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'custom': custom,
      };
}

/// Teleoperation Maneuver builder class
///
class TeleoperationBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Teleoperation, TeleoperationBuilder> {
  _$Teleoperation? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  TeleoperationBuilder();

  TeleoperationBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  TeleoperationBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Teleoperation.fromJson(json);
    replace(v);
  }

  @override
  TeleoperationBuilder fromJson(core.Map<String, dynamic> json) =>
      TeleoperationBuilder.fromJson(json);

  @override
  TeleoperationBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      TeleoperationBuilder()..copyFromHeader(headerFrom);

  TeleoperationBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Teleoperation other) {
    _$v = other as _$Teleoperation;
  }

  @override
  void update(void Function(TeleoperationBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Teleoperation build() {
    final result = _$v ??
        _$Teleoperation._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Loiter Maneuver immutable class
///
class _$Loiter extends Loiter {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int timeout;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double z;
  @override
  final ZUnitsEnum zUnits;
  @override
  final int duration;
  @override
  final double speed;
  @override
  final SpeedUnitsEnum speedUnits;
  @override
  final LoiterEnumType type;
  @override
  final double radius;
  @override
  final double length;
  @override
  final double bearing;
  @override
  final LoiterEnumDirection direction;
  @override
  final String custom;

  factory _$Loiter([void Function(LoiterBuilder b)? updates]) =>
      (LoiterBuilder()..update(updates)).build() as _$Loiter;

  factory _$Loiter.fromJson(core.Map<String, dynamic> json) {
    var val = LoiterBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.timeout = json.containsKey('timeout') ? json['timeout'] as int : 0;
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.zUnits = json.containsKey('z_units') && json['z_units'] != null
        ? ZUnitsEnum(json['z_units'] as int)
        : ZUnitsEnum(0);
    val.duration = json.containsKey('duration') ? json['duration'] as int : 0;
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.speedUnits =
        json.containsKey('speed_units') && json['speed_units'] != null
            ? SpeedUnitsEnum(json['speed_units'] as int)
            : SpeedUnitsEnum(0);
    val.type = json.containsKey('type') && json['type'] != null
        ? LoiterEnumType(json['type'] as int)
        : LoiterEnumType(0);
    val.radius = json.containsKey('radius') ? json['radius'] as double : 0;
    val.length = json.containsKey('length') ? json['length'] as double : 0;
    val.bearing = json.containsKey('bearing') ? json['bearing'] as double : 0;
    val.direction = json.containsKey('direction') && json['direction'] != null
        ? LoiterEnumDirection(json['direction'] as int)
        : LoiterEnumDirection(0);
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$Loiter;
  }

  _$Loiter._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.timeout,
      required this.lat,
      required this.lon,
      required this.z,
      required this.zUnits,
      required this.duration,
      required this.speed,
      required this.speedUnits,
      required this.type,
      required this.radius,
      required this.length,
      required this.bearing,
      required this.direction,
      required this.custom})
      : super._();

  @override
  Loiter rebuild(void Function(LoiterBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  LoiterBuilder toBuilder() => LoiterBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Loiter &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        timeout == other.timeout &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        zUnits == other.zUnits &&
        duration == other.duration &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        speedUnits == other.speedUnits &&
        type == other.type &&
        (radius == other.radius || radius - other.radius <= 1E-7) &&
        (length == other.length || length - other.length <= 1E-7) &&
        (bearing == other.bearing || bearing - other.bearing <= 1E-7) &&
        direction == other.direction &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc(0,
                                                                                timestamp?.hashCode ?? null.hashCode),
                                                                            src.hashCode),
                                                                        srcEnt.hashCode),
                                                                    dst.hashCode),
                                                                dstEnt.hashCode),
                                                            timeout.hashCode),
                                                        lat.hashCode),
                                                    lon.hashCode),
                                                z.hashCode),
                                            zUnits.hashCode),
                                        duration.hashCode),
                                    speed.hashCode),
                                speedUnits.hashCode),
                            type.hashCode),
                        radius.hashCode),
                    length.hashCode),
                bearing.hashCode),
            direction.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Loiter')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('timeout', '$timeout (s)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('z', '$z (m)')
          ..add('zUnits', '$zUnits (Enumerated) [${zUnits.toPrettyString()}]')
          ..add('duration', '$duration (s)')
          ..add('speed', '$speed')
          ..add('speedUnits',
              '$speedUnits (Enumerated) [${speedUnits.toPrettyString()}]')
          ..add('type', '$type (Enumerated) [${type.toPrettyString()}]')
          ..add('radius', '$radius (m)')
          ..add('length', '$length (m)')
          ..add(
              'bearing', '$bearing (rad) [${bearing * 180.0 / math.pi} (deg)]')
          ..add('direction',
              '$direction (Enumerated) [${direction.toPrettyString()}]')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Loiter',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'timeout': timeout,
        'lat': lat,
        'lon': lon,
        'z': z,
        'z_units': zUnits.value,
        'duration': duration,
        'speed': speed,
        'speed_units': speedUnits.value,
        'type': type.value,
        'radius': radius,
        'length': length,
        'bearing': bearing,
        'direction': direction.value,
        'custom': custom,
      };
}

/// Loiter Maneuver builder class
///
class LoiterBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Loiter, LoiterBuilder> {
  _$Loiter? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _timeout = 0;
  int get timeout => _$this._timeout;
  set timeout(int timeout) => _$this._timeout = timeout;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  ZUnitsEnum _zUnits = ZUnitsEnum(0);
  ZUnitsEnum get zUnits => _$this._zUnits;
  set zUnits(ZUnitsEnum zUnits) => _$this._zUnits = zUnits;

  int _duration = 0;
  int get duration => _$this._duration;
  set duration(int duration) => _$this._duration = duration;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  SpeedUnitsEnum _speedUnits = SpeedUnitsEnum(0);
  SpeedUnitsEnum get speedUnits => _$this._speedUnits;
  set speedUnits(SpeedUnitsEnum speedUnits) => _$this._speedUnits = speedUnits;

  LoiterEnumType _type = LoiterEnumType(0);
  LoiterEnumType get type => _$this._type;
  set type(LoiterEnumType type) => _$this._type = type;

  double _radius = 0;
  double get radius => _$this._radius;
  set radius(double radius) => _$this._radius = radius;

  double _length = 0;
  double get length => _$this._length;
  set length(double length) => _$this._length = length;

  double _bearing = 0;
  double get bearing => _$this._bearing;
  set bearing(double bearing) => _$this._bearing = bearing;

  LoiterEnumDirection _direction = LoiterEnumDirection(0);
  LoiterEnumDirection get direction => _$this._direction;
  set direction(LoiterEnumDirection direction) => _$this._direction = direction;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  LoiterBuilder();

  LoiterBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  LoiterBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Loiter.fromJson(json);
    replace(v);
  }

  @override
  LoiterBuilder fromJson(core.Map<String, dynamic> json) =>
      LoiterBuilder.fromJson(json);

  @override
  LoiterBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      LoiterBuilder()..copyFromHeader(headerFrom);

  LoiterBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _timeout = _$v!.timeout;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _z = _$v!.z;
      _zUnits = _$v!.zUnits;
      _duration = _$v!.duration;
      _speed = _$v!.speed;
      _speedUnits = _$v!.speedUnits;
      _type = _$v!.type;
      _radius = _$v!.radius;
      _length = _$v!.length;
      _bearing = _$v!.bearing;
      _direction = _$v!.direction;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Loiter other) {
    _$v = other as _$Loiter;
  }

  @override
  void update(void Function(LoiterBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Loiter build() {
    final result = _$v ??
        _$Loiter._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            timeout: timeout,
            lat: lat,
            lon: lon,
            z: z,
            zUnits: zUnits,
            duration: duration,
            speed: speed,
            speedUnits: speedUnits,
            type: type,
            radius: radius,
            length: length,
            bearing: bearing,
            direction: direction,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Idle Maneuver immutable class
///
class _$IdleManeuver extends IdleManeuver {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int duration;
  @override
  final String custom;

  factory _$IdleManeuver([void Function(IdleManeuverBuilder b)? updates]) =>
      (IdleManeuverBuilder()..update(updates)).build() as _$IdleManeuver;

  factory _$IdleManeuver.fromJson(core.Map<String, dynamic> json) {
    var val = IdleManeuverBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.duration = json.containsKey('duration') ? json['duration'] as int : 0;
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$IdleManeuver;
  }

  _$IdleManeuver._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.duration,
      required this.custom})
      : super._();

  @override
  IdleManeuver rebuild(void Function(IdleManeuverBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  IdleManeuverBuilder toBuilder() => IdleManeuverBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is IdleManeuver &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        duration == other.duration &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            duration.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('IdleManeuver')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('duration', '$duration (s)')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'IdleManeuver',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'duration': duration,
        'custom': custom,
      };
}

/// Idle Maneuver builder class
///
class IdleManeuverBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<IdleManeuver, IdleManeuverBuilder> {
  _$IdleManeuver? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _duration = 0;
  int get duration => _$this._duration;
  set duration(int duration) => _$this._duration = duration;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  IdleManeuverBuilder();

  IdleManeuverBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  IdleManeuverBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$IdleManeuver.fromJson(json);
    replace(v);
  }

  @override
  IdleManeuverBuilder fromJson(core.Map<String, dynamic> json) =>
      IdleManeuverBuilder.fromJson(json);

  @override
  IdleManeuverBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      IdleManeuverBuilder()..copyFromHeader(headerFrom);

  IdleManeuverBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _duration = _$v!.duration;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(IdleManeuver other) {
    _$v = other as _$IdleManeuver;
  }

  @override
  void update(void Function(IdleManeuverBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  IdleManeuver build() {
    final result = _$v ??
        _$IdleManeuver._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            duration: duration,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Low Level Control Maneuver immutable class
///
class _$LowLevelControl extends LowLevelControl {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final ControlCommand? control;
  @override
  final int duration;
  @override
  final String custom;

  factory _$LowLevelControl(
          [void Function(LowLevelControlBuilder b)? updates]) =>
      (LowLevelControlBuilder()..update(updates)).build() as _$LowLevelControl;

  factory _$LowLevelControl.fromJson(core.Map<String, dynamic> json) {
    var val = LowLevelControlBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    ControlCommand? control;
    if (json.containsKey('control') && json['control'] != null) {
      var msgJson = json['control'] as core.Map<String, dynamic>;
      if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
        var msgType = msgJson['abbrev'] as String;
        var builder = messagesBuilders[msgType]?.call();
        builder = builder?.fromJson(msgJson);
        control = builder?.build() as ControlCommand?;
      }
    }
    val.control = control;
    val.duration = json.containsKey('duration') ? json['duration'] as int : 0;
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$LowLevelControl;
  }

  _$LowLevelControl._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      this.control,
      required this.duration,
      required this.custom})
      : super._();

  @override
  LowLevelControl rebuild(void Function(LowLevelControlBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  LowLevelControlBuilder toBuilder() => LowLevelControlBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is LowLevelControl &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        control == other.control &&
        duration == other.duration &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                control?.hashCode ?? null.hashCode),
            duration.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('LowLevelControl')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('control', '$control')
          ..add('duration', '$duration (s)')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'LowLevelControl',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'control': control?.toJson(false),
        'duration': duration,
        'custom': custom,
      };
}

/// Low Level Control Maneuver builder class
///
class LowLevelControlBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<LowLevelControl, LowLevelControlBuilder> {
  _$LowLevelControl? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  ControlCommand? _control;
  ControlCommand? get control => _$this._control;
  set control(ControlCommand? control) => _$this._control = control;

  int _duration = 0;
  int get duration => _$this._duration;
  set duration(int duration) => _$this._duration = duration;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  LowLevelControlBuilder();

  LowLevelControlBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  LowLevelControlBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$LowLevelControl.fromJson(json);
    replace(v);
  }

  @override
  LowLevelControlBuilder fromJson(core.Map<String, dynamic> json) =>
      LowLevelControlBuilder.fromJson(json);

  @override
  LowLevelControlBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      LowLevelControlBuilder()..copyFromHeader(headerFrom);

  LowLevelControlBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _control = _$v!.control;
      _duration = _$v!.duration;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(LowLevelControl other) {
    _$v = other as _$LowLevelControl;
  }

  @override
  void update(void Function(LowLevelControlBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  LowLevelControl build() {
    final result = _$v ??
        _$LowLevelControl._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            control: control,
            duration: duration,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Rows Maneuver immutable class
///
class _$Rows extends Rows {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int timeout;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double z;
  @override
  final ZUnitsEnum zUnits;
  @override
  final double speed;
  @override
  final SpeedUnitsEnum speedUnits;
  @override
  final double bearing;
  @override
  final double crossAngle;
  @override
  final double width;
  @override
  final double length;
  @override
  final double hstep;
  @override
  final int coff;
  @override
  final int alternation;
  @override
  final RowsBitfieldFlags flags;
  @override
  final String custom;

  factory _$Rows([void Function(RowsBuilder b)? updates]) =>
      (RowsBuilder()..update(updates)).build() as _$Rows;

  factory _$Rows.fromJson(core.Map<String, dynamic> json) {
    var val = RowsBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.timeout = json.containsKey('timeout') ? json['timeout'] as int : 0;
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.zUnits = json.containsKey('z_units') && json['z_units'] != null
        ? ZUnitsEnum(json['z_units'] as int)
        : ZUnitsEnum(0);
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.speedUnits =
        json.containsKey('speed_units') && json['speed_units'] != null
            ? SpeedUnitsEnum(json['speed_units'] as int)
            : SpeedUnitsEnum(0);
    val.bearing = json.containsKey('bearing') ? json['bearing'] as double : 0;
    val.crossAngle =
        json.containsKey('cross_angle') ? json['cross_angle'] as double : 0;
    val.width = json.containsKey('width') ? json['width'] as double : 0;
    val.length = json.containsKey('length') ? json['length'] as double : 0;
    val.hstep = json.containsKey('hstep') ? json['hstep'] as double : 30;
    val.coff = json.containsKey('coff') ? json['coff'] as int : 0;
    val.alternation =
        json.containsKey('alternation') ? json['alternation'] as int : 50;
    val.flags = json.containsKey('flags') && json['flags'] != null
        ? RowsBitfieldFlags(json['flags'] as int)
        : RowsBitfieldFlags(0);
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$Rows;
  }

  _$Rows._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.timeout,
      required this.lat,
      required this.lon,
      required this.z,
      required this.zUnits,
      required this.speed,
      required this.speedUnits,
      required this.bearing,
      required this.crossAngle,
      required this.width,
      required this.length,
      required this.hstep,
      required this.coff,
      required this.alternation,
      required this.flags,
      required this.custom})
      : super._();

  @override
  Rows rebuild(void Function(RowsBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  RowsBuilder toBuilder() => RowsBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Rows &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        timeout == other.timeout &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        zUnits == other.zUnits &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        speedUnits == other.speedUnits &&
        (bearing == other.bearing || bearing - other.bearing <= 1E-7) &&
        (crossAngle == other.crossAngle ||
            crossAngle - other.crossAngle <= 1E-7) &&
        (width == other.width || width - other.width <= 1E-7) &&
        (length == other.length || length - other.length <= 1E-7) &&
        (hstep == other.hstep || hstep - other.hstep <= 1E-7) &&
        coff == other.coff &&
        alternation == other.alternation &&
        flags == other.flags &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc($jc(0, timestamp?.hashCode ?? null.hashCode), src.hashCode),
                                                                                srcEnt.hashCode),
                                                                            dst.hashCode),
                                                                        dstEnt.hashCode),
                                                                    timeout.hashCode),
                                                                lat.hashCode),
                                                            lon.hashCode),
                                                        z.hashCode),
                                                    zUnits.hashCode),
                                                speed.hashCode),
                                            speedUnits.hashCode),
                                        bearing.hashCode),
                                    crossAngle.hashCode),
                                width.hashCode),
                            length.hashCode),
                        hstep.hashCode),
                    coff.hashCode),
                alternation.hashCode),
            flags.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Rows')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('timeout', '$timeout (s)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('z', '$z (m)')
          ..add('zUnits', '$zUnits (Enumerated) [${zUnits.toPrettyString()}]')
          ..add('speed', '$speed')
          ..add('speedUnits',
              '$speedUnits (Enumerated) [${speedUnits.toPrettyString()}]')
          ..add(
              'bearing', '$bearing (rad) [${bearing * 180.0 / math.pi} (deg)]')
          ..add('crossAngle',
              '$crossAngle (rad) [${crossAngle * 180.0 / math.pi} (deg)]')
          ..add('width', '$width (m)')
          ..add('length', '$length (m)')
          ..add('hstep', '$hstep (m)')
          ..add('coff', '$coff (m)')
          ..add('alternation', '$alternation (%)')
          ..add('flags', '$flags (Bitfield) [${flags.toPrettyString()}]')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Rows',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'timeout': timeout,
        'lat': lat,
        'lon': lon,
        'z': z,
        'z_units': zUnits.value,
        'speed': speed,
        'speed_units': speedUnits.value,
        'bearing': bearing,
        'cross_angle': crossAngle,
        'width': width,
        'length': length,
        'hstep': hstep,
        'coff': coff,
        'alternation': alternation,
        'flags': flags.value,
        'custom': custom,
      };
}

/// Rows Maneuver builder class
///
class RowsBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Rows, RowsBuilder> {
  _$Rows? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _timeout = 0;
  int get timeout => _$this._timeout;
  set timeout(int timeout) => _$this._timeout = timeout;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  ZUnitsEnum _zUnits = ZUnitsEnum(0);
  ZUnitsEnum get zUnits => _$this._zUnits;
  set zUnits(ZUnitsEnum zUnits) => _$this._zUnits = zUnits;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  SpeedUnitsEnum _speedUnits = SpeedUnitsEnum(0);
  SpeedUnitsEnum get speedUnits => _$this._speedUnits;
  set speedUnits(SpeedUnitsEnum speedUnits) => _$this._speedUnits = speedUnits;

  double _bearing = 0;
  double get bearing => _$this._bearing;
  set bearing(double bearing) => _$this._bearing = bearing;

  double _crossAngle = 0;
  double get crossAngle => _$this._crossAngle;
  set crossAngle(double crossAngle) => _$this._crossAngle = crossAngle;

  double _width = 0;
  double get width => _$this._width;
  set width(double width) => _$this._width = width;

  double _length = 0;
  double get length => _$this._length;
  set length(double length) => _$this._length = length;

  double _hstep = 30;
  double get hstep => _$this._hstep;
  set hstep(double hstep) => _$this._hstep = hstep;

  int _coff = 0;
  int get coff => _$this._coff;
  set coff(int coff) => _$this._coff = coff;

  int _alternation = 50;
  int get alternation => _$this._alternation;
  set alternation(int alternation) => _$this._alternation = alternation;

  RowsBitfieldFlags _flags = RowsBitfieldFlags(0);
  RowsBitfieldFlags get flags => _$this._flags;
  set flags(RowsBitfieldFlags flags) => _$this._flags = flags;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  RowsBuilder();

  RowsBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  RowsBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Rows.fromJson(json);
    replace(v);
  }

  @override
  RowsBuilder fromJson(core.Map<String, dynamic> json) =>
      RowsBuilder.fromJson(json);

  @override
  RowsBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      RowsBuilder()..copyFromHeader(headerFrom);

  RowsBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _timeout = _$v!.timeout;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _z = _$v!.z;
      _zUnits = _$v!.zUnits;
      _speed = _$v!.speed;
      _speedUnits = _$v!.speedUnits;
      _bearing = _$v!.bearing;
      _crossAngle = _$v!.crossAngle;
      _width = _$v!.width;
      _length = _$v!.length;
      _hstep = _$v!.hstep;
      _coff = _$v!.coff;
      _alternation = _$v!.alternation;
      _flags = _$v!.flags;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Rows other) {
    _$v = other as _$Rows;
  }

  @override
  void update(void Function(RowsBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Rows build() {
    final result = _$v ??
        _$Rows._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            timeout: timeout,
            lat: lat,
            lon: lon,
            z: z,
            zUnits: zUnits,
            speed: speed,
            speedUnits: speedUnits,
            bearing: bearing,
            crossAngle: crossAngle,
            width: width,
            length: length,
            hstep: hstep,
            coff: coff,
            alternation: alternation,
            flags: flags,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Follow Path Maneuver immutable class
///
class _$FollowPath extends FollowPath {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int timeout;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double z;
  @override
  final ZUnitsEnum zUnits;
  @override
  final double speed;
  @override
  final SpeedUnitsEnum speedUnits;
  @override
  final List<PathPoint> points;
  @override
  final String custom;

  factory _$FollowPath([void Function(FollowPathBuilder b)? updates]) =>
      (FollowPathBuilder()..update(updates)).build() as _$FollowPath;

  factory _$FollowPath.fromJson(core.Map<String, dynamic> json) {
    var val = FollowPathBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.timeout = json.containsKey('timeout') ? json['timeout'] as int : 0;
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.zUnits = json.containsKey('z_units') && json['z_units'] != null
        ? ZUnitsEnum(json['z_units'] as int)
        : ZUnitsEnum(0);
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.speedUnits =
        json.containsKey('speed_units') && json['speed_units'] != null
            ? SpeedUnitsEnum(json['speed_units'] as int)
            : SpeedUnitsEnum(0);
    var points = <PathPoint>[];
    if (json.containsKey('points') && json['points'] != null) {
      var listJson = json['points'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as PathPoint?;
          if (m != null) points.add(m);
        }
      }
    }
    val.points = points;
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$FollowPath;
  }

  _$FollowPath._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.timeout,
      required this.lat,
      required this.lon,
      required this.z,
      required this.zUnits,
      required this.speed,
      required this.speedUnits,
      required this.points,
      required this.custom})
      : super._();

  @override
  FollowPath rebuild(void Function(FollowPathBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  FollowPathBuilder toBuilder() => FollowPathBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is FollowPath &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        timeout == other.timeout &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        zUnits == other.zUnits &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        speedUnits == other.speedUnits &&
        DeepCollectionEquality().equals(points, other.points) &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            0,
                                                            timestamp
                                                                    ?.hashCode ??
                                                                null.hashCode),
                                                        src.hashCode),
                                                    srcEnt.hashCode),
                                                dst.hashCode),
                                            dstEnt.hashCode),
                                        timeout.hashCode),
                                    lat.hashCode),
                                lon.hashCode),
                            z.hashCode),
                        zUnits.hashCode),
                    speed.hashCode),
                speedUnits.hashCode),
            points.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('FollowPath')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('timeout', '$timeout (s)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('z', '$z (m)')
          ..add('zUnits', '$zUnits (Enumerated) [${zUnits.toPrettyString()}]')
          ..add('speed', '$speed')
          ..add('speedUnits',
              '$speedUnits (Enumerated) [${speedUnits.toPrettyString()}]')
          ..add('points', '$points')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'FollowPath',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'timeout': timeout,
        'lat': lat,
        'lon': lon,
        'z': z,
        'z_units': zUnits.value,
        'speed': speed,
        'speed_units': speedUnits.value,
        'points': [
          ...points.map((m) => m.toJson(false)),
        ],
        'custom': custom,
      };
}

/// Follow Path Maneuver builder class
///
class FollowPathBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<FollowPath, FollowPathBuilder> {
  _$FollowPath? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _timeout = 0;
  int get timeout => _$this._timeout;
  set timeout(int timeout) => _$this._timeout = timeout;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  ZUnitsEnum _zUnits = ZUnitsEnum(0);
  ZUnitsEnum get zUnits => _$this._zUnits;
  set zUnits(ZUnitsEnum zUnits) => _$this._zUnits = zUnits;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  SpeedUnitsEnum _speedUnits = SpeedUnitsEnum(0);
  SpeedUnitsEnum get speedUnits => _$this._speedUnits;
  set speedUnits(SpeedUnitsEnum speedUnits) => _$this._speedUnits = speedUnits;

  List<PathPoint> _points = <PathPoint>[];
  List<PathPoint> get points => _$this._points;
  set points(List<PathPoint> points) => _$this._points = points;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  FollowPathBuilder();

  FollowPathBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  FollowPathBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$FollowPath.fromJson(json);
    replace(v);
  }

  @override
  FollowPathBuilder fromJson(core.Map<String, dynamic> json) =>
      FollowPathBuilder.fromJson(json);

  @override
  FollowPathBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      FollowPathBuilder()..copyFromHeader(headerFrom);

  FollowPathBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _timeout = _$v!.timeout;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _z = _$v!.z;
      _zUnits = _$v!.zUnits;
      _speed = _$v!.speed;
      _speedUnits = _$v!.speedUnits;
      _points = _$v!.points;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(FollowPath other) {
    _$v = other as _$FollowPath;
  }

  @override
  void update(void Function(FollowPathBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  FollowPath build() {
    final result = _$v ??
        _$FollowPath._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            timeout: timeout,
            lat: lat,
            lon: lon,
            z: z,
            zUnits: zUnits,
            speed: speed,
            speedUnits: speedUnits,
            points: points,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Path Point immutable class
///
class _$PathPoint extends PathPoint {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double x;
  @override
  final double y;
  @override
  final double z;

  factory _$PathPoint([void Function(PathPointBuilder b)? updates]) =>
      (PathPointBuilder()..update(updates)).build() as _$PathPoint;

  factory _$PathPoint.fromJson(core.Map<String, dynamic> json) {
    var val = PathPointBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.x = json.containsKey('x') ? json['x'] as double : 0;
    val.y = json.containsKey('y') ? json['y'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;

    return val.build() as _$PathPoint;
  }

  _$PathPoint._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.x,
      required this.y,
      required this.z})
      : super._();

  @override
  PathPoint rebuild(void Function(PathPointBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  PathPointBuilder toBuilder() => PathPointBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is PathPoint &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (x == other.x || x - other.x <= 1E-7) &&
        (y == other.y || y - other.y <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                x.hashCode),
            y.hashCode),
        z.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('PathPoint')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('x', '$x (m)')
          ..add('y', '$y (m)')
          ..add('z', '$z (m)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'PathPoint',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'x': x,
        'y': y,
        'z': z,
      };
}

/// Path Point builder class
///
class PathPointBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<PathPoint, PathPointBuilder> {
  _$PathPoint? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _x = 0;
  double get x => _$this._x;
  set x(double x) => _$this._x = x;

  double _y = 0;
  double get y => _$this._y;
  set y(double y) => _$this._y = y;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  PathPointBuilder();

  PathPointBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  PathPointBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$PathPoint.fromJson(json);
    replace(v);
  }

  @override
  PathPointBuilder fromJson(core.Map<String, dynamic> json) =>
      PathPointBuilder.fromJson(json);

  @override
  PathPointBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      PathPointBuilder()..copyFromHeader(headerFrom);

  PathPointBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _x = _$v!.x;
      _y = _$v!.y;
      _z = _$v!.z;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(PathPoint other) {
    _$v = other as _$PathPoint;
  }

  @override
  void update(void Function(PathPointBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  PathPoint build() {
    final result = _$v ??
        _$PathPoint._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            x: x,
            y: y,
            z: z);
    replace(result);
    return result;
  }
}

/// Yo-Yo Maneuver immutable class
///
class _$YoYo extends YoYo {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int timeout;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double z;
  @override
  final ZUnitsEnum zUnits;
  @override
  final double amplitude;
  @override
  final double pitch;
  @override
  final double speed;
  @override
  final SpeedUnitsEnum speedUnits;
  @override
  final String custom;

  factory _$YoYo([void Function(YoYoBuilder b)? updates]) =>
      (YoYoBuilder()..update(updates)).build() as _$YoYo;

  factory _$YoYo.fromJson(core.Map<String, dynamic> json) {
    var val = YoYoBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.timeout = json.containsKey('timeout') ? json['timeout'] as int : 0;
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.zUnits = json.containsKey('z_units') && json['z_units'] != null
        ? ZUnitsEnum(json['z_units'] as int)
        : ZUnitsEnum(0);
    val.amplitude =
        json.containsKey('amplitude') ? json['amplitude'] as double : 0;
    val.pitch = json.containsKey('pitch') ? json['pitch'] as double : 0;
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.speedUnits =
        json.containsKey('speed_units') && json['speed_units'] != null
            ? SpeedUnitsEnum(json['speed_units'] as int)
            : SpeedUnitsEnum(0);
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$YoYo;
  }

  _$YoYo._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.timeout,
      required this.lat,
      required this.lon,
      required this.z,
      required this.zUnits,
      required this.amplitude,
      required this.pitch,
      required this.speed,
      required this.speedUnits,
      required this.custom})
      : super._();

  @override
  YoYo rebuild(void Function(YoYoBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  YoYoBuilder toBuilder() => YoYoBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is YoYo &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        timeout == other.timeout &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        zUnits == other.zUnits &&
        (amplitude == other.amplitude || amplitude - other.amplitude <= 1E-7) &&
        (pitch == other.pitch || pitch - other.pitch <= 1E-7) &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        speedUnits == other.speedUnits &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                0,
                                                                timestamp
                                                                        ?.hashCode ??
                                                                    null.hashCode),
                                                            src.hashCode),
                                                        srcEnt.hashCode),
                                                    dst.hashCode),
                                                dstEnt.hashCode),
                                            timeout.hashCode),
                                        lat.hashCode),
                                    lon.hashCode),
                                z.hashCode),
                            zUnits.hashCode),
                        amplitude.hashCode),
                    pitch.hashCode),
                speed.hashCode),
            speedUnits.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('YoYo')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('timeout', '$timeout (s)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('z', '$z (m)')
          ..add('zUnits', '$zUnits (Enumerated) [${zUnits.toPrettyString()}]')
          ..add('amplitude', '$amplitude (m)')
          ..add('pitch', '$pitch (rad) [${pitch * 180.0 / math.pi} (deg)]')
          ..add('speed', '$speed')
          ..add('speedUnits',
              '$speedUnits (Enumerated) [${speedUnits.toPrettyString()}]')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'YoYo',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'timeout': timeout,
        'lat': lat,
        'lon': lon,
        'z': z,
        'z_units': zUnits.value,
        'amplitude': amplitude,
        'pitch': pitch,
        'speed': speed,
        'speed_units': speedUnits.value,
        'custom': custom,
      };
}

/// Yo-Yo Maneuver builder class
///
class YoYoBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<YoYo, YoYoBuilder> {
  _$YoYo? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _timeout = 0;
  int get timeout => _$this._timeout;
  set timeout(int timeout) => _$this._timeout = timeout;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  ZUnitsEnum _zUnits = ZUnitsEnum(0);
  ZUnitsEnum get zUnits => _$this._zUnits;
  set zUnits(ZUnitsEnum zUnits) => _$this._zUnits = zUnits;

  double _amplitude = 0;
  double get amplitude => _$this._amplitude;
  set amplitude(double amplitude) => _$this._amplitude = amplitude;

  double _pitch = 0;
  double get pitch => _$this._pitch;
  set pitch(double pitch) => _$this._pitch = pitch;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  SpeedUnitsEnum _speedUnits = SpeedUnitsEnum(0);
  SpeedUnitsEnum get speedUnits => _$this._speedUnits;
  set speedUnits(SpeedUnitsEnum speedUnits) => _$this._speedUnits = speedUnits;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  YoYoBuilder();

  YoYoBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  YoYoBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$YoYo.fromJson(json);
    replace(v);
  }

  @override
  YoYoBuilder fromJson(core.Map<String, dynamic> json) =>
      YoYoBuilder.fromJson(json);

  @override
  YoYoBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      YoYoBuilder()..copyFromHeader(headerFrom);

  YoYoBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _timeout = _$v!.timeout;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _z = _$v!.z;
      _zUnits = _$v!.zUnits;
      _amplitude = _$v!.amplitude;
      _pitch = _$v!.pitch;
      _speed = _$v!.speed;
      _speedUnits = _$v!.speedUnits;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(YoYo other) {
    _$v = other as _$YoYo;
  }

  @override
  void update(void Function(YoYoBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  YoYo build() {
    final result = _$v ??
        _$YoYo._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            timeout: timeout,
            lat: lat,
            lon: lon,
            z: z,
            zUnits: zUnits,
            amplitude: amplitude,
            pitch: pitch,
            speed: speed,
            speedUnits: speedUnits,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Teleoperation Done immutable class
///
class _$TeleoperationDone extends TeleoperationDone {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  factory _$TeleoperationDone(
          [void Function(TeleoperationDoneBuilder b)? updates]) =>
      (TeleoperationDoneBuilder()..update(updates)).build()
          as _$TeleoperationDone;

  factory _$TeleoperationDone.fromJson(core.Map<String, dynamic> json) {
    var val = TeleoperationDoneBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    return val.build() as _$TeleoperationDone;
  }

  _$TeleoperationDone._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId})
      : super._();

  @override
  TeleoperationDone rebuild(
          void Function(TeleoperationDoneBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  TeleoperationDoneBuilder toBuilder() =>
      TeleoperationDoneBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is TeleoperationDone &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc($jc($jc(0, timestamp?.hashCode ?? null.hashCode), src.hashCode),
                srcEnt.hashCode),
            dst.hashCode),
        dstEnt.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('TeleoperationDone')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'TeleoperationDone',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
      };
}

/// Teleoperation Done builder class
///
class TeleoperationDoneBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<TeleoperationDone, TeleoperationDoneBuilder> {
  _$TeleoperationDone? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  TeleoperationDoneBuilder();

  TeleoperationDoneBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  TeleoperationDoneBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$TeleoperationDone.fromJson(json);
    replace(v);
  }

  @override
  TeleoperationDoneBuilder fromJson(core.Map<String, dynamic> json) =>
      TeleoperationDoneBuilder.fromJson(json);

  @override
  TeleoperationDoneBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      TeleoperationDoneBuilder()..copyFromHeader(headerFrom);

  TeleoperationDoneBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(TeleoperationDone other) {
    _$v = other as _$TeleoperationDone;
  }

  @override
  void update(void Function(TeleoperationDoneBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  TeleoperationDone build() {
    final result = _$v ??
        _$TeleoperationDone._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt);
    replace(result);
    return result;
  }
}

/// Station Keeping immutable class
///
class _$StationKeeping extends StationKeeping {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double lat;
  @override
  final double lon;
  @override
  final double z;
  @override
  final ZUnitsEnum zUnits;
  @override
  final double radius;
  @override
  final int duration;
  @override
  final double speed;
  @override
  final SpeedUnitsEnum speedUnits;
  @override
  final String custom;

  factory _$StationKeeping([void Function(StationKeepingBuilder b)? updates]) =>
      (StationKeepingBuilder()..update(updates)).build() as _$StationKeeping;

  factory _$StationKeeping.fromJson(core.Map<String, dynamic> json) {
    var val = StationKeepingBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.zUnits = json.containsKey('z_units') && json['z_units'] != null
        ? ZUnitsEnum(json['z_units'] as int)
        : ZUnitsEnum(0);
    val.radius = json.containsKey('radius') ? json['radius'] as double : 0;
    val.duration = json.containsKey('duration') ? json['duration'] as int : 0;
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.speedUnits =
        json.containsKey('speed_units') && json['speed_units'] != null
            ? SpeedUnitsEnum(json['speed_units'] as int)
            : SpeedUnitsEnum(0);
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$StationKeeping;
  }

  _$StationKeeping._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.lat,
      required this.lon,
      required this.z,
      required this.zUnits,
      required this.radius,
      required this.duration,
      required this.speed,
      required this.speedUnits,
      required this.custom})
      : super._();

  @override
  StationKeeping rebuild(void Function(StationKeepingBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  StationKeepingBuilder toBuilder() => StationKeepingBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is StationKeeping &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        zUnits == other.zUnits &&
        (radius == other.radius || radius - other.radius <= 1E-7) &&
        duration == other.duration &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        speedUnits == other.speedUnits &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            0,
                                                            timestamp
                                                                    ?.hashCode ??
                                                                null.hashCode),
                                                        src.hashCode),
                                                    srcEnt.hashCode),
                                                dst.hashCode),
                                            dstEnt.hashCode),
                                        lat.hashCode),
                                    lon.hashCode),
                                z.hashCode),
                            zUnits.hashCode),
                        radius.hashCode),
                    duration.hashCode),
                speed.hashCode),
            speedUnits.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('StationKeeping')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('z', '$z (m)')
          ..add('zUnits', '$zUnits (Enumerated) [${zUnits.toPrettyString()}]')
          ..add('radius', '$radius (m)')
          ..add('duration', '$duration (s)')
          ..add('speed', '$speed')
          ..add('speedUnits',
              '$speedUnits (Enumerated) [${speedUnits.toPrettyString()}]')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'StationKeeping',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'lat': lat,
        'lon': lon,
        'z': z,
        'z_units': zUnits.value,
        'radius': radius,
        'duration': duration,
        'speed': speed,
        'speed_units': speedUnits.value,
        'custom': custom,
      };
}

/// Station Keeping builder class
///
class StationKeepingBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<StationKeeping, StationKeepingBuilder> {
  _$StationKeeping? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  ZUnitsEnum _zUnits = ZUnitsEnum(0);
  ZUnitsEnum get zUnits => _$this._zUnits;
  set zUnits(ZUnitsEnum zUnits) => _$this._zUnits = zUnits;

  double _radius = 0;
  double get radius => _$this._radius;
  set radius(double radius) => _$this._radius = radius;

  int _duration = 0;
  int get duration => _$this._duration;
  set duration(int duration) => _$this._duration = duration;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  SpeedUnitsEnum _speedUnits = SpeedUnitsEnum(0);
  SpeedUnitsEnum get speedUnits => _$this._speedUnits;
  set speedUnits(SpeedUnitsEnum speedUnits) => _$this._speedUnits = speedUnits;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  StationKeepingBuilder();

  StationKeepingBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  StationKeepingBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$StationKeeping.fromJson(json);
    replace(v);
  }

  @override
  StationKeepingBuilder fromJson(core.Map<String, dynamic> json) =>
      StationKeepingBuilder.fromJson(json);

  @override
  StationKeepingBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      StationKeepingBuilder()..copyFromHeader(headerFrom);

  StationKeepingBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _z = _$v!.z;
      _zUnits = _$v!.zUnits;
      _radius = _$v!.radius;
      _duration = _$v!.duration;
      _speed = _$v!.speed;
      _speedUnits = _$v!.speedUnits;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(StationKeeping other) {
    _$v = other as _$StationKeeping;
  }

  @override
  void update(void Function(StationKeepingBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  StationKeeping build() {
    final result = _$v ??
        _$StationKeeping._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            lat: lat,
            lon: lon,
            z: z,
            zUnits: zUnits,
            radius: radius,
            duration: duration,
            speed: speed,
            speedUnits: speedUnits,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Elevator Maneuver immutable class
///
class _$Elevator extends Elevator {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int timeout;
  @override
  final ElevatorBitfieldFlags flags;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double startZ;
  @override
  final ZUnitsEnum startZUnits;
  @override
  final double endZ;
  @override
  final ZUnitsEnum endZUnits;
  @override
  final double radius;
  @override
  final double speed;
  @override
  final SpeedUnitsEnum speedUnits;
  @override
  final String custom;

  factory _$Elevator([void Function(ElevatorBuilder b)? updates]) =>
      (ElevatorBuilder()..update(updates)).build() as _$Elevator;

  factory _$Elevator.fromJson(core.Map<String, dynamic> json) {
    var val = ElevatorBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.timeout = json.containsKey('timeout') ? json['timeout'] as int : 0;
    val.flags = json.containsKey('flags') && json['flags'] != null
        ? ElevatorBitfieldFlags(json['flags'] as int)
        : ElevatorBitfieldFlags(0);
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.startZ = json.containsKey('start_z') ? json['start_z'] as double : 0;
    val.startZUnits =
        json.containsKey('start_z_units') && json['start_z_units'] != null
            ? ZUnitsEnum(json['start_z_units'] as int)
            : ZUnitsEnum(0);
    val.endZ = json.containsKey('end_z') ? json['end_z'] as double : 0;
    val.endZUnits =
        json.containsKey('end_z_units') && json['end_z_units'] != null
            ? ZUnitsEnum(json['end_z_units'] as int)
            : ZUnitsEnum(0);
    val.radius = json.containsKey('radius') ? json['radius'] as double : 0;
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.speedUnits =
        json.containsKey('speed_units') && json['speed_units'] != null
            ? SpeedUnitsEnum(json['speed_units'] as int)
            : SpeedUnitsEnum(0);
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$Elevator;
  }

  _$Elevator._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.timeout,
      required this.flags,
      required this.lat,
      required this.lon,
      required this.startZ,
      required this.startZUnits,
      required this.endZ,
      required this.endZUnits,
      required this.radius,
      required this.speed,
      required this.speedUnits,
      required this.custom})
      : super._();

  @override
  Elevator rebuild(void Function(ElevatorBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  ElevatorBuilder toBuilder() => ElevatorBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Elevator &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        timeout == other.timeout &&
        flags == other.flags &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (startZ == other.startZ || startZ - other.startZ <= 1E-7) &&
        startZUnits == other.startZUnits &&
        (endZ == other.endZ || endZ - other.endZ <= 1E-7) &&
        endZUnits == other.endZUnits &&
        (radius == other.radius || radius - other.radius <= 1E-7) &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        speedUnits == other.speedUnits &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        0,
                                                                        timestamp?.hashCode ??
                                                                            null.hashCode),
                                                                    src.hashCode),
                                                                srcEnt.hashCode),
                                                            dst.hashCode),
                                                        dstEnt.hashCode),
                                                    timeout.hashCode),
                                                flags.hashCode),
                                            lat.hashCode),
                                        lon.hashCode),
                                    startZ.hashCode),
                                startZUnits.hashCode),
                            endZ.hashCode),
                        endZUnits.hashCode),
                    radius.hashCode),
                speed.hashCode),
            speedUnits.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Elevator')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('timeout', '$timeout (s)')
          ..add('flags', '$flags (Bitfield) [${flags.toPrettyString()}]')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('startZ', '$startZ (m)')
          ..add('startZUnits',
              '$startZUnits (Enumerated) [${startZUnits.toPrettyString()}]')
          ..add('endZ', '$endZ (m)')
          ..add('endZUnits',
              '$endZUnits (Enumerated) [${endZUnits.toPrettyString()}]')
          ..add('radius', '$radius (m)')
          ..add('speed', '$speed')
          ..add('speedUnits',
              '$speedUnits (Enumerated) [${speedUnits.toPrettyString()}]')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Elevator',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'timeout': timeout,
        'flags': flags.value,
        'lat': lat,
        'lon': lon,
        'start_z': startZ,
        'start_z_units': startZUnits.value,
        'end_z': endZ,
        'end_z_units': endZUnits.value,
        'radius': radius,
        'speed': speed,
        'speed_units': speedUnits.value,
        'custom': custom,
      };
}

/// Elevator Maneuver builder class
///
class ElevatorBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Elevator, ElevatorBuilder> {
  _$Elevator? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _timeout = 0;
  int get timeout => _$this._timeout;
  set timeout(int timeout) => _$this._timeout = timeout;

  ElevatorBitfieldFlags _flags = ElevatorBitfieldFlags(0);
  ElevatorBitfieldFlags get flags => _$this._flags;
  set flags(ElevatorBitfieldFlags flags) => _$this._flags = flags;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _startZ = 0;
  double get startZ => _$this._startZ;
  set startZ(double startZ) => _$this._startZ = startZ;

  ZUnitsEnum _startZUnits = ZUnitsEnum(0);
  ZUnitsEnum get startZUnits => _$this._startZUnits;
  set startZUnits(ZUnitsEnum startZUnits) => _$this._startZUnits = startZUnits;

  double _endZ = 0;
  double get endZ => _$this._endZ;
  set endZ(double endZ) => _$this._endZ = endZ;

  ZUnitsEnum _endZUnits = ZUnitsEnum(0);
  ZUnitsEnum get endZUnits => _$this._endZUnits;
  set endZUnits(ZUnitsEnum endZUnits) => _$this._endZUnits = endZUnits;

  double _radius = 0;
  double get radius => _$this._radius;
  set radius(double radius) => _$this._radius = radius;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  SpeedUnitsEnum _speedUnits = SpeedUnitsEnum(0);
  SpeedUnitsEnum get speedUnits => _$this._speedUnits;
  set speedUnits(SpeedUnitsEnum speedUnits) => _$this._speedUnits = speedUnits;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  ElevatorBuilder();

  ElevatorBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  ElevatorBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Elevator.fromJson(json);
    replace(v);
  }

  @override
  ElevatorBuilder fromJson(core.Map<String, dynamic> json) =>
      ElevatorBuilder.fromJson(json);

  @override
  ElevatorBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      ElevatorBuilder()..copyFromHeader(headerFrom);

  ElevatorBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _timeout = _$v!.timeout;
      _flags = _$v!.flags;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _startZ = _$v!.startZ;
      _startZUnits = _$v!.startZUnits;
      _endZ = _$v!.endZ;
      _endZUnits = _$v!.endZUnits;
      _radius = _$v!.radius;
      _speed = _$v!.speed;
      _speedUnits = _$v!.speedUnits;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Elevator other) {
    _$v = other as _$Elevator;
  }

  @override
  void update(void Function(ElevatorBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Elevator build() {
    final result = _$v ??
        _$Elevator._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            timeout: timeout,
            flags: flags,
            lat: lat,
            lon: lon,
            startZ: startZ,
            startZUnits: startZUnits,
            endZ: endZ,
            endZUnits: endZUnits,
            radius: radius,
            speed: speed,
            speedUnits: speedUnits,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Follow Trajectory immutable class
///
class _$FollowTrajectory extends FollowTrajectory {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int timeout;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double z;
  @override
  final ZUnitsEnum zUnits;
  @override
  final double speed;
  @override
  final SpeedUnitsEnum speedUnits;
  @override
  final List<TrajectoryPoint> points;
  @override
  final String custom;

  factory _$FollowTrajectory(
          [void Function(FollowTrajectoryBuilder b)? updates]) =>
      (FollowTrajectoryBuilder()..update(updates)).build()
          as _$FollowTrajectory;

  factory _$FollowTrajectory.fromJson(core.Map<String, dynamic> json) {
    var val = FollowTrajectoryBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.timeout = json.containsKey('timeout') ? json['timeout'] as int : 0;
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.zUnits = json.containsKey('z_units') && json['z_units'] != null
        ? ZUnitsEnum(json['z_units'] as int)
        : ZUnitsEnum(0);
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.speedUnits =
        json.containsKey('speed_units') && json['speed_units'] != null
            ? SpeedUnitsEnum(json['speed_units'] as int)
            : SpeedUnitsEnum(0);
    var points = <TrajectoryPoint>[];
    if (json.containsKey('points') && json['points'] != null) {
      var listJson = json['points'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as TrajectoryPoint?;
          if (m != null) points.add(m);
        }
      }
    }
    val.points = points;
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$FollowTrajectory;
  }

  _$FollowTrajectory._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.timeout,
      required this.lat,
      required this.lon,
      required this.z,
      required this.zUnits,
      required this.speed,
      required this.speedUnits,
      required this.points,
      required this.custom})
      : super._();

  @override
  FollowTrajectory rebuild(void Function(FollowTrajectoryBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  FollowTrajectoryBuilder toBuilder() =>
      FollowTrajectoryBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is FollowTrajectory &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        timeout == other.timeout &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        zUnits == other.zUnits &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        speedUnits == other.speedUnits &&
        DeepCollectionEquality().equals(points, other.points) &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            0,
                                                            timestamp
                                                                    ?.hashCode ??
                                                                null.hashCode),
                                                        src.hashCode),
                                                    srcEnt.hashCode),
                                                dst.hashCode),
                                            dstEnt.hashCode),
                                        timeout.hashCode),
                                    lat.hashCode),
                                lon.hashCode),
                            z.hashCode),
                        zUnits.hashCode),
                    speed.hashCode),
                speedUnits.hashCode),
            points.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('FollowTrajectory')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('timeout', '$timeout (s)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('z', '$z (m)')
          ..add('zUnits', '$zUnits (Enumerated) [${zUnits.toPrettyString()}]')
          ..add('speed', '$speed')
          ..add('speedUnits',
              '$speedUnits (Enumerated) [${speedUnits.toPrettyString()}]')
          ..add('points', '$points')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'FollowTrajectory',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'timeout': timeout,
        'lat': lat,
        'lon': lon,
        'z': z,
        'z_units': zUnits.value,
        'speed': speed,
        'speed_units': speedUnits.value,
        'points': [
          ...points.map((m) => m.toJson(false)),
        ],
        'custom': custom,
      };
}

/// Follow Trajectory builder class
///
class FollowTrajectoryBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<FollowTrajectory, FollowTrajectoryBuilder> {
  _$FollowTrajectory? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _timeout = 0;
  int get timeout => _$this._timeout;
  set timeout(int timeout) => _$this._timeout = timeout;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  ZUnitsEnum _zUnits = ZUnitsEnum(0);
  ZUnitsEnum get zUnits => _$this._zUnits;
  set zUnits(ZUnitsEnum zUnits) => _$this._zUnits = zUnits;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  SpeedUnitsEnum _speedUnits = SpeedUnitsEnum(0);
  SpeedUnitsEnum get speedUnits => _$this._speedUnits;
  set speedUnits(SpeedUnitsEnum speedUnits) => _$this._speedUnits = speedUnits;

  List<TrajectoryPoint> _points = <TrajectoryPoint>[];
  List<TrajectoryPoint> get points => _$this._points;
  set points(List<TrajectoryPoint> points) => _$this._points = points;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  FollowTrajectoryBuilder();

  FollowTrajectoryBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  FollowTrajectoryBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$FollowTrajectory.fromJson(json);
    replace(v);
  }

  @override
  FollowTrajectoryBuilder fromJson(core.Map<String, dynamic> json) =>
      FollowTrajectoryBuilder.fromJson(json);

  @override
  FollowTrajectoryBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      FollowTrajectoryBuilder()..copyFromHeader(headerFrom);

  FollowTrajectoryBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _timeout = _$v!.timeout;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _z = _$v!.z;
      _zUnits = _$v!.zUnits;
      _speed = _$v!.speed;
      _speedUnits = _$v!.speedUnits;
      _points = _$v!.points;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(FollowTrajectory other) {
    _$v = other as _$FollowTrajectory;
  }

  @override
  void update(void Function(FollowTrajectoryBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  FollowTrajectory build() {
    final result = _$v ??
        _$FollowTrajectory._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            timeout: timeout,
            lat: lat,
            lon: lon,
            z: z,
            zUnits: zUnits,
            speed: speed,
            speedUnits: speedUnits,
            points: points,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Trajectory Point immutable class
///
class _$TrajectoryPoint extends TrajectoryPoint {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double x;
  @override
  final double y;
  @override
  final double z;
  @override
  final double t;

  factory _$TrajectoryPoint(
          [void Function(TrajectoryPointBuilder b)? updates]) =>
      (TrajectoryPointBuilder()..update(updates)).build() as _$TrajectoryPoint;

  factory _$TrajectoryPoint.fromJson(core.Map<String, dynamic> json) {
    var val = TrajectoryPointBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.x = json.containsKey('x') ? json['x'] as double : 0;
    val.y = json.containsKey('y') ? json['y'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.t = json.containsKey('t') ? json['t'] as double : 0;

    return val.build() as _$TrajectoryPoint;
  }

  _$TrajectoryPoint._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.x,
      required this.y,
      required this.z,
      required this.t})
      : super._();

  @override
  TrajectoryPoint rebuild(void Function(TrajectoryPointBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  TrajectoryPointBuilder toBuilder() => TrajectoryPointBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is TrajectoryPoint &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (x == other.x || x - other.x <= 1E-7) &&
        (y == other.y || y - other.y <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        (t == other.t || t - other.t <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    x.hashCode),
                y.hashCode),
            z.hashCode),
        t.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('TrajectoryPoint')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('x', '$x (m)')
          ..add('y', '$y (m)')
          ..add('z', '$z (m)')
          ..add('t', '$t (s)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'TrajectoryPoint',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'x': x,
        'y': y,
        'z': z,
        't': t,
      };
}

/// Trajectory Point builder class
///
class TrajectoryPointBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<TrajectoryPoint, TrajectoryPointBuilder> {
  _$TrajectoryPoint? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _x = 0;
  double get x => _$this._x;
  set x(double x) => _$this._x = x;

  double _y = 0;
  double get y => _$this._y;
  set y(double y) => _$this._y = y;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  double _t = 0;
  double get t => _$this._t;
  set t(double t) => _$this._t = t;

  TrajectoryPointBuilder();

  TrajectoryPointBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  TrajectoryPointBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$TrajectoryPoint.fromJson(json);
    replace(v);
  }

  @override
  TrajectoryPointBuilder fromJson(core.Map<String, dynamic> json) =>
      TrajectoryPointBuilder.fromJson(json);

  @override
  TrajectoryPointBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      TrajectoryPointBuilder()..copyFromHeader(headerFrom);

  TrajectoryPointBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _x = _$v!.x;
      _y = _$v!.y;
      _z = _$v!.z;
      _t = _$v!.t;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(TrajectoryPoint other) {
    _$v = other as _$TrajectoryPoint;
  }

  @override
  void update(void Function(TrajectoryPointBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  TrajectoryPoint build() {
    final result = _$v ??
        _$TrajectoryPoint._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            x: x,
            y: y,
            z: z,
            t: t);
    replace(result);
    return result;
  }
}

/// Custom Maneuver immutable class
///
class _$CustomManeuver extends CustomManeuver {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int timeout;
  @override
  final String name;
  @override
  final String custom;

  factory _$CustomManeuver([void Function(CustomManeuverBuilder b)? updates]) =>
      (CustomManeuverBuilder()..update(updates)).build() as _$CustomManeuver;

  factory _$CustomManeuver.fromJson(core.Map<String, dynamic> json) {
    var val = CustomManeuverBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.timeout = json.containsKey('timeout') ? json['timeout'] as int : 0;
    val.name = json.containsKey('name') && json['name'] != null
        ? json['name'] as String
        : '';
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$CustomManeuver;
  }

  _$CustomManeuver._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.timeout,
      required this.name,
      required this.custom})
      : super._();

  @override
  CustomManeuver rebuild(void Function(CustomManeuverBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  CustomManeuverBuilder toBuilder() => CustomManeuverBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is CustomManeuver &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        timeout == other.timeout &&
        name == other.name &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                timeout.hashCode),
            name.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('CustomManeuver')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('timeout', '$timeout (s)')
          ..add('name', name)
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'CustomManeuver',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'timeout': timeout,
        'name': name,
        'custom': custom,
      };
}

/// Custom Maneuver builder class
///
class CustomManeuverBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<CustomManeuver, CustomManeuverBuilder> {
  _$CustomManeuver? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _timeout = 0;
  int get timeout => _$this._timeout;
  set timeout(int timeout) => _$this._timeout = timeout;

  String _name = '';
  String get name => _$this._name;
  set name(String name) => _$this._name = name;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  CustomManeuverBuilder();

  CustomManeuverBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  CustomManeuverBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$CustomManeuver.fromJson(json);
    replace(v);
  }

  @override
  CustomManeuverBuilder fromJson(core.Map<String, dynamic> json) =>
      CustomManeuverBuilder.fromJson(json);

  @override
  CustomManeuverBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      CustomManeuverBuilder()..copyFromHeader(headerFrom);

  CustomManeuverBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _timeout = _$v!.timeout;
      _name = _$v!.name;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(CustomManeuver other) {
    _$v = other as _$CustomManeuver;
  }

  @override
  void update(void Function(CustomManeuverBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  CustomManeuver build() {
    final result = _$v ??
        _$CustomManeuver._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            timeout: timeout,
            name: name,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Vehicle Formation immutable class
///
class _$VehicleFormation extends VehicleFormation {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double lat;
  @override
  final double lon;
  @override
  final double z;
  @override
  final ZUnitsEnum zUnits;
  @override
  final double speed;
  @override
  final SpeedUnitsEnum speedUnits;
  @override
  final List<TrajectoryPoint> points;
  @override
  final List<VehicleFormationParticipant> participants;
  @override
  final double startTime;
  @override
  final String custom;

  factory _$VehicleFormation(
          [void Function(VehicleFormationBuilder b)? updates]) =>
      (VehicleFormationBuilder()..update(updates)).build()
          as _$VehicleFormation;

  factory _$VehicleFormation.fromJson(core.Map<String, dynamic> json) {
    var val = VehicleFormationBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.zUnits = json.containsKey('z_units') && json['z_units'] != null
        ? ZUnitsEnum(json['z_units'] as int)
        : ZUnitsEnum(0);
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.speedUnits =
        json.containsKey('speed_units') && json['speed_units'] != null
            ? SpeedUnitsEnum(json['speed_units'] as int)
            : SpeedUnitsEnum(0);
    var points = <TrajectoryPoint>[];
    if (json.containsKey('points') && json['points'] != null) {
      var listJson = json['points'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as TrajectoryPoint?;
          if (m != null) points.add(m);
        }
      }
    }
    val.points = points;
    var participants = <VehicleFormationParticipant>[];
    if (json.containsKey('participants') && json['participants'] != null) {
      var listJson = json['participants'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as VehicleFormationParticipant?;
          if (m != null) participants.add(m);
        }
      }
    }
    val.participants = participants;
    val.startTime =
        json.containsKey('start_time') ? json['start_time'] as double : 0;
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$VehicleFormation;
  }

  _$VehicleFormation._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.lat,
      required this.lon,
      required this.z,
      required this.zUnits,
      required this.speed,
      required this.speedUnits,
      required this.points,
      required this.participants,
      required this.startTime,
      required this.custom})
      : super._();

  @override
  VehicleFormation rebuild(void Function(VehicleFormationBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  VehicleFormationBuilder toBuilder() =>
      VehicleFormationBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is VehicleFormation &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        zUnits == other.zUnits &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        speedUnits == other.speedUnits &&
        DeepCollectionEquality().equals(points, other.points) &&
        DeepCollectionEquality().equals(participants, other.participants) &&
        (startTime == other.startTime || startTime - other.startTime <= 1E-7) &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                0,
                                                                timestamp
                                                                        ?.hashCode ??
                                                                    null.hashCode),
                                                            src.hashCode),
                                                        srcEnt.hashCode),
                                                    dst.hashCode),
                                                dstEnt.hashCode),
                                            lat.hashCode),
                                        lon.hashCode),
                                    z.hashCode),
                                zUnits.hashCode),
                            speed.hashCode),
                        speedUnits.hashCode),
                    points.hashCode),
                participants.hashCode),
            startTime.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('VehicleFormation')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('z', '$z (m)')
          ..add('zUnits', '$zUnits (Enumerated) [${zUnits.toPrettyString()}]')
          ..add('speed', '$speed')
          ..add('speedUnits',
              '$speedUnits (Enumerated) [${speedUnits.toPrettyString()}]')
          ..add('points', '$points')
          ..add('participants', '$participants')
          ..add('startTime', '$startTime (s)')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'VehicleFormation',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'lat': lat,
        'lon': lon,
        'z': z,
        'z_units': zUnits.value,
        'speed': speed,
        'speed_units': speedUnits.value,
        'points': [
          ...points.map((m) => m.toJson(false)),
        ],
        'participants': [
          ...participants.map((m) => m.toJson(false)),
        ],
        'start_time': startTime,
        'custom': custom,
      };
}

/// Vehicle Formation builder class
///
class VehicleFormationBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<VehicleFormation, VehicleFormationBuilder> {
  _$VehicleFormation? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  ZUnitsEnum _zUnits = ZUnitsEnum(0);
  ZUnitsEnum get zUnits => _$this._zUnits;
  set zUnits(ZUnitsEnum zUnits) => _$this._zUnits = zUnits;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  SpeedUnitsEnum _speedUnits = SpeedUnitsEnum(0);
  SpeedUnitsEnum get speedUnits => _$this._speedUnits;
  set speedUnits(SpeedUnitsEnum speedUnits) => _$this._speedUnits = speedUnits;

  List<TrajectoryPoint> _points = <TrajectoryPoint>[];
  List<TrajectoryPoint> get points => _$this._points;
  set points(List<TrajectoryPoint> points) => _$this._points = points;

  List<VehicleFormationParticipant> _participants =
      <VehicleFormationParticipant>[];
  List<VehicleFormationParticipant> get participants => _$this._participants;
  set participants(List<VehicleFormationParticipant> participants) =>
      _$this._participants = participants;

  double _startTime = 0;
  double get startTime => _$this._startTime;
  set startTime(double startTime) => _$this._startTime = startTime;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  VehicleFormationBuilder();

  VehicleFormationBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  VehicleFormationBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$VehicleFormation.fromJson(json);
    replace(v);
  }

  @override
  VehicleFormationBuilder fromJson(core.Map<String, dynamic> json) =>
      VehicleFormationBuilder.fromJson(json);

  @override
  VehicleFormationBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      VehicleFormationBuilder()..copyFromHeader(headerFrom);

  VehicleFormationBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _z = _$v!.z;
      _zUnits = _$v!.zUnits;
      _speed = _$v!.speed;
      _speedUnits = _$v!.speedUnits;
      _points = _$v!.points;
      _participants = _$v!.participants;
      _startTime = _$v!.startTime;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(VehicleFormation other) {
    _$v = other as _$VehicleFormation;
  }

  @override
  void update(void Function(VehicleFormationBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  VehicleFormation build() {
    final result = _$v ??
        _$VehicleFormation._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            lat: lat,
            lon: lon,
            z: z,
            zUnits: zUnits,
            speed: speed,
            speedUnits: speedUnits,
            points: points,
            participants: participants,
            startTime: startTime,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Vehicle Formation Participant immutable class
///
class _$VehicleFormationParticipant extends VehicleFormationParticipant {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int vid;
  @override
  final double offX;
  @override
  final double offY;
  @override
  final double offZ;

  factory _$VehicleFormationParticipant(
          [void Function(VehicleFormationParticipantBuilder b)? updates]) =>
      (VehicleFormationParticipantBuilder()..update(updates)).build()
          as _$VehicleFormationParticipant;

  factory _$VehicleFormationParticipant.fromJson(
      core.Map<String, dynamic> json) {
    var val = VehicleFormationParticipantBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.vid = json.containsKey('vid') ? json['vid'] as int : 0;
    val.offX = json.containsKey('off_x') ? json['off_x'] as double : 0;
    val.offY = json.containsKey('off_y') ? json['off_y'] as double : 0;
    val.offZ = json.containsKey('off_z') ? json['off_z'] as double : 0;

    return val.build() as _$VehicleFormationParticipant;
  }

  _$VehicleFormationParticipant._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.vid,
      required this.offX,
      required this.offY,
      required this.offZ})
      : super._();

  @override
  VehicleFormationParticipant rebuild(
          void Function(VehicleFormationParticipantBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  VehicleFormationParticipantBuilder toBuilder() =>
      VehicleFormationParticipantBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is VehicleFormationParticipant &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        vid == other.vid &&
        (offX == other.offX || offX - other.offX <= 1E-7) &&
        (offY == other.offY || offY - other.offY <= 1E-7) &&
        (offZ == other.offZ || offZ - other.offZ <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    vid.hashCode),
                offX.hashCode),
            offY.hashCode),
        offZ.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('VehicleFormationParticipant')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('vid', '$vid')
          ..add('offX', '$offX (m)')
          ..add('offY', '$offY (m)')
          ..add('offZ', '$offZ (m)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'VehicleFormationParticipant',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'vid': vid,
        'off_x': offX,
        'off_y': offY,
        'off_z': offZ,
      };
}

/// Vehicle Formation Participant builder class
///
class VehicleFormationParticipantBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<VehicleFormationParticipant,
            VehicleFormationParticipantBuilder> {
  _$VehicleFormationParticipant? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _vid = 0;
  int get vid => _$this._vid;
  set vid(int vid) => _$this._vid = vid;

  double _offX = 0;
  double get offX => _$this._offX;
  set offX(double offX) => _$this._offX = offX;

  double _offY = 0;
  double get offY => _$this._offY;
  set offY(double offY) => _$this._offY = offY;

  double _offZ = 0;
  double get offZ => _$this._offZ;
  set offZ(double offZ) => _$this._offZ = offZ;

  VehicleFormationParticipantBuilder();

  VehicleFormationParticipantBuilder.fromHeader(
      ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  VehicleFormationParticipantBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$VehicleFormationParticipant.fromJson(json);
    replace(v);
  }

  @override
  VehicleFormationParticipantBuilder fromJson(core.Map<String, dynamic> json) =>
      VehicleFormationParticipantBuilder.fromJson(json);

  @override
  VehicleFormationParticipantBuilder newInstance(
          [ImcBuilderHeaderPart? headerFrom]) =>
      VehicleFormationParticipantBuilder()..copyFromHeader(headerFrom);

  VehicleFormationParticipantBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _vid = _$v!.vid;
      _offX = _$v!.offX;
      _offY = _$v!.offY;
      _offZ = _$v!.offZ;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(VehicleFormationParticipant other) {
    _$v = other as _$VehicleFormationParticipant;
  }

  @override
  void update(void Function(VehicleFormationParticipantBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  VehicleFormationParticipant build() {
    final result = _$v ??
        _$VehicleFormationParticipant._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            vid: vid,
            offX: offX,
            offY: offY,
            offZ: offZ);
    replace(result);
    return result;
  }
}

/// Stop Maneuver immutable class
///
class _$StopManeuver extends StopManeuver {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  factory _$StopManeuver([void Function(StopManeuverBuilder b)? updates]) =>
      (StopManeuverBuilder()..update(updates)).build() as _$StopManeuver;

  factory _$StopManeuver.fromJson(core.Map<String, dynamic> json) {
    var val = StopManeuverBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    return val.build() as _$StopManeuver;
  }

  _$StopManeuver._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId})
      : super._();

  @override
  StopManeuver rebuild(void Function(StopManeuverBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  StopManeuverBuilder toBuilder() => StopManeuverBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is StopManeuver &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc($jc($jc(0, timestamp?.hashCode ?? null.hashCode), src.hashCode),
                srcEnt.hashCode),
            dst.hashCode),
        dstEnt.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('StopManeuver')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'StopManeuver',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
      };
}

/// Stop Maneuver builder class
///
class StopManeuverBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<StopManeuver, StopManeuverBuilder> {
  _$StopManeuver? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  StopManeuverBuilder();

  StopManeuverBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  StopManeuverBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$StopManeuver.fromJson(json);
    replace(v);
  }

  @override
  StopManeuverBuilder fromJson(core.Map<String, dynamic> json) =>
      StopManeuverBuilder.fromJson(json);

  @override
  StopManeuverBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      StopManeuverBuilder()..copyFromHeader(headerFrom);

  StopManeuverBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(StopManeuver other) {
    _$v = other as _$StopManeuver;
  }

  @override
  void update(void Function(StopManeuverBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  StopManeuver build() {
    final result = _$v ??
        _$StopManeuver._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt);
    replace(result);
    return result;
  }
}

/// Register Maneuver immutable class
///
class _$RegisterManeuver extends RegisterManeuver {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int mid;

  factory _$RegisterManeuver(
          [void Function(RegisterManeuverBuilder b)? updates]) =>
      (RegisterManeuverBuilder()..update(updates)).build()
          as _$RegisterManeuver;

  factory _$RegisterManeuver.fromJson(core.Map<String, dynamic> json) {
    var val = RegisterManeuverBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.mid = json.containsKey('mid') ? json['mid'] as int : 0;

    return val.build() as _$RegisterManeuver;
  }

  _$RegisterManeuver._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.mid})
      : super._();

  @override
  RegisterManeuver rebuild(void Function(RegisterManeuverBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  RegisterManeuverBuilder toBuilder() =>
      RegisterManeuverBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is RegisterManeuver &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        mid == other.mid;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        mid.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('RegisterManeuver')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('mid', '$mid'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'RegisterManeuver',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'mid': mid,
      };
}

/// Register Maneuver builder class
///
class RegisterManeuverBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<RegisterManeuver, RegisterManeuverBuilder> {
  _$RegisterManeuver? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _mid = 0;
  int get mid => _$this._mid;
  set mid(int mid) => _$this._mid = mid;

  RegisterManeuverBuilder();

  RegisterManeuverBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  RegisterManeuverBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$RegisterManeuver.fromJson(json);
    replace(v);
  }

  @override
  RegisterManeuverBuilder fromJson(core.Map<String, dynamic> json) =>
      RegisterManeuverBuilder.fromJson(json);

  @override
  RegisterManeuverBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      RegisterManeuverBuilder()..copyFromHeader(headerFrom);

  RegisterManeuverBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _mid = _$v!.mid;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(RegisterManeuver other) {
    _$v = other as _$RegisterManeuver;
  }

  @override
  void update(void Function(RegisterManeuverBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  RegisterManeuver build() {
    final result = _$v ??
        _$RegisterManeuver._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            mid: mid);
    replace(result);
    return result;
  }
}

/// Maneuver Control State immutable class
///
class _$ManeuverControlState extends ManeuverControlState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final ManeuverControlStateEnumState state;
  @override
  final int eta;
  @override
  final String info;

  factory _$ManeuverControlState(
          [void Function(ManeuverControlStateBuilder b)? updates]) =>
      (ManeuverControlStateBuilder()..update(updates)).build()
          as _$ManeuverControlState;

  factory _$ManeuverControlState.fromJson(core.Map<String, dynamic> json) {
    var val = ManeuverControlStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.state = json.containsKey('state') && json['state'] != null
        ? ManeuverControlStateEnumState(json['state'] as int)
        : ManeuverControlStateEnumState(0);
    val.eta = json.containsKey('eta') ? json['eta'] as int : 0;
    val.info = json.containsKey('info') && json['info'] != null
        ? json['info'] as String
        : '';

    return val.build() as _$ManeuverControlState;
  }

  _$ManeuverControlState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.state,
      required this.eta,
      required this.info})
      : super._();

  @override
  ManeuverControlState rebuild(
          void Function(ManeuverControlStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  ManeuverControlStateBuilder toBuilder() =>
      ManeuverControlStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is ManeuverControlState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        state == other.state &&
        eta == other.eta &&
        info == other.info;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                state.hashCode),
            eta.hashCode),
        info.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('ManeuverControlState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('state', '$state (Enumerated) [${state.toPrettyString()}]')
          ..add('eta', '$eta (s)')
          ..add('info', info))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'ManeuverControlState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'state': state.value,
        'eta': eta,
        'info': info,
      };
}

/// Maneuver Control State builder class
///
class ManeuverControlStateBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<ManeuverControlState,
            ManeuverControlStateBuilder> {
  _$ManeuverControlState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  ManeuverControlStateEnumState _state = ManeuverControlStateEnumState(0);
  ManeuverControlStateEnumState get state => _$this._state;
  set state(ManeuverControlStateEnumState state) => _$this._state = state;

  int _eta = 0;
  int get eta => _$this._eta;
  set eta(int eta) => _$this._eta = eta;

  String _info = '';
  String get info => _$this._info;
  set info(String info) => _$this._info = info;

  ManeuverControlStateBuilder();

  ManeuverControlStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  ManeuverControlStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$ManeuverControlState.fromJson(json);
    replace(v);
  }

  @override
  ManeuverControlStateBuilder fromJson(core.Map<String, dynamic> json) =>
      ManeuverControlStateBuilder.fromJson(json);

  @override
  ManeuverControlStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      ManeuverControlStateBuilder()..copyFromHeader(headerFrom);

  ManeuverControlStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _state = _$v!.state;
      _eta = _$v!.eta;
      _info = _$v!.info;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(ManeuverControlState other) {
    _$v = other as _$ManeuverControlState;
  }

  @override
  void update(void Function(ManeuverControlStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  ManeuverControlState build() {
    final result = _$v ??
        _$ManeuverControlState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            state: state,
            eta: eta,
            info: info);
    replace(result);
    return result;
  }
}

/// Follow System immutable class
///
class _$FollowSystem extends FollowSystem {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int system;
  @override
  final int duration;
  @override
  final double speed;
  @override
  final SpeedUnitsEnum speedUnits;
  @override
  final double x;
  @override
  final double y;
  @override
  final double z;
  @override
  final ZUnitsEnum zUnits;

  factory _$FollowSystem([void Function(FollowSystemBuilder b)? updates]) =>
      (FollowSystemBuilder()..update(updates)).build() as _$FollowSystem;

  factory _$FollowSystem.fromJson(core.Map<String, dynamic> json) {
    var val = FollowSystemBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.system = json.containsKey('system') ? json['system'] as int : 0;
    val.duration = json.containsKey('duration') ? json['duration'] as int : 0;
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.speedUnits =
        json.containsKey('speed_units') && json['speed_units'] != null
            ? SpeedUnitsEnum(json['speed_units'] as int)
            : SpeedUnitsEnum(0);
    val.x = json.containsKey('x') ? json['x'] as double : 0;
    val.y = json.containsKey('y') ? json['y'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.zUnits = json.containsKey('z_units') && json['z_units'] != null
        ? ZUnitsEnum(json['z_units'] as int)
        : ZUnitsEnum(0);

    return val.build() as _$FollowSystem;
  }

  _$FollowSystem._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.system,
      required this.duration,
      required this.speed,
      required this.speedUnits,
      required this.x,
      required this.y,
      required this.z,
      required this.zUnits})
      : super._();

  @override
  FollowSystem rebuild(void Function(FollowSystemBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  FollowSystemBuilder toBuilder() => FollowSystemBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is FollowSystem &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        system == other.system &&
        duration == other.duration &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        speedUnits == other.speedUnits &&
        (x == other.x || x - other.x <= 1E-7) &&
        (y == other.y || y - other.y <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        zUnits == other.zUnits;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        0,
                                                        timestamp?.hashCode ??
                                                            null.hashCode),
                                                    src.hashCode),
                                                srcEnt.hashCode),
                                            dst.hashCode),
                                        dstEnt.hashCode),
                                    system.hashCode),
                                duration.hashCode),
                            speed.hashCode),
                        speedUnits.hashCode),
                    x.hashCode),
                y.hashCode),
            z.hashCode),
        zUnits.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('FollowSystem')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('system', '$system')
          ..add('duration', '$duration (s)')
          ..add('speed', '$speed')
          ..add('speedUnits',
              '$speedUnits (Enumerated) [${speedUnits.toPrettyString()}]')
          ..add('x', '$x')
          ..add('y', '$y')
          ..add('z', '$z')
          ..add('zUnits', '$zUnits (Enumerated) [${zUnits.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'FollowSystem',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'system': system,
        'duration': duration,
        'speed': speed,
        'speed_units': speedUnits.value,
        'x': x,
        'y': y,
        'z': z,
        'z_units': zUnits.value,
      };
}

/// Follow System builder class
///
class FollowSystemBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<FollowSystem, FollowSystemBuilder> {
  _$FollowSystem? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _system = 0;
  int get system => _$this._system;
  set system(int system) => _$this._system = system;

  int _duration = 0;
  int get duration => _$this._duration;
  set duration(int duration) => _$this._duration = duration;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  SpeedUnitsEnum _speedUnits = SpeedUnitsEnum(0);
  SpeedUnitsEnum get speedUnits => _$this._speedUnits;
  set speedUnits(SpeedUnitsEnum speedUnits) => _$this._speedUnits = speedUnits;

  double _x = 0;
  double get x => _$this._x;
  set x(double x) => _$this._x = x;

  double _y = 0;
  double get y => _$this._y;
  set y(double y) => _$this._y = y;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  ZUnitsEnum _zUnits = ZUnitsEnum(0);
  ZUnitsEnum get zUnits => _$this._zUnits;
  set zUnits(ZUnitsEnum zUnits) => _$this._zUnits = zUnits;

  FollowSystemBuilder();

  FollowSystemBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  FollowSystemBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$FollowSystem.fromJson(json);
    replace(v);
  }

  @override
  FollowSystemBuilder fromJson(core.Map<String, dynamic> json) =>
      FollowSystemBuilder.fromJson(json);

  @override
  FollowSystemBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      FollowSystemBuilder()..copyFromHeader(headerFrom);

  FollowSystemBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _system = _$v!.system;
      _duration = _$v!.duration;
      _speed = _$v!.speed;
      _speedUnits = _$v!.speedUnits;
      _x = _$v!.x;
      _y = _$v!.y;
      _z = _$v!.z;
      _zUnits = _$v!.zUnits;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(FollowSystem other) {
    _$v = other as _$FollowSystem;
  }

  @override
  void update(void Function(FollowSystemBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  FollowSystem build() {
    final result = _$v ??
        _$FollowSystem._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            system: system,
            duration: duration,
            speed: speed,
            speedUnits: speedUnits,
            x: x,
            y: y,
            z: z,
            zUnits: zUnits);
    replace(result);
    return result;
  }
}

/// Communications Relay immutable class
///
class _$CommsRelay extends CommsRelay {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double lat;
  @override
  final double lon;
  @override
  final double speed;
  @override
  final SpeedUnitsEnum speedUnits;
  @override
  final int duration;
  @override
  final int sysA;
  @override
  final int sysB;
  @override
  final double moveThreshold;

  factory _$CommsRelay([void Function(CommsRelayBuilder b)? updates]) =>
      (CommsRelayBuilder()..update(updates)).build() as _$CommsRelay;

  factory _$CommsRelay.fromJson(core.Map<String, dynamic> json) {
    var val = CommsRelayBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.speedUnits =
        json.containsKey('speed_units') && json['speed_units'] != null
            ? SpeedUnitsEnum(json['speed_units'] as int)
            : SpeedUnitsEnum(0);
    val.duration = json.containsKey('duration') ? json['duration'] as int : 0;
    val.sysA = json.containsKey('sys_a') ? json['sys_a'] as int : 0;
    val.sysB = json.containsKey('sys_b') ? json['sys_b'] as int : 0;
    val.moveThreshold = json.containsKey('move_threshold')
        ? json['move_threshold'] as double
        : 0;

    return val.build() as _$CommsRelay;
  }

  _$CommsRelay._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.lat,
      required this.lon,
      required this.speed,
      required this.speedUnits,
      required this.duration,
      required this.sysA,
      required this.sysB,
      required this.moveThreshold})
      : super._();

  @override
  CommsRelay rebuild(void Function(CommsRelayBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  CommsRelayBuilder toBuilder() => CommsRelayBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is CommsRelay &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        speedUnits == other.speedUnits &&
        duration == other.duration &&
        sysA == other.sysA &&
        sysB == other.sysB &&
        (moveThreshold == other.moveThreshold ||
            moveThreshold - other.moveThreshold <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        0,
                                                        timestamp?.hashCode ??
                                                            null.hashCode),
                                                    src.hashCode),
                                                srcEnt.hashCode),
                                            dst.hashCode),
                                        dstEnt.hashCode),
                                    lat.hashCode),
                                lon.hashCode),
                            speed.hashCode),
                        speedUnits.hashCode),
                    duration.hashCode),
                sysA.hashCode),
            sysB.hashCode),
        moveThreshold.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('CommsRelay')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('speed', '$speed')
          ..add('speedUnits',
              '$speedUnits (Enumerated) [${speedUnits.toPrettyString()}]')
          ..add('duration', '$duration (s)')
          ..add('sysA', '$sysA')
          ..add('sysB', '$sysB')
          ..add('moveThreshold', '$moveThreshold (m)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'CommsRelay',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'lat': lat,
        'lon': lon,
        'speed': speed,
        'speed_units': speedUnits.value,
        'duration': duration,
        'sys_a': sysA,
        'sys_b': sysB,
        'move_threshold': moveThreshold,
      };
}

/// Communications Relay builder class
///
class CommsRelayBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<CommsRelay, CommsRelayBuilder> {
  _$CommsRelay? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  SpeedUnitsEnum _speedUnits = SpeedUnitsEnum(0);
  SpeedUnitsEnum get speedUnits => _$this._speedUnits;
  set speedUnits(SpeedUnitsEnum speedUnits) => _$this._speedUnits = speedUnits;

  int _duration = 0;
  int get duration => _$this._duration;
  set duration(int duration) => _$this._duration = duration;

  int _sysA = 0;
  int get sysA => _$this._sysA;
  set sysA(int sysA) => _$this._sysA = sysA;

  int _sysB = 0;
  int get sysB => _$this._sysB;
  set sysB(int sysB) => _$this._sysB = sysB;

  double _moveThreshold = 0;
  double get moveThreshold => _$this._moveThreshold;
  set moveThreshold(double moveThreshold) =>
      _$this._moveThreshold = moveThreshold;

  CommsRelayBuilder();

  CommsRelayBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  CommsRelayBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$CommsRelay.fromJson(json);
    replace(v);
  }

  @override
  CommsRelayBuilder fromJson(core.Map<String, dynamic> json) =>
      CommsRelayBuilder.fromJson(json);

  @override
  CommsRelayBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      CommsRelayBuilder()..copyFromHeader(headerFrom);

  CommsRelayBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _speed = _$v!.speed;
      _speedUnits = _$v!.speedUnits;
      _duration = _$v!.duration;
      _sysA = _$v!.sysA;
      _sysB = _$v!.sysB;
      _moveThreshold = _$v!.moveThreshold;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(CommsRelay other) {
    _$v = other as _$CommsRelay;
  }

  @override
  void update(void Function(CommsRelayBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  CommsRelay build() {
    final result = _$v ??
        _$CommsRelay._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            lat: lat,
            lon: lon,
            speed: speed,
            speedUnits: speedUnits,
            duration: duration,
            sysA: sysA,
            sysB: sysB,
            moveThreshold: moveThreshold);
    replace(result);
    return result;
  }
}

/// Cover Area immutable class
///
class _$CoverArea extends CoverArea {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double lat;
  @override
  final double lon;
  @override
  final double z;
  @override
  final ZUnitsEnum zUnits;
  @override
  final double speed;
  @override
  final SpeedUnitsEnum speedUnits;
  @override
  final List<PolygonVertex> polygon;
  @override
  final String custom;

  factory _$CoverArea([void Function(CoverAreaBuilder b)? updates]) =>
      (CoverAreaBuilder()..update(updates)).build() as _$CoverArea;

  factory _$CoverArea.fromJson(core.Map<String, dynamic> json) {
    var val = CoverAreaBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.zUnits = json.containsKey('z_units') && json['z_units'] != null
        ? ZUnitsEnum(json['z_units'] as int)
        : ZUnitsEnum(0);
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.speedUnits =
        json.containsKey('speed_units') && json['speed_units'] != null
            ? SpeedUnitsEnum(json['speed_units'] as int)
            : SpeedUnitsEnum(0);
    var polygon = <PolygonVertex>[];
    if (json.containsKey('polygon') && json['polygon'] != null) {
      var listJson = json['polygon'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as PolygonVertex?;
          if (m != null) polygon.add(m);
        }
      }
    }
    val.polygon = polygon;
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$CoverArea;
  }

  _$CoverArea._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.lat,
      required this.lon,
      required this.z,
      required this.zUnits,
      required this.speed,
      required this.speedUnits,
      required this.polygon,
      required this.custom})
      : super._();

  @override
  CoverArea rebuild(void Function(CoverAreaBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  CoverAreaBuilder toBuilder() => CoverAreaBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is CoverArea &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        zUnits == other.zUnits &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        speedUnits == other.speedUnits &&
        DeepCollectionEquality().equals(polygon, other.polygon) &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        0,
                                                        timestamp?.hashCode ??
                                                            null.hashCode),
                                                    src.hashCode),
                                                srcEnt.hashCode),
                                            dst.hashCode),
                                        dstEnt.hashCode),
                                    lat.hashCode),
                                lon.hashCode),
                            z.hashCode),
                        zUnits.hashCode),
                    speed.hashCode),
                speedUnits.hashCode),
            polygon.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('CoverArea')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('z', '$z (m)')
          ..add('zUnits', '$zUnits (Enumerated) [${zUnits.toPrettyString()}]')
          ..add('speed', '$speed')
          ..add('speedUnits',
              '$speedUnits (Enumerated) [${speedUnits.toPrettyString()}]')
          ..add('polygon', '$polygon')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'CoverArea',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'lat': lat,
        'lon': lon,
        'z': z,
        'z_units': zUnits.value,
        'speed': speed,
        'speed_units': speedUnits.value,
        'polygon': [
          ...polygon.map((m) => m.toJson(false)),
        ],
        'custom': custom,
      };
}

/// Cover Area builder class
///
class CoverAreaBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<CoverArea, CoverAreaBuilder> {
  _$CoverArea? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  ZUnitsEnum _zUnits = ZUnitsEnum(0);
  ZUnitsEnum get zUnits => _$this._zUnits;
  set zUnits(ZUnitsEnum zUnits) => _$this._zUnits = zUnits;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  SpeedUnitsEnum _speedUnits = SpeedUnitsEnum(0);
  SpeedUnitsEnum get speedUnits => _$this._speedUnits;
  set speedUnits(SpeedUnitsEnum speedUnits) => _$this._speedUnits = speedUnits;

  List<PolygonVertex> _polygon = <PolygonVertex>[];
  List<PolygonVertex> get polygon => _$this._polygon;
  set polygon(List<PolygonVertex> polygon) => _$this._polygon = polygon;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  CoverAreaBuilder();

  CoverAreaBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  CoverAreaBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$CoverArea.fromJson(json);
    replace(v);
  }

  @override
  CoverAreaBuilder fromJson(core.Map<String, dynamic> json) =>
      CoverAreaBuilder.fromJson(json);

  @override
  CoverAreaBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      CoverAreaBuilder()..copyFromHeader(headerFrom);

  CoverAreaBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _z = _$v!.z;
      _zUnits = _$v!.zUnits;
      _speed = _$v!.speed;
      _speedUnits = _$v!.speedUnits;
      _polygon = _$v!.polygon;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(CoverArea other) {
    _$v = other as _$CoverArea;
  }

  @override
  void update(void Function(CoverAreaBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  CoverArea build() {
    final result = _$v ??
        _$CoverArea._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            lat: lat,
            lon: lon,
            z: z,
            zUnits: zUnits,
            speed: speed,
            speedUnits: speedUnits,
            polygon: polygon,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Polygon Vertex immutable class
///
class _$PolygonVertex extends PolygonVertex {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double lat;
  @override
  final double lon;

  factory _$PolygonVertex([void Function(PolygonVertexBuilder b)? updates]) =>
      (PolygonVertexBuilder()..update(updates)).build() as _$PolygonVertex;

  factory _$PolygonVertex.fromJson(core.Map<String, dynamic> json) {
    var val = PolygonVertexBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;

    return val.build() as _$PolygonVertex;
  }

  _$PolygonVertex._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.lat,
      required this.lon})
      : super._();

  @override
  PolygonVertex rebuild(void Function(PolygonVertexBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  PolygonVertexBuilder toBuilder() => PolygonVertexBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is PolygonVertex &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            lat.hashCode),
        lon.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('PolygonVertex')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'PolygonVertex',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'lat': lat,
        'lon': lon,
      };
}

/// Polygon Vertex builder class
///
class PolygonVertexBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<PolygonVertex, PolygonVertexBuilder> {
  _$PolygonVertex? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  PolygonVertexBuilder();

  PolygonVertexBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  PolygonVertexBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$PolygonVertex.fromJson(json);
    replace(v);
  }

  @override
  PolygonVertexBuilder fromJson(core.Map<String, dynamic> json) =>
      PolygonVertexBuilder.fromJson(json);

  @override
  PolygonVertexBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      PolygonVertexBuilder()..copyFromHeader(headerFrom);

  PolygonVertexBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(PolygonVertex other) {
    _$v = other as _$PolygonVertex;
  }

  @override
  void update(void Function(PolygonVertexBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  PolygonVertex build() {
    final result = _$v ??
        _$PolygonVertex._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            lat: lat,
            lon: lon);
    replace(result);
    return result;
  }
}

/// Compass Calibration Maneuver immutable class
///
class _$CompassCalibration extends CompassCalibration {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int timeout;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double z;
  @override
  final ZUnitsEnum zUnits;
  @override
  final double pitch;
  @override
  final double amplitude;
  @override
  final int duration;
  @override
  final double speed;
  @override
  final SpeedUnitsEnum speedUnits;
  @override
  final double radius;
  @override
  final CompassCalibrationEnumDirection direction;
  @override
  final String custom;

  factory _$CompassCalibration(
          [void Function(CompassCalibrationBuilder b)? updates]) =>
      (CompassCalibrationBuilder()..update(updates)).build()
          as _$CompassCalibration;

  factory _$CompassCalibration.fromJson(core.Map<String, dynamic> json) {
    var val = CompassCalibrationBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.timeout = json.containsKey('timeout') ? json['timeout'] as int : 0;
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.zUnits = json.containsKey('z_units') && json['z_units'] != null
        ? ZUnitsEnum(json['z_units'] as int)
        : ZUnitsEnum(0);
    val.pitch = json.containsKey('pitch') ? json['pitch'] as double : 0;
    val.amplitude =
        json.containsKey('amplitude') ? json['amplitude'] as double : 0;
    val.duration = json.containsKey('duration') ? json['duration'] as int : 0;
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.speedUnits =
        json.containsKey('speed_units') && json['speed_units'] != null
            ? SpeedUnitsEnum(json['speed_units'] as int)
            : SpeedUnitsEnum(0);
    val.radius = json.containsKey('radius') ? json['radius'] as double : 0;
    val.direction = json.containsKey('direction') && json['direction'] != null
        ? CompassCalibrationEnumDirection(json['direction'] as int)
        : CompassCalibrationEnumDirection(0);
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$CompassCalibration;
  }

  _$CompassCalibration._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.timeout,
      required this.lat,
      required this.lon,
      required this.z,
      required this.zUnits,
      required this.pitch,
      required this.amplitude,
      required this.duration,
      required this.speed,
      required this.speedUnits,
      required this.radius,
      required this.direction,
      required this.custom})
      : super._();

  @override
  CompassCalibration rebuild(
          void Function(CompassCalibrationBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  CompassCalibrationBuilder toBuilder() =>
      CompassCalibrationBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is CompassCalibration &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        timeout == other.timeout &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        zUnits == other.zUnits &&
        (pitch == other.pitch || pitch - other.pitch <= 1E-7) &&
        (amplitude == other.amplitude || amplitude - other.amplitude <= 1E-7) &&
        duration == other.duration &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        speedUnits == other.speedUnits &&
        (radius == other.radius || radius - other.radius <= 1E-7) &&
        direction == other.direction &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            0,
                                                                            timestamp?.hashCode ??
                                                                                null.hashCode),
                                                                        src.hashCode),
                                                                    srcEnt.hashCode),
                                                                dst.hashCode),
                                                            dstEnt.hashCode),
                                                        timeout.hashCode),
                                                    lat.hashCode),
                                                lon.hashCode),
                                            z.hashCode),
                                        zUnits.hashCode),
                                    pitch.hashCode),
                                amplitude.hashCode),
                            duration.hashCode),
                        speed.hashCode),
                    speedUnits.hashCode),
                radius.hashCode),
            direction.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('CompassCalibration')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('timeout', '$timeout (s)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('z', '$z (m)')
          ..add('zUnits', '$zUnits (Enumerated) [${zUnits.toPrettyString()}]')
          ..add('pitch', '$pitch (rad) [${pitch * 180.0 / math.pi} (deg)]')
          ..add('amplitude', '$amplitude (m)')
          ..add('duration', '$duration (s)')
          ..add('speed', '$speed')
          ..add('speedUnits',
              '$speedUnits (Enumerated) [${speedUnits.toPrettyString()}]')
          ..add('radius', '$radius (m)')
          ..add('direction',
              '$direction (Enumerated) [${direction.toPrettyString()}]')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'CompassCalibration',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'timeout': timeout,
        'lat': lat,
        'lon': lon,
        'z': z,
        'z_units': zUnits.value,
        'pitch': pitch,
        'amplitude': amplitude,
        'duration': duration,
        'speed': speed,
        'speed_units': speedUnits.value,
        'radius': radius,
        'direction': direction.value,
        'custom': custom,
      };
}

/// Compass Calibration Maneuver builder class
///
class CompassCalibrationBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<CompassCalibration, CompassCalibrationBuilder> {
  _$CompassCalibration? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _timeout = 0;
  int get timeout => _$this._timeout;
  set timeout(int timeout) => _$this._timeout = timeout;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  ZUnitsEnum _zUnits = ZUnitsEnum(0);
  ZUnitsEnum get zUnits => _$this._zUnits;
  set zUnits(ZUnitsEnum zUnits) => _$this._zUnits = zUnits;

  double _pitch = 0;
  double get pitch => _$this._pitch;
  set pitch(double pitch) => _$this._pitch = pitch;

  double _amplitude = 0;
  double get amplitude => _$this._amplitude;
  set amplitude(double amplitude) => _$this._amplitude = amplitude;

  int _duration = 0;
  int get duration => _$this._duration;
  set duration(int duration) => _$this._duration = duration;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  SpeedUnitsEnum _speedUnits = SpeedUnitsEnum(0);
  SpeedUnitsEnum get speedUnits => _$this._speedUnits;
  set speedUnits(SpeedUnitsEnum speedUnits) => _$this._speedUnits = speedUnits;

  double _radius = 0;
  double get radius => _$this._radius;
  set radius(double radius) => _$this._radius = radius;

  CompassCalibrationEnumDirection _direction =
      CompassCalibrationEnumDirection(0);
  CompassCalibrationEnumDirection get direction => _$this._direction;
  set direction(CompassCalibrationEnumDirection direction) =>
      _$this._direction = direction;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  CompassCalibrationBuilder();

  CompassCalibrationBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  CompassCalibrationBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$CompassCalibration.fromJson(json);
    replace(v);
  }

  @override
  CompassCalibrationBuilder fromJson(core.Map<String, dynamic> json) =>
      CompassCalibrationBuilder.fromJson(json);

  @override
  CompassCalibrationBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      CompassCalibrationBuilder()..copyFromHeader(headerFrom);

  CompassCalibrationBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _timeout = _$v!.timeout;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _z = _$v!.z;
      _zUnits = _$v!.zUnits;
      _pitch = _$v!.pitch;
      _amplitude = _$v!.amplitude;
      _duration = _$v!.duration;
      _speed = _$v!.speed;
      _speedUnits = _$v!.speedUnits;
      _radius = _$v!.radius;
      _direction = _$v!.direction;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(CompassCalibration other) {
    _$v = other as _$CompassCalibration;
  }

  @override
  void update(void Function(CompassCalibrationBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  CompassCalibration build() {
    final result = _$v ??
        _$CompassCalibration._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            timeout: timeout,
            lat: lat,
            lon: lon,
            z: z,
            zUnits: zUnits,
            pitch: pitch,
            amplitude: amplitude,
            duration: duration,
            speed: speed,
            speedUnits: speedUnits,
            radius: radius,
            direction: direction,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Formation Parameters immutable class
///
class _$FormationParameters extends FormationParameters {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String formationName;
  @override
  final FormationParametersEnumReferenceFrame referenceFrame;
  @override
  final List<VehicleFormationParticipant> participants;
  @override
  final String custom;

  factory _$FormationParameters(
          [void Function(FormationParametersBuilder b)? updates]) =>
      (FormationParametersBuilder()..update(updates)).build()
          as _$FormationParameters;

  factory _$FormationParameters.fromJson(core.Map<String, dynamic> json) {
    var val = FormationParametersBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.formationName =
        json.containsKey('formation_name') && json['formation_name'] != null
            ? json['formation_name'] as String
            : '';
    val.referenceFrame = json.containsKey('reference_frame') &&
            json['reference_frame'] != null
        ? FormationParametersEnumReferenceFrame(json['reference_frame'] as int)
        : FormationParametersEnumReferenceFrame(0);
    var participants = <VehicleFormationParticipant>[];
    if (json.containsKey('participants') && json['participants'] != null) {
      var listJson = json['participants'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as VehicleFormationParticipant?;
          if (m != null) participants.add(m);
        }
      }
    }
    val.participants = participants;
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$FormationParameters;
  }

  _$FormationParameters._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.formationName,
      required this.referenceFrame,
      required this.participants,
      required this.custom})
      : super._();

  @override
  FormationParameters rebuild(
          void Function(FormationParametersBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  FormationParametersBuilder toBuilder() =>
      FormationParametersBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is FormationParameters &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        formationName == other.formationName &&
        referenceFrame == other.referenceFrame &&
        DeepCollectionEquality().equals(participants, other.participants) &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    formationName.hashCode),
                referenceFrame.hashCode),
            participants.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('FormationParameters')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('formationName', formationName)
          ..add('referenceFrame',
              '$referenceFrame (Enumerated) [${referenceFrame.toPrettyString()}]')
          ..add('participants', '$participants')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'FormationParameters',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'formation_name': formationName,
        'reference_frame': referenceFrame.value,
        'participants': [
          ...participants.map((m) => m.toJson(false)),
        ],
        'custom': custom,
      };
}

/// Formation Parameters builder class
///
class FormationParametersBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<FormationParameters,
            FormationParametersBuilder> {
  _$FormationParameters? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _formationName = '';
  String get formationName => _$this._formationName;
  set formationName(String formationName) =>
      _$this._formationName = formationName;

  FormationParametersEnumReferenceFrame _referenceFrame =
      FormationParametersEnumReferenceFrame(0);
  FormationParametersEnumReferenceFrame get referenceFrame =>
      _$this._referenceFrame;
  set referenceFrame(FormationParametersEnumReferenceFrame referenceFrame) =>
      _$this._referenceFrame = referenceFrame;

  List<VehicleFormationParticipant> _participants =
      <VehicleFormationParticipant>[];
  List<VehicleFormationParticipant> get participants => _$this._participants;
  set participants(List<VehicleFormationParticipant> participants) =>
      _$this._participants = participants;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  FormationParametersBuilder();

  FormationParametersBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  FormationParametersBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$FormationParameters.fromJson(json);
    replace(v);
  }

  @override
  FormationParametersBuilder fromJson(core.Map<String, dynamic> json) =>
      FormationParametersBuilder.fromJson(json);

  @override
  FormationParametersBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      FormationParametersBuilder()..copyFromHeader(headerFrom);

  FormationParametersBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _formationName = _$v!.formationName;
      _referenceFrame = _$v!.referenceFrame;
      _participants = _$v!.participants;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(FormationParameters other) {
    _$v = other as _$FormationParameters;
  }

  @override
  void update(void Function(FormationParametersBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  FormationParameters build() {
    final result = _$v ??
        _$FormationParameters._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            formationName: formationName,
            referenceFrame: referenceFrame,
            participants: participants,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Formation Plan Execution immutable class
///
class _$FormationPlanExecution extends FormationPlanExecution {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String groupName;
  @override
  final String formationName;
  @override
  final String planId;
  @override
  final String description;
  @override
  final double leaderSpeed;
  @override
  final double leaderBankLim;
  @override
  final double posSimErrLim;
  @override
  final double posSimErrWrn;
  @override
  final int posSimErrTimeout;
  @override
  final double convergMax;
  @override
  final int convergTimeout;
  @override
  final int commsTimeout;
  @override
  final double turbLim;
  @override
  final String custom;

  factory _$FormationPlanExecution(
          [void Function(FormationPlanExecutionBuilder b)? updates]) =>
      (FormationPlanExecutionBuilder()..update(updates)).build()
          as _$FormationPlanExecution;

  factory _$FormationPlanExecution.fromJson(core.Map<String, dynamic> json) {
    var val = FormationPlanExecutionBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.groupName = json.containsKey('group_name') && json['group_name'] != null
        ? json['group_name'] as String
        : '';
    val.formationName =
        json.containsKey('formation_name') && json['formation_name'] != null
            ? json['formation_name'] as String
            : '';
    val.planId = json.containsKey('plan_id') && json['plan_id'] != null
        ? json['plan_id'] as String
        : '';
    val.description =
        json.containsKey('description') && json['description'] != null
            ? json['description'] as String
            : '';
    val.leaderSpeed =
        json.containsKey('leader_speed') ? json['leader_speed'] as double : 0;
    val.leaderBankLim = json.containsKey('leader_bank_lim')
        ? json['leader_bank_lim'] as double
        : 0;
    val.posSimErrLim = json.containsKey('pos_sim_err_lim')
        ? json['pos_sim_err_lim'] as double
        : 0;
    val.posSimErrWrn = json.containsKey('pos_sim_err_wrn')
        ? json['pos_sim_err_wrn'] as double
        : 0;
    val.posSimErrTimeout = json.containsKey('pos_sim_err_timeout')
        ? json['pos_sim_err_timeout'] as int
        : 0;
    val.convergMax =
        json.containsKey('converg_max') ? json['converg_max'] as double : 0;
    val.convergTimeout = json.containsKey('converg_timeout')
        ? json['converg_timeout'] as int
        : 0;
    val.commsTimeout =
        json.containsKey('comms_timeout') ? json['comms_timeout'] as int : 0;
    val.turbLim = json.containsKey('turb_lim') ? json['turb_lim'] as double : 0;
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$FormationPlanExecution;
  }

  _$FormationPlanExecution._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.groupName,
      required this.formationName,
      required this.planId,
      required this.description,
      required this.leaderSpeed,
      required this.leaderBankLim,
      required this.posSimErrLim,
      required this.posSimErrWrn,
      required this.posSimErrTimeout,
      required this.convergMax,
      required this.convergTimeout,
      required this.commsTimeout,
      required this.turbLim,
      required this.custom})
      : super._();

  @override
  FormationPlanExecution rebuild(
          void Function(FormationPlanExecutionBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  FormationPlanExecutionBuilder toBuilder() =>
      FormationPlanExecutionBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is FormationPlanExecution &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        groupName == other.groupName &&
        formationName == other.formationName &&
        planId == other.planId &&
        description == other.description &&
        (leaderSpeed == other.leaderSpeed ||
            leaderSpeed - other.leaderSpeed <= 1E-7) &&
        (leaderBankLim == other.leaderBankLim ||
            leaderBankLim - other.leaderBankLim <= 1E-7) &&
        (posSimErrLim == other.posSimErrLim ||
            posSimErrLim - other.posSimErrLim <= 1E-7) &&
        (posSimErrWrn == other.posSimErrWrn ||
            posSimErrWrn - other.posSimErrWrn <= 1E-7) &&
        posSimErrTimeout == other.posSimErrTimeout &&
        (convergMax == other.convergMax ||
            convergMax - other.convergMax <= 1E-7) &&
        convergTimeout == other.convergTimeout &&
        commsTimeout == other.commsTimeout &&
        (turbLim == other.turbLim || turbLim - other.turbLim <= 1E-7) &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc(0,
                                                                                timestamp?.hashCode ?? null.hashCode),
                                                                            src.hashCode),
                                                                        srcEnt.hashCode),
                                                                    dst.hashCode),
                                                                dstEnt.hashCode),
                                                            groupName.hashCode),
                                                        formationName.hashCode),
                                                    planId.hashCode),
                                                description.hashCode),
                                            leaderSpeed.hashCode),
                                        leaderBankLim.hashCode),
                                    posSimErrLim.hashCode),
                                posSimErrWrn.hashCode),
                            posSimErrTimeout.hashCode),
                        convergMax.hashCode),
                    convergTimeout.hashCode),
                commsTimeout.hashCode),
            turbLim.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('FormationPlanExecution')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('groupName', groupName)
          ..add('formationName', formationName)
          ..add('planId', planId)
          ..add('description', description)
          ..add('leaderSpeed', '$leaderSpeed (m/s)')
          ..add('leaderBankLim', '$leaderBankLim (m/s)')
          ..add('posSimErrLim', '$posSimErrLim (m)')
          ..add('posSimErrWrn', '$posSimErrWrn (m)')
          ..add('posSimErrTimeout', '$posSimErrTimeout (s)')
          ..add('convergMax', '$convergMax (m)')
          ..add('convergTimeout', '$convergTimeout (s)')
          ..add('commsTimeout', '$commsTimeout (s)')
          ..add('turbLim', '$turbLim (m/s)')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'FormationPlanExecution',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'group_name': groupName,
        'formation_name': formationName,
        'plan_id': planId,
        'description': description,
        'leader_speed': leaderSpeed,
        'leader_bank_lim': leaderBankLim,
        'pos_sim_err_lim': posSimErrLim,
        'pos_sim_err_wrn': posSimErrWrn,
        'pos_sim_err_timeout': posSimErrTimeout,
        'converg_max': convergMax,
        'converg_timeout': convergTimeout,
        'comms_timeout': commsTimeout,
        'turb_lim': turbLim,
        'custom': custom,
      };
}

/// Formation Plan Execution builder class
///
class FormationPlanExecutionBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<FormationPlanExecution,
            FormationPlanExecutionBuilder> {
  _$FormationPlanExecution? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _groupName = '';
  String get groupName => _$this._groupName;
  set groupName(String groupName) => _$this._groupName = groupName;

  String _formationName = '';
  String get formationName => _$this._formationName;
  set formationName(String formationName) =>
      _$this._formationName = formationName;

  String _planId = '';
  String get planId => _$this._planId;
  set planId(String planId) => _$this._planId = planId;

  String _description = '';
  String get description => _$this._description;
  set description(String description) => _$this._description = description;

  double _leaderSpeed = 0;
  double get leaderSpeed => _$this._leaderSpeed;
  set leaderSpeed(double leaderSpeed) => _$this._leaderSpeed = leaderSpeed;

  double _leaderBankLim = 0;
  double get leaderBankLim => _$this._leaderBankLim;
  set leaderBankLim(double leaderBankLim) =>
      _$this._leaderBankLim = leaderBankLim;

  double _posSimErrLim = 0;
  double get posSimErrLim => _$this._posSimErrLim;
  set posSimErrLim(double posSimErrLim) => _$this._posSimErrLim = posSimErrLim;

  double _posSimErrWrn = 0;
  double get posSimErrWrn => _$this._posSimErrWrn;
  set posSimErrWrn(double posSimErrWrn) => _$this._posSimErrWrn = posSimErrWrn;

  int _posSimErrTimeout = 0;
  int get posSimErrTimeout => _$this._posSimErrTimeout;
  set posSimErrTimeout(int posSimErrTimeout) =>
      _$this._posSimErrTimeout = posSimErrTimeout;

  double _convergMax = 0;
  double get convergMax => _$this._convergMax;
  set convergMax(double convergMax) => _$this._convergMax = convergMax;

  int _convergTimeout = 0;
  int get convergTimeout => _$this._convergTimeout;
  set convergTimeout(int convergTimeout) =>
      _$this._convergTimeout = convergTimeout;

  int _commsTimeout = 0;
  int get commsTimeout => _$this._commsTimeout;
  set commsTimeout(int commsTimeout) => _$this._commsTimeout = commsTimeout;

  double _turbLim = 0;
  double get turbLim => _$this._turbLim;
  set turbLim(double turbLim) => _$this._turbLim = turbLim;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  FormationPlanExecutionBuilder();

  FormationPlanExecutionBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  FormationPlanExecutionBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$FormationPlanExecution.fromJson(json);
    replace(v);
  }

  @override
  FormationPlanExecutionBuilder fromJson(core.Map<String, dynamic> json) =>
      FormationPlanExecutionBuilder.fromJson(json);

  @override
  FormationPlanExecutionBuilder newInstance(
          [ImcBuilderHeaderPart? headerFrom]) =>
      FormationPlanExecutionBuilder()..copyFromHeader(headerFrom);

  FormationPlanExecutionBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _groupName = _$v!.groupName;
      _formationName = _$v!.formationName;
      _planId = _$v!.planId;
      _description = _$v!.description;
      _leaderSpeed = _$v!.leaderSpeed;
      _leaderBankLim = _$v!.leaderBankLim;
      _posSimErrLim = _$v!.posSimErrLim;
      _posSimErrWrn = _$v!.posSimErrWrn;
      _posSimErrTimeout = _$v!.posSimErrTimeout;
      _convergMax = _$v!.convergMax;
      _convergTimeout = _$v!.convergTimeout;
      _commsTimeout = _$v!.commsTimeout;
      _turbLim = _$v!.turbLim;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(FormationPlanExecution other) {
    _$v = other as _$FormationPlanExecution;
  }

  @override
  void update(void Function(FormationPlanExecutionBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  FormationPlanExecution build() {
    final result = _$v ??
        _$FormationPlanExecution._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            groupName: groupName,
            formationName: formationName,
            planId: planId,
            description: description,
            leaderSpeed: leaderSpeed,
            leaderBankLim: leaderBankLim,
            posSimErrLim: posSimErrLim,
            posSimErrWrn: posSimErrWrn,
            posSimErrTimeout: posSimErrTimeout,
            convergMax: convergMax,
            convergTimeout: convergTimeout,
            commsTimeout: commsTimeout,
            turbLim: turbLim,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Follow Reference Maneuver immutable class
///
class _$FollowReference extends FollowReference {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int controlSrc;
  @override
  final int controlEnt;
  @override
  final double timeout;
  @override
  final double loiterRadius;
  @override
  final double altitudeInterval;

  factory _$FollowReference(
          [void Function(FollowReferenceBuilder b)? updates]) =>
      (FollowReferenceBuilder()..update(updates)).build() as _$FollowReference;

  factory _$FollowReference.fromJson(core.Map<String, dynamic> json) {
    var val = FollowReferenceBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.controlSrc =
        json.containsKey('control_src') ? json['control_src'] as int : 0;
    val.controlEnt =
        json.containsKey('control_ent') ? json['control_ent'] as int : 0;
    val.timeout = json.containsKey('timeout') ? json['timeout'] as double : 0;
    val.loiterRadius =
        json.containsKey('loiter_radius') ? json['loiter_radius'] as double : 0;
    val.altitudeInterval = json.containsKey('altitude_interval')
        ? json['altitude_interval'] as double
        : 0;

    return val.build() as _$FollowReference;
  }

  _$FollowReference._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.controlSrc,
      required this.controlEnt,
      required this.timeout,
      required this.loiterRadius,
      required this.altitudeInterval})
      : super._();

  @override
  FollowReference rebuild(void Function(FollowReferenceBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  FollowReferenceBuilder toBuilder() => FollowReferenceBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is FollowReference &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        controlSrc == other.controlSrc &&
        controlEnt == other.controlEnt &&
        (timeout == other.timeout || timeout - other.timeout <= 1E-7) &&
        (loiterRadius == other.loiterRadius ||
            loiterRadius - other.loiterRadius <= 1E-7) &&
        (altitudeInterval == other.altitudeInterval ||
            altitudeInterval - other.altitudeInterval <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            0,
                                            timestamp?.hashCode ??
                                                null.hashCode),
                                        src.hashCode),
                                    srcEnt.hashCode),
                                dst.hashCode),
                            dstEnt.hashCode),
                        controlSrc.hashCode),
                    controlEnt.hashCode),
                timeout.hashCode),
            loiterRadius.hashCode),
        altitudeInterval.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('FollowReference')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('controlSrc', '$controlSrc')
          ..add('controlEnt', '$controlEnt')
          ..add('timeout', '$timeout')
          ..add('loiterRadius', '$loiterRadius')
          ..add('altitudeInterval', '$altitudeInterval'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'FollowReference',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'control_src': controlSrc,
        'control_ent': controlEnt,
        'timeout': timeout,
        'loiter_radius': loiterRadius,
        'altitude_interval': altitudeInterval,
      };
}

/// Follow Reference Maneuver builder class
///
class FollowReferenceBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<FollowReference, FollowReferenceBuilder> {
  _$FollowReference? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _controlSrc = 0;
  int get controlSrc => _$this._controlSrc;
  set controlSrc(int controlSrc) => _$this._controlSrc = controlSrc;

  int _controlEnt = 0;
  int get controlEnt => _$this._controlEnt;
  set controlEnt(int controlEnt) => _$this._controlEnt = controlEnt;

  double _timeout = 0;
  double get timeout => _$this._timeout;
  set timeout(double timeout) => _$this._timeout = timeout;

  double _loiterRadius = 0;
  double get loiterRadius => _$this._loiterRadius;
  set loiterRadius(double loiterRadius) => _$this._loiterRadius = loiterRadius;

  double _altitudeInterval = 0;
  double get altitudeInterval => _$this._altitudeInterval;
  set altitudeInterval(double altitudeInterval) =>
      _$this._altitudeInterval = altitudeInterval;

  FollowReferenceBuilder();

  FollowReferenceBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  FollowReferenceBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$FollowReference.fromJson(json);
    replace(v);
  }

  @override
  FollowReferenceBuilder fromJson(core.Map<String, dynamic> json) =>
      FollowReferenceBuilder.fromJson(json);

  @override
  FollowReferenceBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      FollowReferenceBuilder()..copyFromHeader(headerFrom);

  FollowReferenceBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _controlSrc = _$v!.controlSrc;
      _controlEnt = _$v!.controlEnt;
      _timeout = _$v!.timeout;
      _loiterRadius = _$v!.loiterRadius;
      _altitudeInterval = _$v!.altitudeInterval;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(FollowReference other) {
    _$v = other as _$FollowReference;
  }

  @override
  void update(void Function(FollowReferenceBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  FollowReference build() {
    final result = _$v ??
        _$FollowReference._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            controlSrc: controlSrc,
            controlEnt: controlEnt,
            timeout: timeout,
            loiterRadius: loiterRadius,
            altitudeInterval: altitudeInterval);
    replace(result);
    return result;
  }
}

/// Reference To Follow immutable class
///
class _$Reference extends Reference {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final ReferenceBitfieldFlags flags;
  @override
  final DesiredSpeed? speed;
  @override
  final DesiredZ? z;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double radius;

  factory _$Reference([void Function(ReferenceBuilder b)? updates]) =>
      (ReferenceBuilder()..update(updates)).build() as _$Reference;

  factory _$Reference.fromJson(core.Map<String, dynamic> json) {
    var val = ReferenceBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.flags = json.containsKey('flags') && json['flags'] != null
        ? ReferenceBitfieldFlags(json['flags'] as int)
        : ReferenceBitfieldFlags(0);

    DesiredSpeed? speed;
    if (json.containsKey('speed') && json['speed'] != null) {
      var msgJson = json['speed'] as core.Map<String, dynamic>;
      if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
        var msgType = msgJson['abbrev'] as String;
        var builder = messagesBuilders[msgType]?.call();
        builder = builder?.fromJson(msgJson);
        speed = builder?.build() as DesiredSpeed?;
      }
    }
    val.speed = speed;

    DesiredZ? z;
    if (json.containsKey('z') && json['z'] != null) {
      var msgJson = json['z'] as core.Map<String, dynamic>;
      if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
        var msgType = msgJson['abbrev'] as String;
        var builder = messagesBuilders[msgType]?.call();
        builder = builder?.fromJson(msgJson);
        z = builder?.build() as DesiredZ?;
      }
    }
    val.z = z;
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.radius = json.containsKey('radius') ? json['radius'] as double : 0;

    return val.build() as _$Reference;
  }

  _$Reference._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.flags,
      this.speed,
      this.z,
      required this.lat,
      required this.lon,
      required this.radius})
      : super._();

  @override
  Reference rebuild(void Function(ReferenceBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  ReferenceBuilder toBuilder() => ReferenceBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Reference &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        flags == other.flags &&
        speed == other.speed &&
        z == other.z &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (radius == other.radius || radius - other.radius <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                0,
                                                timestamp?.hashCode ??
                                                    null.hashCode),
                                            src.hashCode),
                                        srcEnt.hashCode),
                                    dst.hashCode),
                                dstEnt.hashCode),
                            flags.hashCode),
                        speed?.hashCode ?? null.hashCode),
                    z?.hashCode ?? null.hashCode),
                lat.hashCode),
            lon.hashCode),
        radius.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Reference')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('flags', '$flags (Bitfield) [${flags.toPrettyString()}]')
          ..add('speed', '$speed')
          ..add('z', '$z')
          ..add('lat', '$lat')
          ..add('lon', '$lon')
          ..add('radius', '$radius'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Reference',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'flags': flags.value,
        'speed': speed?.toJson(false),
        'z': z?.toJson(false),
        'lat': lat,
        'lon': lon,
        'radius': radius,
      };
}

/// Reference To Follow builder class
///
class ReferenceBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Reference, ReferenceBuilder> {
  _$Reference? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  ReferenceBitfieldFlags _flags = ReferenceBitfieldFlags(0);
  ReferenceBitfieldFlags get flags => _$this._flags;
  set flags(ReferenceBitfieldFlags flags) => _$this._flags = flags;

  DesiredSpeed? _speed;
  DesiredSpeed? get speed => _$this._speed;
  set speed(DesiredSpeed? speed) => _$this._speed = speed;

  DesiredZ? _z;
  DesiredZ? get z => _$this._z;
  set z(DesiredZ? z) => _$this._z = z;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _radius = 0;
  double get radius => _$this._radius;
  set radius(double radius) => _$this._radius = radius;

  ReferenceBuilder();

  ReferenceBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  ReferenceBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Reference.fromJson(json);
    replace(v);
  }

  @override
  ReferenceBuilder fromJson(core.Map<String, dynamic> json) =>
      ReferenceBuilder.fromJson(json);

  @override
  ReferenceBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      ReferenceBuilder()..copyFromHeader(headerFrom);

  ReferenceBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _flags = _$v!.flags;
      _speed = _$v!.speed;
      _z = _$v!.z;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _radius = _$v!.radius;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Reference other) {
    _$v = other as _$Reference;
  }

  @override
  void update(void Function(ReferenceBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Reference build() {
    final result = _$v ??
        _$Reference._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            flags: flags,
            speed: speed,
            z: z,
            lat: lat,
            lon: lon,
            radius: radius);
    replace(result);
    return result;
  }
}

/// Follow Reference State immutable class
///
class _$FollowRefState extends FollowRefState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int controlSrc;
  @override
  final int controlEnt;
  @override
  final Reference? reference;
  @override
  final FollowRefStateEnumState state;
  @override
  final FollowRefStateBitfieldProximity proximity;

  factory _$FollowRefState([void Function(FollowRefStateBuilder b)? updates]) =>
      (FollowRefStateBuilder()..update(updates)).build() as _$FollowRefState;

  factory _$FollowRefState.fromJson(core.Map<String, dynamic> json) {
    var val = FollowRefStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.controlSrc =
        json.containsKey('control_src') ? json['control_src'] as int : 0;
    val.controlEnt =
        json.containsKey('control_ent') ? json['control_ent'] as int : 0;

    Reference? reference;
    if (json.containsKey('reference') && json['reference'] != null) {
      var msgJson = json['reference'] as core.Map<String, dynamic>;
      if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
        var msgType = msgJson['abbrev'] as String;
        var builder = messagesBuilders[msgType]?.call();
        builder = builder?.fromJson(msgJson);
        reference = builder?.build() as Reference?;
      }
    }
    val.reference = reference;
    val.state = json.containsKey('state') && json['state'] != null
        ? FollowRefStateEnumState(json['state'] as int)
        : FollowRefStateEnumState(0);
    val.proximity = json.containsKey('proximity') && json['proximity'] != null
        ? FollowRefStateBitfieldProximity(json['proximity'] as int)
        : FollowRefStateBitfieldProximity(0);

    return val.build() as _$FollowRefState;
  }

  _$FollowRefState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.controlSrc,
      required this.controlEnt,
      this.reference,
      required this.state,
      required this.proximity})
      : super._();

  @override
  FollowRefState rebuild(void Function(FollowRefStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  FollowRefStateBuilder toBuilder() => FollowRefStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is FollowRefState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        controlSrc == other.controlSrc &&
        controlEnt == other.controlEnt &&
        reference == other.reference &&
        state == other.state &&
        proximity == other.proximity;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            0,
                                            timestamp?.hashCode ??
                                                null.hashCode),
                                        src.hashCode),
                                    srcEnt.hashCode),
                                dst.hashCode),
                            dstEnt.hashCode),
                        controlSrc.hashCode),
                    controlEnt.hashCode),
                reference?.hashCode ?? null.hashCode),
            state.hashCode),
        proximity.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('FollowRefState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('controlSrc', '$controlSrc')
          ..add('controlEnt', '$controlEnt')
          ..add('reference', '$reference')
          ..add('state', '$state (Enumerated) [${state.toPrettyString()}]')
          ..add('proximity',
              '$proximity (Bitfield) [${proximity.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'FollowRefState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'control_src': controlSrc,
        'control_ent': controlEnt,
        'reference': reference?.toJson(false),
        'state': state.value,
        'proximity': proximity.value,
      };
}

/// Follow Reference State builder class
///
class FollowRefStateBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<FollowRefState, FollowRefStateBuilder> {
  _$FollowRefState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _controlSrc = 0;
  int get controlSrc => _$this._controlSrc;
  set controlSrc(int controlSrc) => _$this._controlSrc = controlSrc;

  int _controlEnt = 0;
  int get controlEnt => _$this._controlEnt;
  set controlEnt(int controlEnt) => _$this._controlEnt = controlEnt;

  Reference? _reference;
  Reference? get reference => _$this._reference;
  set reference(Reference? reference) => _$this._reference = reference;

  FollowRefStateEnumState _state = FollowRefStateEnumState(0);
  FollowRefStateEnumState get state => _$this._state;
  set state(FollowRefStateEnumState state) => _$this._state = state;

  FollowRefStateBitfieldProximity _proximity =
      FollowRefStateBitfieldProximity(0);
  FollowRefStateBitfieldProximity get proximity => _$this._proximity;
  set proximity(FollowRefStateBitfieldProximity proximity) =>
      _$this._proximity = proximity;

  FollowRefStateBuilder();

  FollowRefStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  FollowRefStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$FollowRefState.fromJson(json);
    replace(v);
  }

  @override
  FollowRefStateBuilder fromJson(core.Map<String, dynamic> json) =>
      FollowRefStateBuilder.fromJson(json);

  @override
  FollowRefStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      FollowRefStateBuilder()..copyFromHeader(headerFrom);

  FollowRefStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _controlSrc = _$v!.controlSrc;
      _controlEnt = _$v!.controlEnt;
      _reference = _$v!.reference;
      _state = _$v!.state;
      _proximity = _$v!.proximity;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(FollowRefState other) {
    _$v = other as _$FollowRefState;
  }

  @override
  void update(void Function(FollowRefStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  FollowRefState build() {
    final result = _$v ??
        _$FollowRefState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            controlSrc: controlSrc,
            controlEnt: controlEnt,
            reference: reference,
            state: state,
            proximity: proximity);
    replace(result);
    return result;
  }
}

/// Formation Monitoring Data immutable class
///
class _$FormationMonitor extends FormationMonitor {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double axCmd;
  @override
  final double ayCmd;
  @override
  final double azCmd;
  @override
  final double axDes;
  @override
  final double ayDes;
  @override
  final double azDes;
  @override
  final double virtErrX;
  @override
  final double virtErrY;
  @override
  final double virtErrZ;
  @override
  final double surfFdbkX;
  @override
  final double surfFdbkY;
  @override
  final double surfFdbkZ;
  @override
  final double surfUnknX;
  @override
  final double surfUnknY;
  @override
  final double surfUnknZ;
  @override
  final double ssX;
  @override
  final double ssY;
  @override
  final double ssZ;
  @override
  final List<RelativeState> relState;

  factory _$FormationMonitor(
          [void Function(FormationMonitorBuilder b)? updates]) =>
      (FormationMonitorBuilder()..update(updates)).build()
          as _$FormationMonitor;

  factory _$FormationMonitor.fromJson(core.Map<String, dynamic> json) {
    var val = FormationMonitorBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.axCmd = json.containsKey('ax_cmd') ? json['ax_cmd'] as double : 0;
    val.ayCmd = json.containsKey('ay_cmd') ? json['ay_cmd'] as double : 0;
    val.azCmd = json.containsKey('az_cmd') ? json['az_cmd'] as double : 0;
    val.axDes = json.containsKey('ax_des') ? json['ax_des'] as double : 0;
    val.ayDes = json.containsKey('ay_des') ? json['ay_des'] as double : 0;
    val.azDes = json.containsKey('az_des') ? json['az_des'] as double : 0;
    val.virtErrX =
        json.containsKey('virt_err_x') ? json['virt_err_x'] as double : 0;
    val.virtErrY =
        json.containsKey('virt_err_y') ? json['virt_err_y'] as double : 0;
    val.virtErrZ =
        json.containsKey('virt_err_z') ? json['virt_err_z'] as double : 0;
    val.surfFdbkX =
        json.containsKey('surf_fdbk_x') ? json['surf_fdbk_x'] as double : 0;
    val.surfFdbkY =
        json.containsKey('surf_fdbk_y') ? json['surf_fdbk_y'] as double : 0;
    val.surfFdbkZ =
        json.containsKey('surf_fdbk_z') ? json['surf_fdbk_z'] as double : 0;
    val.surfUnknX =
        json.containsKey('surf_unkn_x') ? json['surf_unkn_x'] as double : 0;
    val.surfUnknY =
        json.containsKey('surf_unkn_y') ? json['surf_unkn_y'] as double : 0;
    val.surfUnknZ =
        json.containsKey('surf_unkn_z') ? json['surf_unkn_z'] as double : 0;
    val.ssX = json.containsKey('ss_x') ? json['ss_x'] as double : 0;
    val.ssY = json.containsKey('ss_y') ? json['ss_y'] as double : 0;
    val.ssZ = json.containsKey('ss_z') ? json['ss_z'] as double : 0;
    var relState = <RelativeState>[];
    if (json.containsKey('rel_state') && json['rel_state'] != null) {
      var listJson = json['rel_state'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as RelativeState?;
          if (m != null) relState.add(m);
        }
      }
    }
    val.relState = relState;

    return val.build() as _$FormationMonitor;
  }

  _$FormationMonitor._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.axCmd,
      required this.ayCmd,
      required this.azCmd,
      required this.axDes,
      required this.ayDes,
      required this.azDes,
      required this.virtErrX,
      required this.virtErrY,
      required this.virtErrZ,
      required this.surfFdbkX,
      required this.surfFdbkY,
      required this.surfFdbkZ,
      required this.surfUnknX,
      required this.surfUnknY,
      required this.surfUnknZ,
      required this.ssX,
      required this.ssY,
      required this.ssZ,
      required this.relState})
      : super._();

  @override
  FormationMonitor rebuild(void Function(FormationMonitorBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  FormationMonitorBuilder toBuilder() =>
      FormationMonitorBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is FormationMonitor &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (axCmd == other.axCmd || axCmd - other.axCmd <= 1E-7) &&
        (ayCmd == other.ayCmd || ayCmd - other.ayCmd <= 1E-7) &&
        (azCmd == other.azCmd || azCmd - other.azCmd <= 1E-7) &&
        (axDes == other.axDes || axDes - other.axDes <= 1E-7) &&
        (ayDes == other.ayDes || ayDes - other.ayDes <= 1E-7) &&
        (azDes == other.azDes || azDes - other.azDes <= 1E-7) &&
        (virtErrX == other.virtErrX || virtErrX - other.virtErrX <= 1E-7) &&
        (virtErrY == other.virtErrY || virtErrY - other.virtErrY <= 1E-7) &&
        (virtErrZ == other.virtErrZ || virtErrZ - other.virtErrZ <= 1E-7) &&
        (surfFdbkX == other.surfFdbkX || surfFdbkX - other.surfFdbkX <= 1E-7) &&
        (surfFdbkY == other.surfFdbkY || surfFdbkY - other.surfFdbkY <= 1E-7) &&
        (surfFdbkZ == other.surfFdbkZ || surfFdbkZ - other.surfFdbkZ <= 1E-7) &&
        (surfUnknX == other.surfUnknX || surfUnknX - other.surfUnknX <= 1E-7) &&
        (surfUnknY == other.surfUnknY || surfUnknY - other.surfUnknY <= 1E-7) &&
        (surfUnknZ == other.surfUnknZ || surfUnknZ - other.surfUnknZ <= 1E-7) &&
        (ssX == other.ssX || ssX - other.ssX <= 1E-7) &&
        (ssY == other.ssY || ssY - other.ssY <= 1E-7) &&
        (ssZ == other.ssZ || ssZ - other.ssZ <= 1E-7) &&
        DeepCollectionEquality().equals(relState, other.relState);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc($jc($jc($jc($jc(0, timestamp?.hashCode ?? null.hashCode), src.hashCode), srcEnt.hashCode), dst.hashCode), dstEnt.hashCode),
                                                                                axCmd.hashCode),
                                                                            ayCmd.hashCode),
                                                                        azCmd.hashCode),
                                                                    axDes.hashCode),
                                                                ayDes.hashCode),
                                                            azDes.hashCode),
                                                        virtErrX.hashCode),
                                                    virtErrY.hashCode),
                                                virtErrZ.hashCode),
                                            surfFdbkX.hashCode),
                                        surfFdbkY.hashCode),
                                    surfFdbkZ.hashCode),
                                surfUnknX.hashCode),
                            surfUnknY.hashCode),
                        surfUnknZ.hashCode),
                    ssX.hashCode),
                ssY.hashCode),
            ssZ.hashCode),
        relState.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('FormationMonitor')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('axCmd', '$axCmd')
          ..add('ayCmd', '$ayCmd')
          ..add('azCmd', '$azCmd')
          ..add('axDes', '$axDes')
          ..add('ayDes', '$ayDes')
          ..add('azDes', '$azDes')
          ..add('virtErrX', '$virtErrX')
          ..add('virtErrY', '$virtErrY')
          ..add('virtErrZ', '$virtErrZ')
          ..add('surfFdbkX', '$surfFdbkX')
          ..add('surfFdbkY', '$surfFdbkY')
          ..add('surfFdbkZ', '$surfFdbkZ')
          ..add('surfUnknX', '$surfUnknX')
          ..add('surfUnknY', '$surfUnknY')
          ..add('surfUnknZ', '$surfUnknZ')
          ..add('ssX', '$ssX')
          ..add('ssY', '$ssY')
          ..add('ssZ', '$ssZ')
          ..add('relState', '$relState'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'FormationMonitor',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'ax_cmd': axCmd,
        'ay_cmd': ayCmd,
        'az_cmd': azCmd,
        'ax_des': axDes,
        'ay_des': ayDes,
        'az_des': azDes,
        'virt_err_x': virtErrX,
        'virt_err_y': virtErrY,
        'virt_err_z': virtErrZ,
        'surf_fdbk_x': surfFdbkX,
        'surf_fdbk_y': surfFdbkY,
        'surf_fdbk_z': surfFdbkZ,
        'surf_unkn_x': surfUnknX,
        'surf_unkn_y': surfUnknY,
        'surf_unkn_z': surfUnknZ,
        'ss_x': ssX,
        'ss_y': ssY,
        'ss_z': ssZ,
        'rel_state': [
          ...relState.map((m) => m.toJson(false)),
        ],
      };
}

/// Formation Monitoring Data builder class
///
class FormationMonitorBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<FormationMonitor, FormationMonitorBuilder> {
  _$FormationMonitor? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _axCmd = 0;
  double get axCmd => _$this._axCmd;
  set axCmd(double axCmd) => _$this._axCmd = axCmd;

  double _ayCmd = 0;
  double get ayCmd => _$this._ayCmd;
  set ayCmd(double ayCmd) => _$this._ayCmd = ayCmd;

  double _azCmd = 0;
  double get azCmd => _$this._azCmd;
  set azCmd(double azCmd) => _$this._azCmd = azCmd;

  double _axDes = 0;
  double get axDes => _$this._axDes;
  set axDes(double axDes) => _$this._axDes = axDes;

  double _ayDes = 0;
  double get ayDes => _$this._ayDes;
  set ayDes(double ayDes) => _$this._ayDes = ayDes;

  double _azDes = 0;
  double get azDes => _$this._azDes;
  set azDes(double azDes) => _$this._azDes = azDes;

  double _virtErrX = 0;
  double get virtErrX => _$this._virtErrX;
  set virtErrX(double virtErrX) => _$this._virtErrX = virtErrX;

  double _virtErrY = 0;
  double get virtErrY => _$this._virtErrY;
  set virtErrY(double virtErrY) => _$this._virtErrY = virtErrY;

  double _virtErrZ = 0;
  double get virtErrZ => _$this._virtErrZ;
  set virtErrZ(double virtErrZ) => _$this._virtErrZ = virtErrZ;

  double _surfFdbkX = 0;
  double get surfFdbkX => _$this._surfFdbkX;
  set surfFdbkX(double surfFdbkX) => _$this._surfFdbkX = surfFdbkX;

  double _surfFdbkY = 0;
  double get surfFdbkY => _$this._surfFdbkY;
  set surfFdbkY(double surfFdbkY) => _$this._surfFdbkY = surfFdbkY;

  double _surfFdbkZ = 0;
  double get surfFdbkZ => _$this._surfFdbkZ;
  set surfFdbkZ(double surfFdbkZ) => _$this._surfFdbkZ = surfFdbkZ;

  double _surfUnknX = 0;
  double get surfUnknX => _$this._surfUnknX;
  set surfUnknX(double surfUnknX) => _$this._surfUnknX = surfUnknX;

  double _surfUnknY = 0;
  double get surfUnknY => _$this._surfUnknY;
  set surfUnknY(double surfUnknY) => _$this._surfUnknY = surfUnknY;

  double _surfUnknZ = 0;
  double get surfUnknZ => _$this._surfUnknZ;
  set surfUnknZ(double surfUnknZ) => _$this._surfUnknZ = surfUnknZ;

  double _ssX = 0;
  double get ssX => _$this._ssX;
  set ssX(double ssX) => _$this._ssX = ssX;

  double _ssY = 0;
  double get ssY => _$this._ssY;
  set ssY(double ssY) => _$this._ssY = ssY;

  double _ssZ = 0;
  double get ssZ => _$this._ssZ;
  set ssZ(double ssZ) => _$this._ssZ = ssZ;

  List<RelativeState> _relState = <RelativeState>[];
  List<RelativeState> get relState => _$this._relState;
  set relState(List<RelativeState> relState) => _$this._relState = relState;

  FormationMonitorBuilder();

  FormationMonitorBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  FormationMonitorBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$FormationMonitor.fromJson(json);
    replace(v);
  }

  @override
  FormationMonitorBuilder fromJson(core.Map<String, dynamic> json) =>
      FormationMonitorBuilder.fromJson(json);

  @override
  FormationMonitorBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      FormationMonitorBuilder()..copyFromHeader(headerFrom);

  FormationMonitorBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _axCmd = _$v!.axCmd;
      _ayCmd = _$v!.ayCmd;
      _azCmd = _$v!.azCmd;
      _axDes = _$v!.axDes;
      _ayDes = _$v!.ayDes;
      _azDes = _$v!.azDes;
      _virtErrX = _$v!.virtErrX;
      _virtErrY = _$v!.virtErrY;
      _virtErrZ = _$v!.virtErrZ;
      _surfFdbkX = _$v!.surfFdbkX;
      _surfFdbkY = _$v!.surfFdbkY;
      _surfFdbkZ = _$v!.surfFdbkZ;
      _surfUnknX = _$v!.surfUnknX;
      _surfUnknY = _$v!.surfUnknY;
      _surfUnknZ = _$v!.surfUnknZ;
      _ssX = _$v!.ssX;
      _ssY = _$v!.ssY;
      _ssZ = _$v!.ssZ;
      _relState = _$v!.relState;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(FormationMonitor other) {
    _$v = other as _$FormationMonitor;
  }

  @override
  void update(void Function(FormationMonitorBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  FormationMonitor build() {
    final result = _$v ??
        _$FormationMonitor._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            axCmd: axCmd,
            ayCmd: ayCmd,
            azCmd: azCmd,
            axDes: axDes,
            ayDes: ayDes,
            azDes: azDes,
            virtErrX: virtErrX,
            virtErrY: virtErrY,
            virtErrZ: virtErrZ,
            surfFdbkX: surfFdbkX,
            surfFdbkY: surfFdbkY,
            surfFdbkZ: surfFdbkZ,
            surfUnknX: surfUnknX,
            surfUnknY: surfUnknY,
            surfUnknZ: surfUnknZ,
            ssX: ssX,
            ssY: ssY,
            ssZ: ssZ,
            relState: relState);
    replace(result);
    return result;
  }
}

/// Relative State immutable class
///
class _$RelativeState extends RelativeState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String sId;
  @override
  final double dist;
  @override
  final double err;
  @override
  final double ctrlImp;
  @override
  final double relDirX;
  @override
  final double relDirY;
  @override
  final double relDirZ;
  @override
  final double errX;
  @override
  final double errY;
  @override
  final double errZ;
  @override
  final double rfErrX;
  @override
  final double rfErrY;
  @override
  final double rfErrZ;
  @override
  final double rfErrVx;
  @override
  final double rfErrVy;
  @override
  final double rfErrVz;
  @override
  final double ssX;
  @override
  final double ssY;
  @override
  final double ssZ;
  @override
  final double virtErrX;
  @override
  final double virtErrY;
  @override
  final double virtErrZ;

  factory _$RelativeState([void Function(RelativeStateBuilder b)? updates]) =>
      (RelativeStateBuilder()..update(updates)).build() as _$RelativeState;

  factory _$RelativeState.fromJson(core.Map<String, dynamic> json) {
    var val = RelativeStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.sId = json.containsKey('s_id') && json['s_id'] != null
        ? json['s_id'] as String
        : '';
    val.dist = json.containsKey('dist') ? json['dist'] as double : 0;
    val.err = json.containsKey('err') ? json['err'] as double : 0;
    val.ctrlImp = json.containsKey('ctrl_imp') ? json['ctrl_imp'] as double : 0;
    val.relDirX =
        json.containsKey('rel_dir_x') ? json['rel_dir_x'] as double : 0;
    val.relDirY =
        json.containsKey('rel_dir_y') ? json['rel_dir_y'] as double : 0;
    val.relDirZ =
        json.containsKey('rel_dir_z') ? json['rel_dir_z'] as double : 0;
    val.errX = json.containsKey('err_x') ? json['err_x'] as double : 0;
    val.errY = json.containsKey('err_y') ? json['err_y'] as double : 0;
    val.errZ = json.containsKey('err_z') ? json['err_z'] as double : 0;
    val.rfErrX = json.containsKey('rf_err_x') ? json['rf_err_x'] as double : 0;
    val.rfErrY = json.containsKey('rf_err_y') ? json['rf_err_y'] as double : 0;
    val.rfErrZ = json.containsKey('rf_err_z') ? json['rf_err_z'] as double : 0;
    val.rfErrVx =
        json.containsKey('rf_err_vx') ? json['rf_err_vx'] as double : 0;
    val.rfErrVy =
        json.containsKey('rf_err_vy') ? json['rf_err_vy'] as double : 0;
    val.rfErrVz =
        json.containsKey('rf_err_vz') ? json['rf_err_vz'] as double : 0;
    val.ssX = json.containsKey('ss_x') ? json['ss_x'] as double : 0;
    val.ssY = json.containsKey('ss_y') ? json['ss_y'] as double : 0;
    val.ssZ = json.containsKey('ss_z') ? json['ss_z'] as double : 0;
    val.virtErrX =
        json.containsKey('virt_err_x') ? json['virt_err_x'] as double : 0;
    val.virtErrY =
        json.containsKey('virt_err_y') ? json['virt_err_y'] as double : 0;
    val.virtErrZ =
        json.containsKey('virt_err_z') ? json['virt_err_z'] as double : 0;

    return val.build() as _$RelativeState;
  }

  _$RelativeState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.sId,
      required this.dist,
      required this.err,
      required this.ctrlImp,
      required this.relDirX,
      required this.relDirY,
      required this.relDirZ,
      required this.errX,
      required this.errY,
      required this.errZ,
      required this.rfErrX,
      required this.rfErrY,
      required this.rfErrZ,
      required this.rfErrVx,
      required this.rfErrVy,
      required this.rfErrVz,
      required this.ssX,
      required this.ssY,
      required this.ssZ,
      required this.virtErrX,
      required this.virtErrY,
      required this.virtErrZ})
      : super._();

  @override
  RelativeState rebuild(void Function(RelativeStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  RelativeStateBuilder toBuilder() => RelativeStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is RelativeState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        sId == other.sId &&
        (dist == other.dist || dist - other.dist <= 1E-7) &&
        (err == other.err || err - other.err <= 1E-7) &&
        (ctrlImp == other.ctrlImp || ctrlImp - other.ctrlImp <= 1E-7) &&
        (relDirX == other.relDirX || relDirX - other.relDirX <= 1E-7) &&
        (relDirY == other.relDirY || relDirY - other.relDirY <= 1E-7) &&
        (relDirZ == other.relDirZ || relDirZ - other.relDirZ <= 1E-7) &&
        (errX == other.errX || errX - other.errX <= 1E-7) &&
        (errY == other.errY || errY - other.errY <= 1E-7) &&
        (errZ == other.errZ || errZ - other.errZ <= 1E-7) &&
        (rfErrX == other.rfErrX || rfErrX - other.rfErrX <= 1E-7) &&
        (rfErrY == other.rfErrY || rfErrY - other.rfErrY <= 1E-7) &&
        (rfErrZ == other.rfErrZ || rfErrZ - other.rfErrZ <= 1E-7) &&
        (rfErrVx == other.rfErrVx || rfErrVx - other.rfErrVx <= 1E-7) &&
        (rfErrVy == other.rfErrVy || rfErrVy - other.rfErrVy <= 1E-7) &&
        (rfErrVz == other.rfErrVz || rfErrVz - other.rfErrVz <= 1E-7) &&
        (ssX == other.ssX || ssX - other.ssX <= 1E-7) &&
        (ssY == other.ssY || ssY - other.ssY <= 1E-7) &&
        (ssZ == other.ssZ || ssZ - other.ssZ <= 1E-7) &&
        (virtErrX == other.virtErrX || virtErrX - other.virtErrX <= 1E-7) &&
        (virtErrY == other.virtErrY || virtErrY - other.virtErrY <= 1E-7) &&
        (virtErrZ == other.virtErrZ || virtErrZ - other.virtErrZ <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc($jc($jc($jc($jc($jc($jc($jc(0, timestamp?.hashCode ?? null.hashCode), src.hashCode), srcEnt.hashCode), dst.hashCode), dstEnt.hashCode), sId.hashCode), dist.hashCode), err.hashCode),
                                                                                ctrlImp.hashCode),
                                                                            relDirX.hashCode),
                                                                        relDirY.hashCode),
                                                                    relDirZ.hashCode),
                                                                errX.hashCode),
                                                            errY.hashCode),
                                                        errZ.hashCode),
                                                    rfErrX.hashCode),
                                                rfErrY.hashCode),
                                            rfErrZ.hashCode),
                                        rfErrVx.hashCode),
                                    rfErrVy.hashCode),
                                rfErrVz.hashCode),
                            ssX.hashCode),
                        ssY.hashCode),
                    ssZ.hashCode),
                virtErrX.hashCode),
            virtErrY.hashCode),
        virtErrZ.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('RelativeState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('sId', sId)
          ..add('dist', '$dist')
          ..add('err', '$err')
          ..add('ctrlImp', '$ctrlImp')
          ..add('relDirX', '$relDirX')
          ..add('relDirY', '$relDirY')
          ..add('relDirZ', '$relDirZ')
          ..add('errX', '$errX')
          ..add('errY', '$errY')
          ..add('errZ', '$errZ')
          ..add('rfErrX', '$rfErrX')
          ..add('rfErrY', '$rfErrY')
          ..add('rfErrZ', '$rfErrZ')
          ..add('rfErrVx', '$rfErrVx')
          ..add('rfErrVy', '$rfErrVy')
          ..add('rfErrVz', '$rfErrVz')
          ..add('ssX', '$ssX')
          ..add('ssY', '$ssY')
          ..add('ssZ', '$ssZ')
          ..add('virtErrX', '$virtErrX')
          ..add('virtErrY', '$virtErrY')
          ..add('virtErrZ', '$virtErrZ'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'RelativeState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        's_id': sId,
        'dist': dist,
        'err': err,
        'ctrl_imp': ctrlImp,
        'rel_dir_x': relDirX,
        'rel_dir_y': relDirY,
        'rel_dir_z': relDirZ,
        'err_x': errX,
        'err_y': errY,
        'err_z': errZ,
        'rf_err_x': rfErrX,
        'rf_err_y': rfErrY,
        'rf_err_z': rfErrZ,
        'rf_err_vx': rfErrVx,
        'rf_err_vy': rfErrVy,
        'rf_err_vz': rfErrVz,
        'ss_x': ssX,
        'ss_y': ssY,
        'ss_z': ssZ,
        'virt_err_x': virtErrX,
        'virt_err_y': virtErrY,
        'virt_err_z': virtErrZ,
      };
}

/// Relative State builder class
///
class RelativeStateBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<RelativeState, RelativeStateBuilder> {
  _$RelativeState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _sId = '';
  String get sId => _$this._sId;
  set sId(String sId) => _$this._sId = sId;

  double _dist = 0;
  double get dist => _$this._dist;
  set dist(double dist) => _$this._dist = dist;

  double _err = 0;
  double get err => _$this._err;
  set err(double err) => _$this._err = err;

  double _ctrlImp = 0;
  double get ctrlImp => _$this._ctrlImp;
  set ctrlImp(double ctrlImp) => _$this._ctrlImp = ctrlImp;

  double _relDirX = 0;
  double get relDirX => _$this._relDirX;
  set relDirX(double relDirX) => _$this._relDirX = relDirX;

  double _relDirY = 0;
  double get relDirY => _$this._relDirY;
  set relDirY(double relDirY) => _$this._relDirY = relDirY;

  double _relDirZ = 0;
  double get relDirZ => _$this._relDirZ;
  set relDirZ(double relDirZ) => _$this._relDirZ = relDirZ;

  double _errX = 0;
  double get errX => _$this._errX;
  set errX(double errX) => _$this._errX = errX;

  double _errY = 0;
  double get errY => _$this._errY;
  set errY(double errY) => _$this._errY = errY;

  double _errZ = 0;
  double get errZ => _$this._errZ;
  set errZ(double errZ) => _$this._errZ = errZ;

  double _rfErrX = 0;
  double get rfErrX => _$this._rfErrX;
  set rfErrX(double rfErrX) => _$this._rfErrX = rfErrX;

  double _rfErrY = 0;
  double get rfErrY => _$this._rfErrY;
  set rfErrY(double rfErrY) => _$this._rfErrY = rfErrY;

  double _rfErrZ = 0;
  double get rfErrZ => _$this._rfErrZ;
  set rfErrZ(double rfErrZ) => _$this._rfErrZ = rfErrZ;

  double _rfErrVx = 0;
  double get rfErrVx => _$this._rfErrVx;
  set rfErrVx(double rfErrVx) => _$this._rfErrVx = rfErrVx;

  double _rfErrVy = 0;
  double get rfErrVy => _$this._rfErrVy;
  set rfErrVy(double rfErrVy) => _$this._rfErrVy = rfErrVy;

  double _rfErrVz = 0;
  double get rfErrVz => _$this._rfErrVz;
  set rfErrVz(double rfErrVz) => _$this._rfErrVz = rfErrVz;

  double _ssX = 0;
  double get ssX => _$this._ssX;
  set ssX(double ssX) => _$this._ssX = ssX;

  double _ssY = 0;
  double get ssY => _$this._ssY;
  set ssY(double ssY) => _$this._ssY = ssY;

  double _ssZ = 0;
  double get ssZ => _$this._ssZ;
  set ssZ(double ssZ) => _$this._ssZ = ssZ;

  double _virtErrX = 0;
  double get virtErrX => _$this._virtErrX;
  set virtErrX(double virtErrX) => _$this._virtErrX = virtErrX;

  double _virtErrY = 0;
  double get virtErrY => _$this._virtErrY;
  set virtErrY(double virtErrY) => _$this._virtErrY = virtErrY;

  double _virtErrZ = 0;
  double get virtErrZ => _$this._virtErrZ;
  set virtErrZ(double virtErrZ) => _$this._virtErrZ = virtErrZ;

  RelativeStateBuilder();

  RelativeStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  RelativeStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$RelativeState.fromJson(json);
    replace(v);
  }

  @override
  RelativeStateBuilder fromJson(core.Map<String, dynamic> json) =>
      RelativeStateBuilder.fromJson(json);

  @override
  RelativeStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      RelativeStateBuilder()..copyFromHeader(headerFrom);

  RelativeStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _sId = _$v!.sId;
      _dist = _$v!.dist;
      _err = _$v!.err;
      _ctrlImp = _$v!.ctrlImp;
      _relDirX = _$v!.relDirX;
      _relDirY = _$v!.relDirY;
      _relDirZ = _$v!.relDirZ;
      _errX = _$v!.errX;
      _errY = _$v!.errY;
      _errZ = _$v!.errZ;
      _rfErrX = _$v!.rfErrX;
      _rfErrY = _$v!.rfErrY;
      _rfErrZ = _$v!.rfErrZ;
      _rfErrVx = _$v!.rfErrVx;
      _rfErrVy = _$v!.rfErrVy;
      _rfErrVz = _$v!.rfErrVz;
      _ssX = _$v!.ssX;
      _ssY = _$v!.ssY;
      _ssZ = _$v!.ssZ;
      _virtErrX = _$v!.virtErrX;
      _virtErrY = _$v!.virtErrY;
      _virtErrZ = _$v!.virtErrZ;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(RelativeState other) {
    _$v = other as _$RelativeState;
  }

  @override
  void update(void Function(RelativeStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  RelativeState build() {
    final result = _$v ??
        _$RelativeState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            sId: sId,
            dist: dist,
            err: err,
            ctrlImp: ctrlImp,
            relDirX: relDirX,
            relDirY: relDirY,
            relDirZ: relDirZ,
            errX: errX,
            errY: errY,
            errZ: errZ,
            rfErrX: rfErrX,
            rfErrY: rfErrY,
            rfErrZ: rfErrZ,
            rfErrVx: rfErrVx,
            rfErrVy: rfErrVy,
            rfErrVz: rfErrVz,
            ssX: ssX,
            ssY: ssY,
            ssZ: ssZ,
            virtErrX: virtErrX,
            virtErrY: virtErrY,
            virtErrZ: virtErrZ);
    replace(result);
    return result;
  }
}

/// Dislodge Maneuver immutable class
///
class _$Dislodge extends Dislodge {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int timeout;
  @override
  final double rpm;
  @override
  final DislodgeEnumDirection direction;
  @override
  final String custom;

  factory _$Dislodge([void Function(DislodgeBuilder b)? updates]) =>
      (DislodgeBuilder()..update(updates)).build() as _$Dislodge;

  factory _$Dislodge.fromJson(core.Map<String, dynamic> json) {
    var val = DislodgeBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.timeout = json.containsKey('timeout') ? json['timeout'] as int : 0;
    val.rpm = json.containsKey('rpm') ? json['rpm'] as double : 0;
    val.direction = json.containsKey('direction') && json['direction'] != null
        ? DislodgeEnumDirection(json['direction'] as int)
        : DislodgeEnumDirection(0);
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$Dislodge;
  }

  _$Dislodge._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.timeout,
      required this.rpm,
      required this.direction,
      required this.custom})
      : super._();

  @override
  Dislodge rebuild(void Function(DislodgeBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DislodgeBuilder toBuilder() => DislodgeBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Dislodge &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        timeout == other.timeout &&
        (rpm == other.rpm || rpm - other.rpm <= 1E-7) &&
        direction == other.direction &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    timeout.hashCode),
                rpm.hashCode),
            direction.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Dislodge')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('timeout', '$timeout (s)')
          ..add('rpm', '$rpm')
          ..add('direction',
              '$direction (Enumerated) [${direction.toPrettyString()}]')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Dislodge',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'timeout': timeout,
        'rpm': rpm,
        'direction': direction.value,
        'custom': custom,
      };
}

/// Dislodge Maneuver builder class
///
class DislodgeBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Dislodge, DislodgeBuilder> {
  _$Dislodge? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _timeout = 0;
  int get timeout => _$this._timeout;
  set timeout(int timeout) => _$this._timeout = timeout;

  double _rpm = 0;
  double get rpm => _$this._rpm;
  set rpm(double rpm) => _$this._rpm = rpm;

  DislodgeEnumDirection _direction = DislodgeEnumDirection(0);
  DislodgeEnumDirection get direction => _$this._direction;
  set direction(DislodgeEnumDirection direction) =>
      _$this._direction = direction;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  DislodgeBuilder();

  DislodgeBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DislodgeBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Dislodge.fromJson(json);
    replace(v);
  }

  @override
  DislodgeBuilder fromJson(core.Map<String, dynamic> json) =>
      DislodgeBuilder.fromJson(json);

  @override
  DislodgeBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      DislodgeBuilder()..copyFromHeader(headerFrom);

  DislodgeBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _timeout = _$v!.timeout;
      _rpm = _$v!.rpm;
      _direction = _$v!.direction;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Dislodge other) {
    _$v = other as _$Dislodge;
  }

  @override
  void update(void Function(DislodgeBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Dislodge build() {
    final result = _$v ??
        _$Dislodge._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            timeout: timeout,
            rpm: rpm,
            direction: direction,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Formation immutable class
///
class _$Formation extends Formation {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String formationName;
  @override
  final FormationEnumType type;
  @override
  final FormationEnumOp op;
  @override
  final String groupName;
  @override
  final String planId;
  @override
  final String description;
  @override
  final FormationEnumReferenceFrame referenceFrame;
  @override
  final List<VehicleFormationParticipant> participants;
  @override
  final double leaderBankLim;
  @override
  final double leaderSpeedMin;
  @override
  final double leaderSpeedMax;
  @override
  final double leaderAltMin;
  @override
  final double leaderAltMax;
  @override
  final double posSimErrLim;
  @override
  final double posSimErrWrn;
  @override
  final int posSimErrTimeout;
  @override
  final double convergMax;
  @override
  final int convergTimeout;
  @override
  final int commsTimeout;
  @override
  final double turbLim;
  @override
  final String custom;

  factory _$Formation([void Function(FormationBuilder b)? updates]) =>
      (FormationBuilder()..update(updates)).build() as _$Formation;

  factory _$Formation.fromJson(core.Map<String, dynamic> json) {
    var val = FormationBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.formationName =
        json.containsKey('formation_name') && json['formation_name'] != null
            ? json['formation_name'] as String
            : '';
    val.type = json.containsKey('type') && json['type'] != null
        ? FormationEnumType(json['type'] as int)
        : FormationEnumType(0);
    val.op = json.containsKey('op') && json['op'] != null
        ? FormationEnumOp(json['op'] as int)
        : FormationEnumOp(0);
    val.groupName = json.containsKey('group_name') && json['group_name'] != null
        ? json['group_name'] as String
        : '';
    val.planId = json.containsKey('plan_id') && json['plan_id'] != null
        ? json['plan_id'] as String
        : '';
    val.description =
        json.containsKey('description') && json['description'] != null
            ? json['description'] as String
            : '';
    val.referenceFrame =
        json.containsKey('reference_frame') && json['reference_frame'] != null
            ? FormationEnumReferenceFrame(json['reference_frame'] as int)
            : FormationEnumReferenceFrame(0);
    var participants = <VehicleFormationParticipant>[];
    if (json.containsKey('participants') && json['participants'] != null) {
      var listJson = json['participants'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as VehicleFormationParticipant?;
          if (m != null) participants.add(m);
        }
      }
    }
    val.participants = participants;
    val.leaderBankLim = json.containsKey('leader_bank_lim')
        ? json['leader_bank_lim'] as double
        : 0;
    val.leaderSpeedMin = json.containsKey('leader_speed_min')
        ? json['leader_speed_min'] as double
        : 0;
    val.leaderSpeedMax = json.containsKey('leader_speed_max')
        ? json['leader_speed_max'] as double
        : 0;
    val.leaderAltMin = json.containsKey('leader_alt_min')
        ? json['leader_alt_min'] as double
        : 0;
    val.leaderAltMax = json.containsKey('leader_alt_max')
        ? json['leader_alt_max'] as double
        : 0;
    val.posSimErrLim = json.containsKey('pos_sim_err_lim')
        ? json['pos_sim_err_lim'] as double
        : 0;
    val.posSimErrWrn = json.containsKey('pos_sim_err_wrn')
        ? json['pos_sim_err_wrn'] as double
        : 0;
    val.posSimErrTimeout = json.containsKey('pos_sim_err_timeout')
        ? json['pos_sim_err_timeout'] as int
        : 0;
    val.convergMax =
        json.containsKey('converg_max') ? json['converg_max'] as double : 0;
    val.convergTimeout = json.containsKey('converg_timeout')
        ? json['converg_timeout'] as int
        : 0;
    val.commsTimeout =
        json.containsKey('comms_timeout') ? json['comms_timeout'] as int : 0;
    val.turbLim = json.containsKey('turb_lim') ? json['turb_lim'] as double : 0;
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$Formation;
  }

  _$Formation._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.formationName,
      required this.type,
      required this.op,
      required this.groupName,
      required this.planId,
      required this.description,
      required this.referenceFrame,
      required this.participants,
      required this.leaderBankLim,
      required this.leaderSpeedMin,
      required this.leaderSpeedMax,
      required this.leaderAltMin,
      required this.leaderAltMax,
      required this.posSimErrLim,
      required this.posSimErrWrn,
      required this.posSimErrTimeout,
      required this.convergMax,
      required this.convergTimeout,
      required this.commsTimeout,
      required this.turbLim,
      required this.custom})
      : super._();

  @override
  Formation rebuild(void Function(FormationBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  FormationBuilder toBuilder() => FormationBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Formation &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        formationName == other.formationName &&
        type == other.type &&
        op == other.op &&
        groupName == other.groupName &&
        planId == other.planId &&
        description == other.description &&
        referenceFrame == other.referenceFrame &&
        DeepCollectionEquality().equals(participants, other.participants) &&
        (leaderBankLim == other.leaderBankLim ||
            leaderBankLim - other.leaderBankLim <= 1E-7) &&
        (leaderSpeedMin == other.leaderSpeedMin ||
            leaderSpeedMin - other.leaderSpeedMin <= 1E-7) &&
        (leaderSpeedMax == other.leaderSpeedMax ||
            leaderSpeedMax - other.leaderSpeedMax <= 1E-7) &&
        (leaderAltMin == other.leaderAltMin ||
            leaderAltMin - other.leaderAltMin <= 1E-7) &&
        (leaderAltMax == other.leaderAltMax ||
            leaderAltMax - other.leaderAltMax <= 1E-7) &&
        (posSimErrLim == other.posSimErrLim ||
            posSimErrLim - other.posSimErrLim <= 1E-7) &&
        (posSimErrWrn == other.posSimErrWrn ||
            posSimErrWrn - other.posSimErrWrn <= 1E-7) &&
        posSimErrTimeout == other.posSimErrTimeout &&
        (convergMax == other.convergMax ||
            convergMax - other.convergMax <= 1E-7) &&
        convergTimeout == other.convergTimeout &&
        commsTimeout == other.commsTimeout &&
        (turbLim == other.turbLim || turbLim - other.turbLim <= 1E-7) &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc($jc($jc($jc($jc($jc($jc(0, timestamp?.hashCode ?? null.hashCode), src.hashCode), srcEnt.hashCode), dst.hashCode), dstEnt.hashCode), formationName.hashCode), type.hashCode),
                                                                                op.hashCode),
                                                                            groupName.hashCode),
                                                                        planId.hashCode),
                                                                    description.hashCode),
                                                                referenceFrame.hashCode),
                                                            participants.hashCode),
                                                        leaderBankLim.hashCode),
                                                    leaderSpeedMin.hashCode),
                                                leaderSpeedMax.hashCode),
                                            leaderAltMin.hashCode),
                                        leaderAltMax.hashCode),
                                    posSimErrLim.hashCode),
                                posSimErrWrn.hashCode),
                            posSimErrTimeout.hashCode),
                        convergMax.hashCode),
                    convergTimeout.hashCode),
                commsTimeout.hashCode),
            turbLim.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Formation')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('formationName', formationName)
          ..add('type', '$type (Enumerated) [${type.toPrettyString()}]')
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]')
          ..add('groupName', groupName)
          ..add('planId', planId)
          ..add('description', description)
          ..add('referenceFrame',
              '$referenceFrame (Enumerated) [${referenceFrame.toPrettyString()}]')
          ..add('participants', '$participants')
          ..add('leaderBankLim',
              '$leaderBankLim (rad) [${leaderBankLim * 180.0 / math.pi} (deg)]')
          ..add('leaderSpeedMin', '$leaderSpeedMin (m/s)')
          ..add('leaderSpeedMax', '$leaderSpeedMax (m/s)')
          ..add('leaderAltMin', '$leaderAltMin (m)')
          ..add('leaderAltMax', '$leaderAltMax (m)')
          ..add('posSimErrLim', '$posSimErrLim (m)')
          ..add('posSimErrWrn', '$posSimErrWrn (m)')
          ..add('posSimErrTimeout', '$posSimErrTimeout (s)')
          ..add('convergMax', '$convergMax (m)')
          ..add('convergTimeout', '$convergTimeout (s)')
          ..add('commsTimeout', '$commsTimeout (s)')
          ..add('turbLim', '$turbLim (m/s)')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Formation',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'formation_name': formationName,
        'type': type.value,
        'op': op.value,
        'group_name': groupName,
        'plan_id': planId,
        'description': description,
        'reference_frame': referenceFrame.value,
        'participants': [
          ...participants.map((m) => m.toJson(false)),
        ],
        'leader_bank_lim': leaderBankLim,
        'leader_speed_min': leaderSpeedMin,
        'leader_speed_max': leaderSpeedMax,
        'leader_alt_min': leaderAltMin,
        'leader_alt_max': leaderAltMax,
        'pos_sim_err_lim': posSimErrLim,
        'pos_sim_err_wrn': posSimErrWrn,
        'pos_sim_err_timeout': posSimErrTimeout,
        'converg_max': convergMax,
        'converg_timeout': convergTimeout,
        'comms_timeout': commsTimeout,
        'turb_lim': turbLim,
        'custom': custom,
      };
}

/// Formation builder class
///
class FormationBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Formation, FormationBuilder> {
  _$Formation? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _formationName = '';
  String get formationName => _$this._formationName;
  set formationName(String formationName) =>
      _$this._formationName = formationName;

  FormationEnumType _type = FormationEnumType(0);
  FormationEnumType get type => _$this._type;
  set type(FormationEnumType type) => _$this._type = type;

  FormationEnumOp _op = FormationEnumOp(0);
  FormationEnumOp get op => _$this._op;
  set op(FormationEnumOp op) => _$this._op = op;

  String _groupName = '';
  String get groupName => _$this._groupName;
  set groupName(String groupName) => _$this._groupName = groupName;

  String _planId = '';
  String get planId => _$this._planId;
  set planId(String planId) => _$this._planId = planId;

  String _description = '';
  String get description => _$this._description;
  set description(String description) => _$this._description = description;

  FormationEnumReferenceFrame _referenceFrame = FormationEnumReferenceFrame(0);
  FormationEnumReferenceFrame get referenceFrame => _$this._referenceFrame;
  set referenceFrame(FormationEnumReferenceFrame referenceFrame) =>
      _$this._referenceFrame = referenceFrame;

  List<VehicleFormationParticipant> _participants =
      <VehicleFormationParticipant>[];
  List<VehicleFormationParticipant> get participants => _$this._participants;
  set participants(List<VehicleFormationParticipant> participants) =>
      _$this._participants = participants;

  double _leaderBankLim = 0;
  double get leaderBankLim => _$this._leaderBankLim;
  set leaderBankLim(double leaderBankLim) =>
      _$this._leaderBankLim = leaderBankLim;

  double _leaderSpeedMin = 0;
  double get leaderSpeedMin => _$this._leaderSpeedMin;
  set leaderSpeedMin(double leaderSpeedMin) =>
      _$this._leaderSpeedMin = leaderSpeedMin;

  double _leaderSpeedMax = 0;
  double get leaderSpeedMax => _$this._leaderSpeedMax;
  set leaderSpeedMax(double leaderSpeedMax) =>
      _$this._leaderSpeedMax = leaderSpeedMax;

  double _leaderAltMin = 0;
  double get leaderAltMin => _$this._leaderAltMin;
  set leaderAltMin(double leaderAltMin) => _$this._leaderAltMin = leaderAltMin;

  double _leaderAltMax = 0;
  double get leaderAltMax => _$this._leaderAltMax;
  set leaderAltMax(double leaderAltMax) => _$this._leaderAltMax = leaderAltMax;

  double _posSimErrLim = 0;
  double get posSimErrLim => _$this._posSimErrLim;
  set posSimErrLim(double posSimErrLim) => _$this._posSimErrLim = posSimErrLim;

  double _posSimErrWrn = 0;
  double get posSimErrWrn => _$this._posSimErrWrn;
  set posSimErrWrn(double posSimErrWrn) => _$this._posSimErrWrn = posSimErrWrn;

  int _posSimErrTimeout = 0;
  int get posSimErrTimeout => _$this._posSimErrTimeout;
  set posSimErrTimeout(int posSimErrTimeout) =>
      _$this._posSimErrTimeout = posSimErrTimeout;

  double _convergMax = 0;
  double get convergMax => _$this._convergMax;
  set convergMax(double convergMax) => _$this._convergMax = convergMax;

  int _convergTimeout = 0;
  int get convergTimeout => _$this._convergTimeout;
  set convergTimeout(int convergTimeout) =>
      _$this._convergTimeout = convergTimeout;

  int _commsTimeout = 0;
  int get commsTimeout => _$this._commsTimeout;
  set commsTimeout(int commsTimeout) => _$this._commsTimeout = commsTimeout;

  double _turbLim = 0;
  double get turbLim => _$this._turbLim;
  set turbLim(double turbLim) => _$this._turbLim = turbLim;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  FormationBuilder();

  FormationBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  FormationBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Formation.fromJson(json);
    replace(v);
  }

  @override
  FormationBuilder fromJson(core.Map<String, dynamic> json) =>
      FormationBuilder.fromJson(json);

  @override
  FormationBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      FormationBuilder()..copyFromHeader(headerFrom);

  FormationBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _formationName = _$v!.formationName;
      _type = _$v!.type;
      _op = _$v!.op;
      _groupName = _$v!.groupName;
      _planId = _$v!.planId;
      _description = _$v!.description;
      _referenceFrame = _$v!.referenceFrame;
      _participants = _$v!.participants;
      _leaderBankLim = _$v!.leaderBankLim;
      _leaderSpeedMin = _$v!.leaderSpeedMin;
      _leaderSpeedMax = _$v!.leaderSpeedMax;
      _leaderAltMin = _$v!.leaderAltMin;
      _leaderAltMax = _$v!.leaderAltMax;
      _posSimErrLim = _$v!.posSimErrLim;
      _posSimErrWrn = _$v!.posSimErrWrn;
      _posSimErrTimeout = _$v!.posSimErrTimeout;
      _convergMax = _$v!.convergMax;
      _convergTimeout = _$v!.convergTimeout;
      _commsTimeout = _$v!.commsTimeout;
      _turbLim = _$v!.turbLim;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Formation other) {
    _$v = other as _$Formation;
  }

  @override
  void update(void Function(FormationBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Formation build() {
    final result = _$v ??
        _$Formation._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            formationName: formationName,
            type: type,
            op: op,
            groupName: groupName,
            planId: planId,
            description: description,
            referenceFrame: referenceFrame,
            participants: participants,
            leaderBankLim: leaderBankLim,
            leaderSpeedMin: leaderSpeedMin,
            leaderSpeedMax: leaderSpeedMax,
            leaderAltMin: leaderAltMin,
            leaderAltMax: leaderAltMax,
            posSimErrLim: posSimErrLim,
            posSimErrWrn: posSimErrWrn,
            posSimErrTimeout: posSimErrTimeout,
            convergMax: convergMax,
            convergTimeout: convergTimeout,
            commsTimeout: commsTimeout,
            turbLim: turbLim,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Launch Maneuver immutable class
///
class _$Launch extends Launch {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int timeout;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double z;
  @override
  final ZUnitsEnum zUnits;
  @override
  final double speed;
  @override
  final SpeedUnitsEnum speedUnits;
  @override
  final String custom;

  factory _$Launch([void Function(LaunchBuilder b)? updates]) =>
      (LaunchBuilder()..update(updates)).build() as _$Launch;

  factory _$Launch.fromJson(core.Map<String, dynamic> json) {
    var val = LaunchBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.timeout = json.containsKey('timeout') ? json['timeout'] as int : 0;
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.zUnits = json.containsKey('z_units') && json['z_units'] != null
        ? ZUnitsEnum(json['z_units'] as int)
        : ZUnitsEnum(0);
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.speedUnits =
        json.containsKey('speed_units') && json['speed_units'] != null
            ? SpeedUnitsEnum(json['speed_units'] as int)
            : SpeedUnitsEnum(0);
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$Launch;
  }

  _$Launch._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.timeout,
      required this.lat,
      required this.lon,
      required this.z,
      required this.zUnits,
      required this.speed,
      required this.speedUnits,
      required this.custom})
      : super._();

  @override
  Launch rebuild(void Function(LaunchBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  LaunchBuilder toBuilder() => LaunchBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Launch &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        timeout == other.timeout &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        zUnits == other.zUnits &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        speedUnits == other.speedUnits &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        0,
                                                        timestamp?.hashCode ??
                                                            null.hashCode),
                                                    src.hashCode),
                                                srcEnt.hashCode),
                                            dst.hashCode),
                                        dstEnt.hashCode),
                                    timeout.hashCode),
                                lat.hashCode),
                            lon.hashCode),
                        z.hashCode),
                    zUnits.hashCode),
                speed.hashCode),
            speedUnits.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Launch')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('timeout', '$timeout (s)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('z', '$z (m)')
          ..add('zUnits', '$zUnits (Enumerated) [${zUnits.toPrettyString()}]')
          ..add('speed', '$speed')
          ..add('speedUnits',
              '$speedUnits (Enumerated) [${speedUnits.toPrettyString()}]')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Launch',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'timeout': timeout,
        'lat': lat,
        'lon': lon,
        'z': z,
        'z_units': zUnits.value,
        'speed': speed,
        'speed_units': speedUnits.value,
        'custom': custom,
      };
}

/// Launch Maneuver builder class
///
class LaunchBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Launch, LaunchBuilder> {
  _$Launch? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _timeout = 0;
  int get timeout => _$this._timeout;
  set timeout(int timeout) => _$this._timeout = timeout;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  ZUnitsEnum _zUnits = ZUnitsEnum(0);
  ZUnitsEnum get zUnits => _$this._zUnits;
  set zUnits(ZUnitsEnum zUnits) => _$this._zUnits = zUnits;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  SpeedUnitsEnum _speedUnits = SpeedUnitsEnum(0);
  SpeedUnitsEnum get speedUnits => _$this._speedUnits;
  set speedUnits(SpeedUnitsEnum speedUnits) => _$this._speedUnits = speedUnits;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  LaunchBuilder();

  LaunchBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  LaunchBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Launch.fromJson(json);
    replace(v);
  }

  @override
  LaunchBuilder fromJson(core.Map<String, dynamic> json) =>
      LaunchBuilder.fromJson(json);

  @override
  LaunchBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      LaunchBuilder()..copyFromHeader(headerFrom);

  LaunchBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _timeout = _$v!.timeout;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _z = _$v!.z;
      _zUnits = _$v!.zUnits;
      _speed = _$v!.speed;
      _speedUnits = _$v!.speedUnits;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Launch other) {
    _$v = other as _$Launch;
  }

  @override
  void update(void Function(LaunchBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Launch build() {
    final result = _$v ??
        _$Launch._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            timeout: timeout,
            lat: lat,
            lon: lon,
            z: z,
            zUnits: zUnits,
            speed: speed,
            speedUnits: speedUnits,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Drop Maneuver immutable class
///
class _$Drop extends Drop {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int timeout;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double z;
  @override
  final ZUnitsEnum zUnits;
  @override
  final double speed;
  @override
  final SpeedUnitsEnum speedUnits;
  @override
  final String custom;

  factory _$Drop([void Function(DropBuilder b)? updates]) =>
      (DropBuilder()..update(updates)).build() as _$Drop;

  factory _$Drop.fromJson(core.Map<String, dynamic> json) {
    var val = DropBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.timeout = json.containsKey('timeout') ? json['timeout'] as int : 0;
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.zUnits = json.containsKey('z_units') && json['z_units'] != null
        ? ZUnitsEnum(json['z_units'] as int)
        : ZUnitsEnum(0);
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.speedUnits =
        json.containsKey('speed_units') && json['speed_units'] != null
            ? SpeedUnitsEnum(json['speed_units'] as int)
            : SpeedUnitsEnum(0);
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$Drop;
  }

  _$Drop._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.timeout,
      required this.lat,
      required this.lon,
      required this.z,
      required this.zUnits,
      required this.speed,
      required this.speedUnits,
      required this.custom})
      : super._();

  @override
  Drop rebuild(void Function(DropBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DropBuilder toBuilder() => DropBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Drop &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        timeout == other.timeout &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        zUnits == other.zUnits &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        speedUnits == other.speedUnits &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        0,
                                                        timestamp?.hashCode ??
                                                            null.hashCode),
                                                    src.hashCode),
                                                srcEnt.hashCode),
                                            dst.hashCode),
                                        dstEnt.hashCode),
                                    timeout.hashCode),
                                lat.hashCode),
                            lon.hashCode),
                        z.hashCode),
                    zUnits.hashCode),
                speed.hashCode),
            speedUnits.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Drop')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('timeout', '$timeout (s)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('z', '$z (m)')
          ..add('zUnits', '$zUnits (Enumerated) [${zUnits.toPrettyString()}]')
          ..add('speed', '$speed')
          ..add('speedUnits',
              '$speedUnits (Enumerated) [${speedUnits.toPrettyString()}]')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Drop',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'timeout': timeout,
        'lat': lat,
        'lon': lon,
        'z': z,
        'z_units': zUnits.value,
        'speed': speed,
        'speed_units': speedUnits.value,
        'custom': custom,
      };
}

/// Drop Maneuver builder class
///
class DropBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Drop, DropBuilder> {
  _$Drop? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _timeout = 0;
  int get timeout => _$this._timeout;
  set timeout(int timeout) => _$this._timeout = timeout;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  ZUnitsEnum _zUnits = ZUnitsEnum(0);
  ZUnitsEnum get zUnits => _$this._zUnits;
  set zUnits(ZUnitsEnum zUnits) => _$this._zUnits = zUnits;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  SpeedUnitsEnum _speedUnits = SpeedUnitsEnum(0);
  SpeedUnitsEnum get speedUnits => _$this._speedUnits;
  set speedUnits(SpeedUnitsEnum speedUnits) => _$this._speedUnits = speedUnits;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  DropBuilder();

  DropBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DropBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Drop.fromJson(json);
    replace(v);
  }

  @override
  DropBuilder fromJson(core.Map<String, dynamic> json) =>
      DropBuilder.fromJson(json);

  @override
  DropBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      DropBuilder()..copyFromHeader(headerFrom);

  DropBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _timeout = _$v!.timeout;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _z = _$v!.z;
      _zUnits = _$v!.zUnits;
      _speed = _$v!.speed;
      _speedUnits = _$v!.speedUnits;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Drop other) {
    _$v = other as _$Drop;
  }

  @override
  void update(void Function(DropBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Drop build() {
    final result = _$v ??
        _$Drop._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            timeout: timeout,
            lat: lat,
            lon: lon,
            z: z,
            zUnits: zUnits,
            speed: speed,
            speedUnits: speedUnits,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Scheduled Goto immutable class
///
class _$ScheduledGoto extends ScheduledGoto {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double arrivalTime;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double z;
  @override
  final ZUnitsEnum zUnits;
  @override
  final double travelZ;
  @override
  final ZUnitsEnum travelZUnits;
  @override
  final ScheduledGotoEnumDelayed delayed;

  factory _$ScheduledGoto([void Function(ScheduledGotoBuilder b)? updates]) =>
      (ScheduledGotoBuilder()..update(updates)).build() as _$ScheduledGoto;

  factory _$ScheduledGoto.fromJson(core.Map<String, dynamic> json) {
    var val = ScheduledGotoBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.arrivalTime =
        json.containsKey('arrival_time') ? json['arrival_time'] as double : 0;
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.zUnits = json.containsKey('z_units') && json['z_units'] != null
        ? ZUnitsEnum(json['z_units'] as int)
        : ZUnitsEnum(0);
    val.travelZ = json.containsKey('travel_z') ? json['travel_z'] as double : 0;
    val.travelZUnits =
        json.containsKey('travel_z_units') && json['travel_z_units'] != null
            ? ZUnitsEnum(json['travel_z_units'] as int)
            : ZUnitsEnum(0);
    val.delayed = json.containsKey('delayed') && json['delayed'] != null
        ? ScheduledGotoEnumDelayed(json['delayed'] as int)
        : ScheduledGotoEnumDelayed(0);

    return val.build() as _$ScheduledGoto;
  }

  _$ScheduledGoto._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.arrivalTime,
      required this.lat,
      required this.lon,
      required this.z,
      required this.zUnits,
      required this.travelZ,
      required this.travelZUnits,
      required this.delayed})
      : super._();

  @override
  ScheduledGoto rebuild(void Function(ScheduledGotoBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  ScheduledGotoBuilder toBuilder() => ScheduledGotoBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is ScheduledGoto &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (arrivalTime == other.arrivalTime ||
            arrivalTime - other.arrivalTime <= 1E-7) &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        zUnits == other.zUnits &&
        (travelZ == other.travelZ || travelZ - other.travelZ <= 1E-7) &&
        travelZUnits == other.travelZUnits &&
        delayed == other.delayed;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        0,
                                                        timestamp?.hashCode ??
                                                            null.hashCode),
                                                    src.hashCode),
                                                srcEnt.hashCode),
                                            dst.hashCode),
                                        dstEnt.hashCode),
                                    arrivalTime.hashCode),
                                lat.hashCode),
                            lon.hashCode),
                        z.hashCode),
                    zUnits.hashCode),
                travelZ.hashCode),
            travelZUnits.hashCode),
        delayed.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('ScheduledGoto')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('arrivalTime', '$arrivalTime (s)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('z', '$z (m)')
          ..add('zUnits', '$zUnits (Enumerated) [${zUnits.toPrettyString()}]')
          ..add('travelZ', '$travelZ (m)')
          ..add('travelZUnits',
              '$travelZUnits (Enumerated) [${travelZUnits.toPrettyString()}]')
          ..add(
              'delayed', '$delayed (Enumerated) [${delayed.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'ScheduledGoto',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'arrival_time': arrivalTime,
        'lat': lat,
        'lon': lon,
        'z': z,
        'z_units': zUnits.value,
        'travel_z': travelZ,
        'travel_z_units': travelZUnits.value,
        'delayed': delayed.value,
      };
}

/// Scheduled Goto builder class
///
class ScheduledGotoBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<ScheduledGoto, ScheduledGotoBuilder> {
  _$ScheduledGoto? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _arrivalTime = 0;
  double get arrivalTime => _$this._arrivalTime;
  set arrivalTime(double arrivalTime) => _$this._arrivalTime = arrivalTime;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  ZUnitsEnum _zUnits = ZUnitsEnum(0);
  ZUnitsEnum get zUnits => _$this._zUnits;
  set zUnits(ZUnitsEnum zUnits) => _$this._zUnits = zUnits;

  double _travelZ = 0;
  double get travelZ => _$this._travelZ;
  set travelZ(double travelZ) => _$this._travelZ = travelZ;

  ZUnitsEnum _travelZUnits = ZUnitsEnum(0);
  ZUnitsEnum get travelZUnits => _$this._travelZUnits;
  set travelZUnits(ZUnitsEnum travelZUnits) =>
      _$this._travelZUnits = travelZUnits;

  ScheduledGotoEnumDelayed _delayed = ScheduledGotoEnumDelayed(0);
  ScheduledGotoEnumDelayed get delayed => _$this._delayed;
  set delayed(ScheduledGotoEnumDelayed delayed) => _$this._delayed = delayed;

  ScheduledGotoBuilder();

  ScheduledGotoBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  ScheduledGotoBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$ScheduledGoto.fromJson(json);
    replace(v);
  }

  @override
  ScheduledGotoBuilder fromJson(core.Map<String, dynamic> json) =>
      ScheduledGotoBuilder.fromJson(json);

  @override
  ScheduledGotoBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      ScheduledGotoBuilder()..copyFromHeader(headerFrom);

  ScheduledGotoBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _arrivalTime = _$v!.arrivalTime;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _z = _$v!.z;
      _zUnits = _$v!.zUnits;
      _travelZ = _$v!.travelZ;
      _travelZUnits = _$v!.travelZUnits;
      _delayed = _$v!.delayed;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(ScheduledGoto other) {
    _$v = other as _$ScheduledGoto;
  }

  @override
  void update(void Function(ScheduledGotoBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  ScheduledGoto build() {
    final result = _$v ??
        _$ScheduledGoto._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            arrivalTime: arrivalTime,
            lat: lat,
            lon: lon,
            z: z,
            zUnits: zUnits,
            travelZ: travelZ,
            travelZUnits: travelZUnits,
            delayed: delayed);
    replace(result);
    return result;
  }
}

/// Rows Coverage immutable class
///
class _$RowsCoverage extends RowsCoverage {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double lat;
  @override
  final double lon;
  @override
  final double z;
  @override
  final ZUnitsEnum zUnits;
  @override
  final double speed;
  @override
  final SpeedUnitsEnum speedUnits;
  @override
  final double bearing;
  @override
  final double crossAngle;
  @override
  final double width;
  @override
  final double length;
  @override
  final int coff;
  @override
  final double angAperture;
  @override
  final int range;
  @override
  final int overlap;
  @override
  final RowsCoverageBitfieldFlags flags;
  @override
  final String custom;

  factory _$RowsCoverage([void Function(RowsCoverageBuilder b)? updates]) =>
      (RowsCoverageBuilder()..update(updates)).build() as _$RowsCoverage;

  factory _$RowsCoverage.fromJson(core.Map<String, dynamic> json) {
    var val = RowsCoverageBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.zUnits = json.containsKey('z_units') && json['z_units'] != null
        ? ZUnitsEnum(json['z_units'] as int)
        : ZUnitsEnum(0);
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.speedUnits =
        json.containsKey('speed_units') && json['speed_units'] != null
            ? SpeedUnitsEnum(json['speed_units'] as int)
            : SpeedUnitsEnum(0);
    val.bearing = json.containsKey('bearing') ? json['bearing'] as double : 0;
    val.crossAngle =
        json.containsKey('cross_angle') ? json['cross_angle'] as double : 0;
    val.width = json.containsKey('width') ? json['width'] as double : 0;
    val.length = json.containsKey('length') ? json['length'] as double : 0;
    val.coff = json.containsKey('coff') ? json['coff'] as int : 0;
    val.angAperture = json.containsKey('angAperture')
        ? json['angAperture'] as double
        : 2.094395;
    val.range = json.containsKey('range') ? json['range'] as int : 0;
    val.overlap = json.containsKey('overlap') ? json['overlap'] as int : 10;
    val.flags = json.containsKey('flags') && json['flags'] != null
        ? RowsCoverageBitfieldFlags(json['flags'] as int)
        : RowsCoverageBitfieldFlags(0);
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$RowsCoverage;
  }

  _$RowsCoverage._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.lat,
      required this.lon,
      required this.z,
      required this.zUnits,
      required this.speed,
      required this.speedUnits,
      required this.bearing,
      required this.crossAngle,
      required this.width,
      required this.length,
      required this.coff,
      required this.angAperture,
      required this.range,
      required this.overlap,
      required this.flags,
      required this.custom})
      : super._();

  @override
  RowsCoverage rebuild(void Function(RowsCoverageBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  RowsCoverageBuilder toBuilder() => RowsCoverageBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is RowsCoverage &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        zUnits == other.zUnits &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        speedUnits == other.speedUnits &&
        (bearing == other.bearing || bearing - other.bearing <= 1E-7) &&
        (crossAngle == other.crossAngle ||
            crossAngle - other.crossAngle <= 1E-7) &&
        (width == other.width || width - other.width <= 1E-7) &&
        (length == other.length || length - other.length <= 1E-7) &&
        coff == other.coff &&
        (angAperture == other.angAperture ||
            angAperture - other.angAperture <= 1E-7) &&
        range == other.range &&
        overlap == other.overlap &&
        flags == other.flags &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc($jc(0, timestamp?.hashCode ?? null.hashCode), src.hashCode),
                                                                                srcEnt.hashCode),
                                                                            dst.hashCode),
                                                                        dstEnt.hashCode),
                                                                    lat.hashCode),
                                                                lon.hashCode),
                                                            z.hashCode),
                                                        zUnits.hashCode),
                                                    speed.hashCode),
                                                speedUnits.hashCode),
                                            bearing.hashCode),
                                        crossAngle.hashCode),
                                    width.hashCode),
                                length.hashCode),
                            coff.hashCode),
                        angAperture.hashCode),
                    range.hashCode),
                overlap.hashCode),
            flags.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('RowsCoverage')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('z', '$z (m)')
          ..add('zUnits', '$zUnits (Enumerated) [${zUnits.toPrettyString()}]')
          ..add('speed', '$speed')
          ..add('speedUnits',
              '$speedUnits (Enumerated) [${speedUnits.toPrettyString()}]')
          ..add(
              'bearing', '$bearing (rad) [${bearing * 180.0 / math.pi} (deg)]')
          ..add('crossAngle',
              '$crossAngle (rad) [${crossAngle * 180.0 / math.pi} (deg)]')
          ..add('width', '$width (m)')
          ..add('length', '$length (m)')
          ..add('coff', '$coff (m)')
          ..add('angAperture',
              '$angAperture (rad) [${angAperture * 180.0 / math.pi} (deg)]')
          ..add('range', '$range (m)')
          ..add('overlap', '$overlap (%)')
          ..add('flags', '$flags (Bitfield) [${flags.toPrettyString()}]')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'RowsCoverage',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'lat': lat,
        'lon': lon,
        'z': z,
        'z_units': zUnits.value,
        'speed': speed,
        'speed_units': speedUnits.value,
        'bearing': bearing,
        'cross_angle': crossAngle,
        'width': width,
        'length': length,
        'coff': coff,
        'angAperture': angAperture,
        'range': range,
        'overlap': overlap,
        'flags': flags.value,
        'custom': custom,
      };
}

/// Rows Coverage builder class
///
class RowsCoverageBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<RowsCoverage, RowsCoverageBuilder> {
  _$RowsCoverage? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  ZUnitsEnum _zUnits = ZUnitsEnum(0);
  ZUnitsEnum get zUnits => _$this._zUnits;
  set zUnits(ZUnitsEnum zUnits) => _$this._zUnits = zUnits;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  SpeedUnitsEnum _speedUnits = SpeedUnitsEnum(0);
  SpeedUnitsEnum get speedUnits => _$this._speedUnits;
  set speedUnits(SpeedUnitsEnum speedUnits) => _$this._speedUnits = speedUnits;

  double _bearing = 0;
  double get bearing => _$this._bearing;
  set bearing(double bearing) => _$this._bearing = bearing;

  double _crossAngle = 0;
  double get crossAngle => _$this._crossAngle;
  set crossAngle(double crossAngle) => _$this._crossAngle = crossAngle;

  double _width = 0;
  double get width => _$this._width;
  set width(double width) => _$this._width = width;

  double _length = 0;
  double get length => _$this._length;
  set length(double length) => _$this._length = length;

  int _coff = 0;
  int get coff => _$this._coff;
  set coff(int coff) => _$this._coff = coff;

  double _angAperture = 2.094395;
  double get angAperture => _$this._angAperture;
  set angAperture(double angAperture) => _$this._angAperture = angAperture;

  int _range = 0;
  int get range => _$this._range;
  set range(int range) => _$this._range = range;

  int _overlap = 10;
  int get overlap => _$this._overlap;
  set overlap(int overlap) => _$this._overlap = overlap;

  RowsCoverageBitfieldFlags _flags = RowsCoverageBitfieldFlags(0);
  RowsCoverageBitfieldFlags get flags => _$this._flags;
  set flags(RowsCoverageBitfieldFlags flags) => _$this._flags = flags;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  RowsCoverageBuilder();

  RowsCoverageBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  RowsCoverageBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$RowsCoverage.fromJson(json);
    replace(v);
  }

  @override
  RowsCoverageBuilder fromJson(core.Map<String, dynamic> json) =>
      RowsCoverageBuilder.fromJson(json);

  @override
  RowsCoverageBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      RowsCoverageBuilder()..copyFromHeader(headerFrom);

  RowsCoverageBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _z = _$v!.z;
      _zUnits = _$v!.zUnits;
      _speed = _$v!.speed;
      _speedUnits = _$v!.speedUnits;
      _bearing = _$v!.bearing;
      _crossAngle = _$v!.crossAngle;
      _width = _$v!.width;
      _length = _$v!.length;
      _coff = _$v!.coff;
      _angAperture = _$v!.angAperture;
      _range = _$v!.range;
      _overlap = _$v!.overlap;
      _flags = _$v!.flags;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(RowsCoverage other) {
    _$v = other as _$RowsCoverage;
  }

  @override
  void update(void Function(RowsCoverageBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  RowsCoverage build() {
    final result = _$v ??
        _$RowsCoverage._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            lat: lat,
            lon: lon,
            z: z,
            zUnits: zUnits,
            speed: speed,
            speedUnits: speedUnits,
            bearing: bearing,
            crossAngle: crossAngle,
            width: width,
            length: length,
            coff: coff,
            angAperture: angAperture,
            range: range,
            overlap: overlap,
            flags: flags,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Sample Maneuver immutable class
///
class _$Sample extends Sample {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int timeout;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double z;
  @override
  final ZUnitsEnum zUnits;
  @override
  final double speed;
  @override
  final SpeedUnitsEnum speedUnits;
  @override
  final BooleanEnum syringe0;
  @override
  final BooleanEnum syringe1;
  @override
  final BooleanEnum syringe2;
  @override
  final String custom;

  factory _$Sample([void Function(SampleBuilder b)? updates]) =>
      (SampleBuilder()..update(updates)).build() as _$Sample;

  factory _$Sample.fromJson(core.Map<String, dynamic> json) {
    var val = SampleBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.timeout = json.containsKey('timeout') ? json['timeout'] as int : 0;
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.zUnits = json.containsKey('z_units') && json['z_units'] != null
        ? ZUnitsEnum(json['z_units'] as int)
        : ZUnitsEnum(0);
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.speedUnits =
        json.containsKey('speed_units') && json['speed_units'] != null
            ? SpeedUnitsEnum(json['speed_units'] as int)
            : SpeedUnitsEnum(0);
    val.syringe0 = json.containsKey('syringe0') && json['syringe0'] != null
        ? BooleanEnum(json['syringe0'] as int)
        : BooleanEnum(0);
    val.syringe1 = json.containsKey('syringe1') && json['syringe1'] != null
        ? BooleanEnum(json['syringe1'] as int)
        : BooleanEnum(0);
    val.syringe2 = json.containsKey('syringe2') && json['syringe2'] != null
        ? BooleanEnum(json['syringe2'] as int)
        : BooleanEnum(0);
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$Sample;
  }

  _$Sample._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.timeout,
      required this.lat,
      required this.lon,
      required this.z,
      required this.zUnits,
      required this.speed,
      required this.speedUnits,
      required this.syringe0,
      required this.syringe1,
      required this.syringe2,
      required this.custom})
      : super._();

  @override
  Sample rebuild(void Function(SampleBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SampleBuilder toBuilder() => SampleBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Sample &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        timeout == other.timeout &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        zUnits == other.zUnits &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        speedUnits == other.speedUnits &&
        syringe0 == other.syringe0 &&
        syringe1 == other.syringe1 &&
        syringe2 == other.syringe2 &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    0,
                                                                    timestamp
                                                                            ?.hashCode ??
                                                                        null.hashCode),
                                                                src.hashCode),
                                                            srcEnt.hashCode),
                                                        dst.hashCode),
                                                    dstEnt.hashCode),
                                                timeout.hashCode),
                                            lat.hashCode),
                                        lon.hashCode),
                                    z.hashCode),
                                zUnits.hashCode),
                            speed.hashCode),
                        speedUnits.hashCode),
                    syringe0.hashCode),
                syringe1.hashCode),
            syringe2.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Sample')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('timeout', '$timeout (s)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('z', '$z (m)')
          ..add('zUnits', '$zUnits (Enumerated) [${zUnits.toPrettyString()}]')
          ..add('speed', '$speed')
          ..add('speedUnits',
              '$speedUnits (Enumerated) [${speedUnits.toPrettyString()}]')
          ..add('syringe0',
              '$syringe0 (Enumerated) [${syringe0.toPrettyString()}]')
          ..add('syringe1',
              '$syringe1 (Enumerated) [${syringe1.toPrettyString()}]')
          ..add('syringe2',
              '$syringe2 (Enumerated) [${syringe2.toPrettyString()}]')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Sample',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'timeout': timeout,
        'lat': lat,
        'lon': lon,
        'z': z,
        'z_units': zUnits.value,
        'speed': speed,
        'speed_units': speedUnits.value,
        'syringe0': syringe0.value,
        'syringe1': syringe1.value,
        'syringe2': syringe2.value,
        'custom': custom,
      };
}

/// Sample Maneuver builder class
///
class SampleBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Sample, SampleBuilder> {
  _$Sample? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _timeout = 0;
  int get timeout => _$this._timeout;
  set timeout(int timeout) => _$this._timeout = timeout;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  ZUnitsEnum _zUnits = ZUnitsEnum(0);
  ZUnitsEnum get zUnits => _$this._zUnits;
  set zUnits(ZUnitsEnum zUnits) => _$this._zUnits = zUnits;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  SpeedUnitsEnum _speedUnits = SpeedUnitsEnum(0);
  SpeedUnitsEnum get speedUnits => _$this._speedUnits;
  set speedUnits(SpeedUnitsEnum speedUnits) => _$this._speedUnits = speedUnits;

  BooleanEnum _syringe0 = BooleanEnum(0);
  BooleanEnum get syringe0 => _$this._syringe0;
  set syringe0(BooleanEnum syringe0) => _$this._syringe0 = syringe0;

  BooleanEnum _syringe1 = BooleanEnum(0);
  BooleanEnum get syringe1 => _$this._syringe1;
  set syringe1(BooleanEnum syringe1) => _$this._syringe1 = syringe1;

  BooleanEnum _syringe2 = BooleanEnum(0);
  BooleanEnum get syringe2 => _$this._syringe2;
  set syringe2(BooleanEnum syringe2) => _$this._syringe2 = syringe2;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  SampleBuilder();

  SampleBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SampleBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Sample.fromJson(json);
    replace(v);
  }

  @override
  SampleBuilder fromJson(core.Map<String, dynamic> json) =>
      SampleBuilder.fromJson(json);

  @override
  SampleBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SampleBuilder()..copyFromHeader(headerFrom);

  SampleBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _timeout = _$v!.timeout;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _z = _$v!.z;
      _zUnits = _$v!.zUnits;
      _speed = _$v!.speed;
      _speedUnits = _$v!.speedUnits;
      _syringe0 = _$v!.syringe0;
      _syringe1 = _$v!.syringe1;
      _syringe2 = _$v!.syringe2;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Sample other) {
    _$v = other as _$Sample;
  }

  @override
  void update(void Function(SampleBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Sample build() {
    final result = _$v ??
        _$Sample._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            timeout: timeout,
            lat: lat,
            lon: lon,
            z: z,
            zUnits: zUnits,
            speed: speed,
            speedUnits: speedUnits,
            syringe0: syringe0,
            syringe1: syringe1,
            syringe2: syringe2,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Image Tracking immutable class
///
class _$ImageTracking extends ImageTracking {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  factory _$ImageTracking([void Function(ImageTrackingBuilder b)? updates]) =>
      (ImageTrackingBuilder()..update(updates)).build() as _$ImageTracking;

  factory _$ImageTracking.fromJson(core.Map<String, dynamic> json) {
    var val = ImageTrackingBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    return val.build() as _$ImageTracking;
  }

  _$ImageTracking._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId})
      : super._();

  @override
  ImageTracking rebuild(void Function(ImageTrackingBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  ImageTrackingBuilder toBuilder() => ImageTrackingBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is ImageTracking &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc($jc($jc(0, timestamp?.hashCode ?? null.hashCode), src.hashCode),
                srcEnt.hashCode),
            dst.hashCode),
        dstEnt.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('ImageTracking')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'ImageTracking',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
      };
}

/// Image Tracking builder class
///
class ImageTrackingBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<ImageTracking, ImageTrackingBuilder> {
  _$ImageTracking? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  ImageTrackingBuilder();

  ImageTrackingBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  ImageTrackingBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$ImageTracking.fromJson(json);
    replace(v);
  }

  @override
  ImageTrackingBuilder fromJson(core.Map<String, dynamic> json) =>
      ImageTrackingBuilder.fromJson(json);

  @override
  ImageTrackingBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      ImageTrackingBuilder()..copyFromHeader(headerFrom);

  ImageTrackingBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(ImageTracking other) {
    _$v = other as _$ImageTracking;
  }

  @override
  void update(void Function(ImageTrackingBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  ImageTracking build() {
    final result = _$v ??
        _$ImageTracking._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt);
    replace(result);
    return result;
  }
}

/// Takeoff Maneuver immutable class
///
class _$Takeoff extends Takeoff {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double lat;
  @override
  final double lon;
  @override
  final double z;
  @override
  final ZUnitsEnum zUnits;
  @override
  final double speed;
  @override
  final SpeedUnitsEnum speedUnits;
  @override
  final double takeoffPitch;
  @override
  final String custom;

  factory _$Takeoff([void Function(TakeoffBuilder b)? updates]) =>
      (TakeoffBuilder()..update(updates)).build() as _$Takeoff;

  factory _$Takeoff.fromJson(core.Map<String, dynamic> json) {
    var val = TakeoffBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.zUnits = json.containsKey('z_units') && json['z_units'] != null
        ? ZUnitsEnum(json['z_units'] as int)
        : ZUnitsEnum(0);
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.speedUnits =
        json.containsKey('speed_units') && json['speed_units'] != null
            ? SpeedUnitsEnum(json['speed_units'] as int)
            : SpeedUnitsEnum(0);
    val.takeoffPitch =
        json.containsKey('takeoff_pitch') ? json['takeoff_pitch'] as double : 0;
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$Takeoff;
  }

  _$Takeoff._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.lat,
      required this.lon,
      required this.z,
      required this.zUnits,
      required this.speed,
      required this.speedUnits,
      required this.takeoffPitch,
      required this.custom})
      : super._();

  @override
  Takeoff rebuild(void Function(TakeoffBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  TakeoffBuilder toBuilder() => TakeoffBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Takeoff &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        zUnits == other.zUnits &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        speedUnits == other.speedUnits &&
        (takeoffPitch == other.takeoffPitch ||
            takeoffPitch - other.takeoffPitch <= 1E-7) &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        0,
                                                        timestamp?.hashCode ??
                                                            null.hashCode),
                                                    src.hashCode),
                                                srcEnt.hashCode),
                                            dst.hashCode),
                                        dstEnt.hashCode),
                                    lat.hashCode),
                                lon.hashCode),
                            z.hashCode),
                        zUnits.hashCode),
                    speed.hashCode),
                speedUnits.hashCode),
            takeoffPitch.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Takeoff')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('z', '$z (m)')
          ..add('zUnits', '$zUnits (Enumerated) [${zUnits.toPrettyString()}]')
          ..add('speed', '$speed')
          ..add('speedUnits',
              '$speedUnits (Enumerated) [${speedUnits.toPrettyString()}]')
          ..add('takeoffPitch',
              '$takeoffPitch (rad) [${takeoffPitch * 180.0 / math.pi} (deg)]')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Takeoff',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'lat': lat,
        'lon': lon,
        'z': z,
        'z_units': zUnits.value,
        'speed': speed,
        'speed_units': speedUnits.value,
        'takeoff_pitch': takeoffPitch,
        'custom': custom,
      };
}

/// Takeoff Maneuver builder class
///
class TakeoffBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Takeoff, TakeoffBuilder> {
  _$Takeoff? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  ZUnitsEnum _zUnits = ZUnitsEnum(0);
  ZUnitsEnum get zUnits => _$this._zUnits;
  set zUnits(ZUnitsEnum zUnits) => _$this._zUnits = zUnits;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  SpeedUnitsEnum _speedUnits = SpeedUnitsEnum(0);
  SpeedUnitsEnum get speedUnits => _$this._speedUnits;
  set speedUnits(SpeedUnitsEnum speedUnits) => _$this._speedUnits = speedUnits;

  double _takeoffPitch = 0;
  double get takeoffPitch => _$this._takeoffPitch;
  set takeoffPitch(double takeoffPitch) => _$this._takeoffPitch = takeoffPitch;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  TakeoffBuilder();

  TakeoffBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  TakeoffBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Takeoff.fromJson(json);
    replace(v);
  }

  @override
  TakeoffBuilder fromJson(core.Map<String, dynamic> json) =>
      TakeoffBuilder.fromJson(json);

  @override
  TakeoffBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      TakeoffBuilder()..copyFromHeader(headerFrom);

  TakeoffBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _z = _$v!.z;
      _zUnits = _$v!.zUnits;
      _speed = _$v!.speed;
      _speedUnits = _$v!.speedUnits;
      _takeoffPitch = _$v!.takeoffPitch;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Takeoff other) {
    _$v = other as _$Takeoff;
  }

  @override
  void update(void Function(TakeoffBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Takeoff build() {
    final result = _$v ??
        _$Takeoff._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            lat: lat,
            lon: lon,
            z: z,
            zUnits: zUnits,
            speed: speed,
            speedUnits: speedUnits,
            takeoffPitch: takeoffPitch,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Land Maneuver immutable class
///
class _$Land extends Land {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double lat;
  @override
  final double lon;
  @override
  final double z;
  @override
  final ZUnitsEnum zUnits;
  @override
  final double speed;
  @override
  final SpeedUnitsEnum speedUnits;
  @override
  final double abortZ;
  @override
  final double bearing;
  @override
  final int glideSlope;
  @override
  final double glideSlopeAlt;
  @override
  final String custom;

  factory _$Land([void Function(LandBuilder b)? updates]) =>
      (LandBuilder()..update(updates)).build() as _$Land;

  factory _$Land.fromJson(core.Map<String, dynamic> json) {
    var val = LandBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.zUnits = json.containsKey('z_units') && json['z_units'] != null
        ? ZUnitsEnum(json['z_units'] as int)
        : ZUnitsEnum(0);
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.speedUnits =
        json.containsKey('speed_units') && json['speed_units'] != null
            ? SpeedUnitsEnum(json['speed_units'] as int)
            : SpeedUnitsEnum(0);
    val.abortZ = json.containsKey('abort_z') ? json['abort_z'] as double : 0;
    val.bearing = json.containsKey('bearing') ? json['bearing'] as double : 0;
    val.glideSlope =
        json.containsKey('glide_slope') ? json['glide_slope'] as int : 0;
    val.glideSlopeAlt = json.containsKey('glide_slope_alt')
        ? json['glide_slope_alt'] as double
        : 0;
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$Land;
  }

  _$Land._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.lat,
      required this.lon,
      required this.z,
      required this.zUnits,
      required this.speed,
      required this.speedUnits,
      required this.abortZ,
      required this.bearing,
      required this.glideSlope,
      required this.glideSlopeAlt,
      required this.custom})
      : super._();

  @override
  Land rebuild(void Function(LandBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  LandBuilder toBuilder() => LandBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Land &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        zUnits == other.zUnits &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        speedUnits == other.speedUnits &&
        (abortZ == other.abortZ || abortZ - other.abortZ <= 1E-7) &&
        (bearing == other.bearing || bearing - other.bearing <= 1E-7) &&
        glideSlope == other.glideSlope &&
        (glideSlopeAlt == other.glideSlopeAlt ||
            glideSlopeAlt - other.glideSlopeAlt <= 1E-7) &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    0,
                                                                    timestamp
                                                                            ?.hashCode ??
                                                                        null.hashCode),
                                                                src.hashCode),
                                                            srcEnt.hashCode),
                                                        dst.hashCode),
                                                    dstEnt.hashCode),
                                                lat.hashCode),
                                            lon.hashCode),
                                        z.hashCode),
                                    zUnits.hashCode),
                                speed.hashCode),
                            speedUnits.hashCode),
                        abortZ.hashCode),
                    bearing.hashCode),
                glideSlope.hashCode),
            glideSlopeAlt.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Land')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('z', '$z (m)')
          ..add('zUnits', '$zUnits (Enumerated) [${zUnits.toPrettyString()}]')
          ..add('speed', '$speed')
          ..add('speedUnits',
              '$speedUnits (Enumerated) [${speedUnits.toPrettyString()}]')
          ..add('abortZ', '$abortZ (m)')
          ..add(
              'bearing', '$bearing (rad) [${bearing * 180.0 / math.pi} (deg)]')
          ..add('glideSlope', '$glideSlope (%)')
          ..add('glideSlopeAlt', '$glideSlopeAlt (m)')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Land',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'lat': lat,
        'lon': lon,
        'z': z,
        'z_units': zUnits.value,
        'speed': speed,
        'speed_units': speedUnits.value,
        'abort_z': abortZ,
        'bearing': bearing,
        'glide_slope': glideSlope,
        'glide_slope_alt': glideSlopeAlt,
        'custom': custom,
      };
}

/// Land Maneuver builder class
///
class LandBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Land, LandBuilder> {
  _$Land? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  ZUnitsEnum _zUnits = ZUnitsEnum(0);
  ZUnitsEnum get zUnits => _$this._zUnits;
  set zUnits(ZUnitsEnum zUnits) => _$this._zUnits = zUnits;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  SpeedUnitsEnum _speedUnits = SpeedUnitsEnum(0);
  SpeedUnitsEnum get speedUnits => _$this._speedUnits;
  set speedUnits(SpeedUnitsEnum speedUnits) => _$this._speedUnits = speedUnits;

  double _abortZ = 0;
  double get abortZ => _$this._abortZ;
  set abortZ(double abortZ) => _$this._abortZ = abortZ;

  double _bearing = 0;
  double get bearing => _$this._bearing;
  set bearing(double bearing) => _$this._bearing = bearing;

  int _glideSlope = 0;
  int get glideSlope => _$this._glideSlope;
  set glideSlope(int glideSlope) => _$this._glideSlope = glideSlope;

  double _glideSlopeAlt = 0;
  double get glideSlopeAlt => _$this._glideSlopeAlt;
  set glideSlopeAlt(double glideSlopeAlt) =>
      _$this._glideSlopeAlt = glideSlopeAlt;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  LandBuilder();

  LandBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  LandBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Land.fromJson(json);
    replace(v);
  }

  @override
  LandBuilder fromJson(core.Map<String, dynamic> json) =>
      LandBuilder.fromJson(json);

  @override
  LandBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      LandBuilder()..copyFromHeader(headerFrom);

  LandBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _z = _$v!.z;
      _zUnits = _$v!.zUnits;
      _speed = _$v!.speed;
      _speedUnits = _$v!.speedUnits;
      _abortZ = _$v!.abortZ;
      _bearing = _$v!.bearing;
      _glideSlope = _$v!.glideSlope;
      _glideSlopeAlt = _$v!.glideSlopeAlt;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Land other) {
    _$v = other as _$Land;
  }

  @override
  void update(void Function(LandBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Land build() {
    final result = _$v ??
        _$Land._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            lat: lat,
            lon: lon,
            z: z,
            zUnits: zUnits,
            speed: speed,
            speedUnits: speedUnits,
            abortZ: abortZ,
            bearing: bearing,
            glideSlope: glideSlope,
            glideSlopeAlt: glideSlopeAlt,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Autonomous Section immutable class
///
class _$AutonomousSection extends AutonomousSection {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double lat;
  @override
  final double lon;
  @override
  final double speed;
  @override
  final SpeedUnitsEnum speedUnits;
  @override
  final AutonomousSectionBitfieldLimits limits;
  @override
  final double maxDepth;
  @override
  final double minAlt;
  @override
  final double timeLimit;
  @override
  final List<PolygonVertex> areaLimits;
  @override
  final String controller;
  @override
  final String custom;

  factory _$AutonomousSection(
          [void Function(AutonomousSectionBuilder b)? updates]) =>
      (AutonomousSectionBuilder()..update(updates)).build()
          as _$AutonomousSection;

  factory _$AutonomousSection.fromJson(core.Map<String, dynamic> json) {
    var val = AutonomousSectionBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.speedUnits =
        json.containsKey('speed_units') && json['speed_units'] != null
            ? SpeedUnitsEnum(json['speed_units'] as int)
            : SpeedUnitsEnum(0);
    val.limits = json.containsKey('limits') && json['limits'] != null
        ? AutonomousSectionBitfieldLimits(json['limits'] as int)
        : AutonomousSectionBitfieldLimits(0);
    val.maxDepth =
        json.containsKey('max_depth') ? json['max_depth'] as double : 0;
    val.minAlt = json.containsKey('min_alt') ? json['min_alt'] as double : 0;
    val.timeLimit =
        json.containsKey('time_limit') ? json['time_limit'] as double : 0;
    var areaLimits = <PolygonVertex>[];
    if (json.containsKey('area_limits') && json['area_limits'] != null) {
      var listJson = json['area_limits'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as PolygonVertex?;
          if (m != null) areaLimits.add(m);
        }
      }
    }
    val.areaLimits = areaLimits;
    val.controller =
        json.containsKey('controller') && json['controller'] != null
            ? json['controller'] as String
            : '';
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$AutonomousSection;
  }

  _$AutonomousSection._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.lat,
      required this.lon,
      required this.speed,
      required this.speedUnits,
      required this.limits,
      required this.maxDepth,
      required this.minAlt,
      required this.timeLimit,
      required this.areaLimits,
      required this.controller,
      required this.custom})
      : super._();

  @override
  AutonomousSection rebuild(
          void Function(AutonomousSectionBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  AutonomousSectionBuilder toBuilder() =>
      AutonomousSectionBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is AutonomousSection &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        speedUnits == other.speedUnits &&
        limits == other.limits &&
        (maxDepth == other.maxDepth || maxDepth - other.maxDepth <= 1E-7) &&
        (minAlt == other.minAlt || minAlt - other.minAlt <= 1E-7) &&
        (timeLimit == other.timeLimit || timeLimit - other.timeLimit <= 1E-7) &&
        DeepCollectionEquality().equals(areaLimits, other.areaLimits) &&
        controller == other.controller &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    0,
                                                                    timestamp
                                                                            ?.hashCode ??
                                                                        null.hashCode),
                                                                src.hashCode),
                                                            srcEnt.hashCode),
                                                        dst.hashCode),
                                                    dstEnt.hashCode),
                                                lat.hashCode),
                                            lon.hashCode),
                                        speed.hashCode),
                                    speedUnits.hashCode),
                                limits.hashCode),
                            maxDepth.hashCode),
                        minAlt.hashCode),
                    timeLimit.hashCode),
                areaLimits.hashCode),
            controller.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('AutonomousSection')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('speed', '$speed')
          ..add('speedUnits',
              '$speedUnits (Enumerated) [${speedUnits.toPrettyString()}]')
          ..add('limits', '$limits (Bitfield) [${limits.toPrettyString()}]')
          ..add('maxDepth', '$maxDepth (m)')
          ..add('minAlt', '$minAlt (m)')
          ..add('timeLimit', '$timeLimit (s)')
          ..add('areaLimits', '$areaLimits')
          ..add('controller', controller)
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'AutonomousSection',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'lat': lat,
        'lon': lon,
        'speed': speed,
        'speed_units': speedUnits.value,
        'limits': limits.value,
        'max_depth': maxDepth,
        'min_alt': minAlt,
        'time_limit': timeLimit,
        'area_limits': [
          ...areaLimits.map((m) => m.toJson(false)),
        ],
        'controller': controller,
        'custom': custom,
      };
}

/// Autonomous Section builder class
///
class AutonomousSectionBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<AutonomousSection, AutonomousSectionBuilder> {
  _$AutonomousSection? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  SpeedUnitsEnum _speedUnits = SpeedUnitsEnum(0);
  SpeedUnitsEnum get speedUnits => _$this._speedUnits;
  set speedUnits(SpeedUnitsEnum speedUnits) => _$this._speedUnits = speedUnits;

  AutonomousSectionBitfieldLimits _limits = AutonomousSectionBitfieldLimits(0);
  AutonomousSectionBitfieldLimits get limits => _$this._limits;
  set limits(AutonomousSectionBitfieldLimits limits) => _$this._limits = limits;

  double _maxDepth = 0;
  double get maxDepth => _$this._maxDepth;
  set maxDepth(double maxDepth) => _$this._maxDepth = maxDepth;

  double _minAlt = 0;
  double get minAlt => _$this._minAlt;
  set minAlt(double minAlt) => _$this._minAlt = minAlt;

  double _timeLimit = 0;
  double get timeLimit => _$this._timeLimit;
  set timeLimit(double timeLimit) => _$this._timeLimit = timeLimit;

  List<PolygonVertex> _areaLimits = <PolygonVertex>[];
  List<PolygonVertex> get areaLimits => _$this._areaLimits;
  set areaLimits(List<PolygonVertex> areaLimits) =>
      _$this._areaLimits = areaLimits;

  String _controller = '';
  String get controller => _$this._controller;
  set controller(String controller) => _$this._controller = controller;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  AutonomousSectionBuilder();

  AutonomousSectionBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  AutonomousSectionBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$AutonomousSection.fromJson(json);
    replace(v);
  }

  @override
  AutonomousSectionBuilder fromJson(core.Map<String, dynamic> json) =>
      AutonomousSectionBuilder.fromJson(json);

  @override
  AutonomousSectionBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      AutonomousSectionBuilder()..copyFromHeader(headerFrom);

  AutonomousSectionBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _speed = _$v!.speed;
      _speedUnits = _$v!.speedUnits;
      _limits = _$v!.limits;
      _maxDepth = _$v!.maxDepth;
      _minAlt = _$v!.minAlt;
      _timeLimit = _$v!.timeLimit;
      _areaLimits = _$v!.areaLimits;
      _controller = _$v!.controller;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(AutonomousSection other) {
    _$v = other as _$AutonomousSection;
  }

  @override
  void update(void Function(AutonomousSectionBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  AutonomousSection build() {
    final result = _$v ??
        _$AutonomousSection._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            lat: lat,
            lon: lon,
            speed: speed,
            speedUnits: speedUnits,
            limits: limits,
            maxDepth: maxDepth,
            minAlt: minAlt,
            timeLimit: timeLimit,
            areaLimits: areaLimits,
            controller: controller,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Follow Point Maneuver immutable class
///
class _$FollowPoint extends FollowPoint {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String target;
  @override
  final double maxSpeed;
  @override
  final SpeedUnitsEnum speedUnits;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double z;
  @override
  final ZUnitsEnum zUnits;
  @override
  final String custom;

  factory _$FollowPoint([void Function(FollowPointBuilder b)? updates]) =>
      (FollowPointBuilder()..update(updates)).build() as _$FollowPoint;

  factory _$FollowPoint.fromJson(core.Map<String, dynamic> json) {
    var val = FollowPointBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.target = json.containsKey('target') && json['target'] != null
        ? json['target'] as String
        : '';
    val.maxSpeed =
        json.containsKey('max_speed') ? json['max_speed'] as double : 0;
    val.speedUnits =
        json.containsKey('speed_units') && json['speed_units'] != null
            ? SpeedUnitsEnum(json['speed_units'] as int)
            : SpeedUnitsEnum(0);
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.zUnits = json.containsKey('z_units') && json['z_units'] != null
        ? ZUnitsEnum(json['z_units'] as int)
        : ZUnitsEnum(0);
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$FollowPoint;
  }

  _$FollowPoint._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.target,
      required this.maxSpeed,
      required this.speedUnits,
      required this.lat,
      required this.lon,
      required this.z,
      required this.zUnits,
      required this.custom})
      : super._();

  @override
  FollowPoint rebuild(void Function(FollowPointBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  FollowPointBuilder toBuilder() => FollowPointBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is FollowPoint &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        target == other.target &&
        (maxSpeed == other.maxSpeed || maxSpeed - other.maxSpeed <= 1E-7) &&
        speedUnits == other.speedUnits &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        zUnits == other.zUnits &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        0,
                                                        timestamp?.hashCode ??
                                                            null.hashCode),
                                                    src.hashCode),
                                                srcEnt.hashCode),
                                            dst.hashCode),
                                        dstEnt.hashCode),
                                    target.hashCode),
                                maxSpeed.hashCode),
                            speedUnits.hashCode),
                        lat.hashCode),
                    lon.hashCode),
                z.hashCode),
            zUnits.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('FollowPoint')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('target', target)
          ..add('maxSpeed', '$maxSpeed (m/s)')
          ..add('speedUnits',
              '$speedUnits (Enumerated) [${speedUnits.toPrettyString()}]')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('z', '$z (m)')
          ..add('zUnits', '$zUnits (Enumerated) [${zUnits.toPrettyString()}]')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'FollowPoint',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'target': target,
        'max_speed': maxSpeed,
        'speed_units': speedUnits.value,
        'lat': lat,
        'lon': lon,
        'z': z,
        'z_units': zUnits.value,
        'custom': custom,
      };
}

/// Follow Point Maneuver builder class
///
class FollowPointBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<FollowPoint, FollowPointBuilder> {
  _$FollowPoint? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _target = '';
  String get target => _$this._target;
  set target(String target) => _$this._target = target;

  double _maxSpeed = 0;
  double get maxSpeed => _$this._maxSpeed;
  set maxSpeed(double maxSpeed) => _$this._maxSpeed = maxSpeed;

  SpeedUnitsEnum _speedUnits = SpeedUnitsEnum(0);
  SpeedUnitsEnum get speedUnits => _$this._speedUnits;
  set speedUnits(SpeedUnitsEnum speedUnits) => _$this._speedUnits = speedUnits;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  ZUnitsEnum _zUnits = ZUnitsEnum(0);
  ZUnitsEnum get zUnits => _$this._zUnits;
  set zUnits(ZUnitsEnum zUnits) => _$this._zUnits = zUnits;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  FollowPointBuilder();

  FollowPointBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  FollowPointBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$FollowPoint.fromJson(json);
    replace(v);
  }

  @override
  FollowPointBuilder fromJson(core.Map<String, dynamic> json) =>
      FollowPointBuilder.fromJson(json);

  @override
  FollowPointBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      FollowPointBuilder()..copyFromHeader(headerFrom);

  FollowPointBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _target = _$v!.target;
      _maxSpeed = _$v!.maxSpeed;
      _speedUnits = _$v!.speedUnits;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _z = _$v!.z;
      _zUnits = _$v!.zUnits;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(FollowPoint other) {
    _$v = other as _$FollowPoint;
  }

  @override
  void update(void Function(FollowPointBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  FollowPoint build() {
    final result = _$v ??
        _$FollowPoint._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            target: target,
            maxSpeed: maxSpeed,
            speedUnits: speedUnits,
            lat: lat,
            lon: lon,
            z: z,
            zUnits: zUnits,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Alignment Maneuver immutable class
///
class _$Alignment extends Alignment {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int timeout;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double speed;
  @override
  final SpeedUnitsEnum speedUnits;
  @override
  final String custom;

  factory _$Alignment([void Function(AlignmentBuilder b)? updates]) =>
      (AlignmentBuilder()..update(updates)).build() as _$Alignment;

  factory _$Alignment.fromJson(core.Map<String, dynamic> json) {
    var val = AlignmentBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.timeout = json.containsKey('timeout') ? json['timeout'] as int : 0;
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.speedUnits =
        json.containsKey('speed_units') && json['speed_units'] != null
            ? SpeedUnitsEnum(json['speed_units'] as int)
            : SpeedUnitsEnum(0);
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$Alignment;
  }

  _$Alignment._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.timeout,
      required this.lat,
      required this.lon,
      required this.speed,
      required this.speedUnits,
      required this.custom})
      : super._();

  @override
  Alignment rebuild(void Function(AlignmentBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  AlignmentBuilder toBuilder() => AlignmentBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Alignment &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        timeout == other.timeout &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        speedUnits == other.speedUnits &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                0,
                                                timestamp?.hashCode ??
                                                    null.hashCode),
                                            src.hashCode),
                                        srcEnt.hashCode),
                                    dst.hashCode),
                                dstEnt.hashCode),
                            timeout.hashCode),
                        lat.hashCode),
                    lon.hashCode),
                speed.hashCode),
            speedUnits.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Alignment')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('timeout', '$timeout (s)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('speed', '$speed')
          ..add('speedUnits',
              '$speedUnits (Enumerated) [${speedUnits.toPrettyString()}]')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Alignment',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'timeout': timeout,
        'lat': lat,
        'lon': lon,
        'speed': speed,
        'speed_units': speedUnits.value,
        'custom': custom,
      };
}

/// Alignment Maneuver builder class
///
class AlignmentBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Alignment, AlignmentBuilder> {
  _$Alignment? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _timeout = 0;
  int get timeout => _$this._timeout;
  set timeout(int timeout) => _$this._timeout = timeout;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  SpeedUnitsEnum _speedUnits = SpeedUnitsEnum(0);
  SpeedUnitsEnum get speedUnits => _$this._speedUnits;
  set speedUnits(SpeedUnitsEnum speedUnits) => _$this._speedUnits = speedUnits;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  AlignmentBuilder();

  AlignmentBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  AlignmentBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Alignment.fromJson(json);
    replace(v);
  }

  @override
  AlignmentBuilder fromJson(core.Map<String, dynamic> json) =>
      AlignmentBuilder.fromJson(json);

  @override
  AlignmentBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      AlignmentBuilder()..copyFromHeader(headerFrom);

  AlignmentBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _timeout = _$v!.timeout;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _speed = _$v!.speed;
      _speedUnits = _$v!.speedUnits;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Alignment other) {
    _$v = other as _$Alignment;
  }

  @override
  void update(void Function(AlignmentBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Alignment build() {
    final result = _$v ??
        _$Alignment._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            timeout: timeout,
            lat: lat,
            lon: lon,
            speed: speed,
            speedUnits: speedUnits,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Station Keeping Extended immutable class
///
class _$StationKeepingExtended extends StationKeepingExtended {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double lat;
  @override
  final double lon;
  @override
  final double z;
  @override
  final ZUnitsEnum zUnits;
  @override
  final double radius;
  @override
  final int duration;
  @override
  final double speed;
  @override
  final SpeedUnitsEnum speedUnits;
  @override
  final int popupPeriod;
  @override
  final int popupDuration;
  @override
  final StationKeepingExtendedBitfieldFlags flags;
  @override
  final String custom;

  factory _$StationKeepingExtended(
          [void Function(StationKeepingExtendedBuilder b)? updates]) =>
      (StationKeepingExtendedBuilder()..update(updates)).build()
          as _$StationKeepingExtended;

  factory _$StationKeepingExtended.fromJson(core.Map<String, dynamic> json) {
    var val = StationKeepingExtendedBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.zUnits = json.containsKey('z_units') && json['z_units'] != null
        ? ZUnitsEnum(json['z_units'] as int)
        : ZUnitsEnum(0);
    val.radius = json.containsKey('radius') ? json['radius'] as double : 0;
    val.duration = json.containsKey('duration') ? json['duration'] as int : 0;
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.speedUnits =
        json.containsKey('speed_units') && json['speed_units'] != null
            ? SpeedUnitsEnum(json['speed_units'] as int)
            : SpeedUnitsEnum(0);
    val.popupPeriod =
        json.containsKey('popup_period') ? json['popup_period'] as int : 0;
    val.popupDuration =
        json.containsKey('popup_duration') ? json['popup_duration'] as int : 0;
    val.flags = json.containsKey('flags') && json['flags'] != null
        ? StationKeepingExtendedBitfieldFlags(json['flags'] as int)
        : StationKeepingExtendedBitfieldFlags(0);
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$StationKeepingExtended;
  }

  _$StationKeepingExtended._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.lat,
      required this.lon,
      required this.z,
      required this.zUnits,
      required this.radius,
      required this.duration,
      required this.speed,
      required this.speedUnits,
      required this.popupPeriod,
      required this.popupDuration,
      required this.flags,
      required this.custom})
      : super._();

  @override
  StationKeepingExtended rebuild(
          void Function(StationKeepingExtendedBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  StationKeepingExtendedBuilder toBuilder() =>
      StationKeepingExtendedBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is StationKeepingExtended &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        zUnits == other.zUnits &&
        (radius == other.radius || radius - other.radius <= 1E-7) &&
        duration == other.duration &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        speedUnits == other.speedUnits &&
        popupPeriod == other.popupPeriod &&
        popupDuration == other.popupDuration &&
        flags == other.flags &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        0,
                                                                        timestamp?.hashCode ??
                                                                            null.hashCode),
                                                                    src.hashCode),
                                                                srcEnt.hashCode),
                                                            dst.hashCode),
                                                        dstEnt.hashCode),
                                                    lat.hashCode),
                                                lon.hashCode),
                                            z.hashCode),
                                        zUnits.hashCode),
                                    radius.hashCode),
                                duration.hashCode),
                            speed.hashCode),
                        speedUnits.hashCode),
                    popupPeriod.hashCode),
                popupDuration.hashCode),
            flags.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('StationKeepingExtended')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('z', '$z (m)')
          ..add('zUnits', '$zUnits (Enumerated) [${zUnits.toPrettyString()}]')
          ..add('radius', '$radius (m)')
          ..add('duration', '$duration (s)')
          ..add('speed', '$speed')
          ..add('speedUnits',
              '$speedUnits (Enumerated) [${speedUnits.toPrettyString()}]')
          ..add('popupPeriod', '$popupPeriod (s)')
          ..add('popupDuration', '$popupDuration (s)')
          ..add('flags', '$flags (Bitfield) [${flags.toPrettyString()}]')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'StationKeepingExtended',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'lat': lat,
        'lon': lon,
        'z': z,
        'z_units': zUnits.value,
        'radius': radius,
        'duration': duration,
        'speed': speed,
        'speed_units': speedUnits.value,
        'popup_period': popupPeriod,
        'popup_duration': popupDuration,
        'flags': flags.value,
        'custom': custom,
      };
}

/// Station Keeping Extended builder class
///
class StationKeepingExtendedBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<StationKeepingExtended,
            StationKeepingExtendedBuilder> {
  _$StationKeepingExtended? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  ZUnitsEnum _zUnits = ZUnitsEnum(0);
  ZUnitsEnum get zUnits => _$this._zUnits;
  set zUnits(ZUnitsEnum zUnits) => _$this._zUnits = zUnits;

  double _radius = 0;
  double get radius => _$this._radius;
  set radius(double radius) => _$this._radius = radius;

  int _duration = 0;
  int get duration => _$this._duration;
  set duration(int duration) => _$this._duration = duration;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  SpeedUnitsEnum _speedUnits = SpeedUnitsEnum(0);
  SpeedUnitsEnum get speedUnits => _$this._speedUnits;
  set speedUnits(SpeedUnitsEnum speedUnits) => _$this._speedUnits = speedUnits;

  int _popupPeriod = 0;
  int get popupPeriod => _$this._popupPeriod;
  set popupPeriod(int popupPeriod) => _$this._popupPeriod = popupPeriod;

  int _popupDuration = 0;
  int get popupDuration => _$this._popupDuration;
  set popupDuration(int popupDuration) => _$this._popupDuration = popupDuration;

  StationKeepingExtendedBitfieldFlags _flags =
      StationKeepingExtendedBitfieldFlags(0);
  StationKeepingExtendedBitfieldFlags get flags => _$this._flags;
  set flags(StationKeepingExtendedBitfieldFlags flags) => _$this._flags = flags;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  StationKeepingExtendedBuilder();

  StationKeepingExtendedBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  StationKeepingExtendedBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$StationKeepingExtended.fromJson(json);
    replace(v);
  }

  @override
  StationKeepingExtendedBuilder fromJson(core.Map<String, dynamic> json) =>
      StationKeepingExtendedBuilder.fromJson(json);

  @override
  StationKeepingExtendedBuilder newInstance(
          [ImcBuilderHeaderPart? headerFrom]) =>
      StationKeepingExtendedBuilder()..copyFromHeader(headerFrom);

  StationKeepingExtendedBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _z = _$v!.z;
      _zUnits = _$v!.zUnits;
      _radius = _$v!.radius;
      _duration = _$v!.duration;
      _speed = _$v!.speed;
      _speedUnits = _$v!.speedUnits;
      _popupPeriod = _$v!.popupPeriod;
      _popupDuration = _$v!.popupDuration;
      _flags = _$v!.flags;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(StationKeepingExtended other) {
    _$v = other as _$StationKeepingExtended;
  }

  @override
  void update(void Function(StationKeepingExtendedBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  StationKeepingExtended build() {
    final result = _$v ??
        _$StationKeepingExtended._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            lat: lat,
            lon: lon,
            z: z,
            zUnits: zUnits,
            radius: radius,
            duration: duration,
            speed: speed,
            speedUnits: speedUnits,
            popupPeriod: popupPeriod,
            popupDuration: popupDuration,
            flags: flags,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Maneuver Done immutable class
///
class _$ManeuverDone extends ManeuverDone {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  factory _$ManeuverDone([void Function(ManeuverDoneBuilder b)? updates]) =>
      (ManeuverDoneBuilder()..update(updates)).build() as _$ManeuverDone;

  factory _$ManeuverDone.fromJson(core.Map<String, dynamic> json) {
    var val = ManeuverDoneBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    return val.build() as _$ManeuverDone;
  }

  _$ManeuverDone._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId})
      : super._();

  @override
  ManeuverDone rebuild(void Function(ManeuverDoneBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  ManeuverDoneBuilder toBuilder() => ManeuverDoneBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is ManeuverDone &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc($jc($jc(0, timestamp?.hashCode ?? null.hashCode), src.hashCode),
                srcEnt.hashCode),
            dst.hashCode),
        dstEnt.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('ManeuverDone')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'ManeuverDone',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
      };
}

/// Maneuver Done builder class
///
class ManeuverDoneBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<ManeuverDone, ManeuverDoneBuilder> {
  _$ManeuverDone? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  ManeuverDoneBuilder();

  ManeuverDoneBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  ManeuverDoneBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$ManeuverDone.fromJson(json);
    replace(v);
  }

  @override
  ManeuverDoneBuilder fromJson(core.Map<String, dynamic> json) =>
      ManeuverDoneBuilder.fromJson(json);

  @override
  ManeuverDoneBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      ManeuverDoneBuilder()..copyFromHeader(headerFrom);

  ManeuverDoneBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(ManeuverDone other) {
    _$v = other as _$ManeuverDone;
  }

  @override
  void update(void Function(ManeuverDoneBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  ManeuverDone build() {
    final result = _$v ??
        _$ManeuverDone._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt);
    replace(result);
    return result;
  }
}

/// Magnetometer Maneuver immutable class
///
class _$Magnetometer extends Magnetometer {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int timeout;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double z;
  @override
  final ZUnitsEnum zUnits;
  @override
  final double speed;
  @override
  final SpeedUnitsEnum speedUnits;
  @override
  final double bearing;
  @override
  final double width;
  @override
  final MagnetometerEnumDirection direction;
  @override
  final String custom;

  factory _$Magnetometer([void Function(MagnetometerBuilder b)? updates]) =>
      (MagnetometerBuilder()..update(updates)).build() as _$Magnetometer;

  factory _$Magnetometer.fromJson(core.Map<String, dynamic> json) {
    var val = MagnetometerBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.timeout = json.containsKey('timeout') ? json['timeout'] as int : 0;
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.zUnits = json.containsKey('z_units') && json['z_units'] != null
        ? ZUnitsEnum(json['z_units'] as int)
        : ZUnitsEnum(0);
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.speedUnits =
        json.containsKey('speed_units') && json['speed_units'] != null
            ? SpeedUnitsEnum(json['speed_units'] as int)
            : SpeedUnitsEnum(0);
    val.bearing = json.containsKey('bearing') ? json['bearing'] as double : 0;
    val.width = json.containsKey('width') ? json['width'] as double : 0;
    val.direction = json.containsKey('direction') && json['direction'] != null
        ? MagnetometerEnumDirection(json['direction'] as int)
        : MagnetometerEnumDirection(0);
    val.custom = json.containsKey('custom') && json['custom'] != null
        ? json['custom'] as String
        : '';

    return val.build() as _$Magnetometer;
  }

  _$Magnetometer._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.timeout,
      required this.lat,
      required this.lon,
      required this.z,
      required this.zUnits,
      required this.speed,
      required this.speedUnits,
      required this.bearing,
      required this.width,
      required this.direction,
      required this.custom})
      : super._();

  @override
  Magnetometer rebuild(void Function(MagnetometerBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  MagnetometerBuilder toBuilder() => MagnetometerBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Magnetometer &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        timeout == other.timeout &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        zUnits == other.zUnits &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        speedUnits == other.speedUnits &&
        (bearing == other.bearing || bearing - other.bearing <= 1E-7) &&
        (width == other.width || width - other.width <= 1E-7) &&
        direction == other.direction &&
        custom == other.custom;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    0,
                                                                    timestamp
                                                                            ?.hashCode ??
                                                                        null.hashCode),
                                                                src.hashCode),
                                                            srcEnt.hashCode),
                                                        dst.hashCode),
                                                    dstEnt.hashCode),
                                                timeout.hashCode),
                                            lat.hashCode),
                                        lon.hashCode),
                                    z.hashCode),
                                zUnits.hashCode),
                            speed.hashCode),
                        speedUnits.hashCode),
                    bearing.hashCode),
                width.hashCode),
            direction.hashCode),
        custom.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Magnetometer')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('timeout', '$timeout (s)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('z', '$z (m)')
          ..add('zUnits', '$zUnits (Enumerated) [${zUnits.toPrettyString()}]')
          ..add('speed', '$speed')
          ..add('speedUnits',
              '$speedUnits (Enumerated) [${speedUnits.toPrettyString()}]')
          ..add(
              'bearing', '$bearing (rad) [${bearing * 180.0 / math.pi} (deg)]')
          ..add('width', '$width (m)')
          ..add('direction',
              '$direction (Enumerated) [${direction.toPrettyString()}]')
          ..add('custom', '$custom (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Magnetometer',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'timeout': timeout,
        'lat': lat,
        'lon': lon,
        'z': z,
        'z_units': zUnits.value,
        'speed': speed,
        'speed_units': speedUnits.value,
        'bearing': bearing,
        'width': width,
        'direction': direction.value,
        'custom': custom,
      };
}

/// Magnetometer Maneuver builder class
///
class MagnetometerBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Magnetometer, MagnetometerBuilder> {
  _$Magnetometer? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _timeout = 0;
  int get timeout => _$this._timeout;
  set timeout(int timeout) => _$this._timeout = timeout;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  ZUnitsEnum _zUnits = ZUnitsEnum(0);
  ZUnitsEnum get zUnits => _$this._zUnits;
  set zUnits(ZUnitsEnum zUnits) => _$this._zUnits = zUnits;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  SpeedUnitsEnum _speedUnits = SpeedUnitsEnum(0);
  SpeedUnitsEnum get speedUnits => _$this._speedUnits;
  set speedUnits(SpeedUnitsEnum speedUnits) => _$this._speedUnits = speedUnits;

  double _bearing = 0;
  double get bearing => _$this._bearing;
  set bearing(double bearing) => _$this._bearing = bearing;

  double _width = 0;
  double get width => _$this._width;
  set width(double width) => _$this._width = width;

  MagnetometerEnumDirection _direction = MagnetometerEnumDirection(0);
  MagnetometerEnumDirection get direction => _$this._direction;
  set direction(MagnetometerEnumDirection direction) =>
      _$this._direction = direction;

  String _custom = '';
  String get custom => _$this._custom;
  set custom(String custom) => _$this._custom = custom;

  MagnetometerBuilder();

  MagnetometerBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  MagnetometerBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Magnetometer.fromJson(json);
    replace(v);
  }

  @override
  MagnetometerBuilder fromJson(core.Map<String, dynamic> json) =>
      MagnetometerBuilder.fromJson(json);

  @override
  MagnetometerBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      MagnetometerBuilder()..copyFromHeader(headerFrom);

  MagnetometerBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _timeout = _$v!.timeout;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _z = _$v!.z;
      _zUnits = _$v!.zUnits;
      _speed = _$v!.speed;
      _speedUnits = _$v!.speedUnits;
      _bearing = _$v!.bearing;
      _width = _$v!.width;
      _direction = _$v!.direction;
      _custom = _$v!.custom;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Magnetometer other) {
    _$v = other as _$Magnetometer;
  }

  @override
  void update(void Function(MagnetometerBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Magnetometer build() {
    final result = _$v ??
        _$Magnetometer._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            timeout: timeout,
            lat: lat,
            lon: lon,
            z: z,
            zUnits: zUnits,
            speed: speed,
            speedUnits: speedUnits,
            bearing: bearing,
            width: width,
            direction: direction,
            custom: custom);
    replace(result);
    return result;
  }
}

/// Vehicle State immutable class
///
class _$VehicleState extends VehicleState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final VehicleStateEnumOpMode opMode;
  @override
  final int errorCount;
  @override
  final String errorEnts;
  @override
  final int maneuverType;
  @override
  final double maneuverStime;
  @override
  final int maneuverEta;
  @override
  final CLoopsMaskBitfield controlLoops;
  @override
  final VehicleStateBitfieldFlags flags;
  @override
  final String lastError;
  @override
  final double lastErrorTime;

  factory _$VehicleState([void Function(VehicleStateBuilder b)? updates]) =>
      (VehicleStateBuilder()..update(updates)).build() as _$VehicleState;

  factory _$VehicleState.fromJson(core.Map<String, dynamic> json) {
    var val = VehicleStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.opMode = json.containsKey('op_mode') && json['op_mode'] != null
        ? VehicleStateEnumOpMode(json['op_mode'] as int)
        : VehicleStateEnumOpMode(0);
    val.errorCount =
        json.containsKey('error_count') ? json['error_count'] as int : 0;
    val.errorEnts = json.containsKey('error_ents') && json['error_ents'] != null
        ? json['error_ents'] as String
        : '';
    val.maneuverType =
        json.containsKey('maneuver_type') ? json['maneuver_type'] as int : 0;
    val.maneuverStime = json.containsKey('maneuver_stime')
        ? json['maneuver_stime'] as double
        : 0;
    val.maneuverEta =
        json.containsKey('maneuver_eta') ? json['maneuver_eta'] as int : 0;
    val.controlLoops =
        json.containsKey('control_loops') && json['control_loops'] != null
            ? CLoopsMaskBitfield(json['control_loops'] as int)
            : CLoopsMaskBitfield(0);
    val.flags = json.containsKey('flags') && json['flags'] != null
        ? VehicleStateBitfieldFlags(json['flags'] as int)
        : VehicleStateBitfieldFlags(0);
    val.lastError = json.containsKey('last_error') && json['last_error'] != null
        ? json['last_error'] as String
        : '';
    val.lastErrorTime = json.containsKey('last_error_time')
        ? json['last_error_time'] as double
        : 0;

    return val.build() as _$VehicleState;
  }

  _$VehicleState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.opMode,
      required this.errorCount,
      required this.errorEnts,
      required this.maneuverType,
      required this.maneuverStime,
      required this.maneuverEta,
      required this.controlLoops,
      required this.flags,
      required this.lastError,
      required this.lastErrorTime})
      : super._();

  @override
  VehicleState rebuild(void Function(VehicleStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  VehicleStateBuilder toBuilder() => VehicleStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is VehicleState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        opMode == other.opMode &&
        errorCount == other.errorCount &&
        errorEnts == other.errorEnts &&
        maneuverType == other.maneuverType &&
        (maneuverStime == other.maneuverStime ||
            maneuverStime - other.maneuverStime <= 1E-7) &&
        maneuverEta == other.maneuverEta &&
        controlLoops == other.controlLoops &&
        flags == other.flags &&
        lastError == other.lastError &&
        (lastErrorTime == other.lastErrorTime ||
            lastErrorTime - other.lastErrorTime <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                0,
                                                                timestamp
                                                                        ?.hashCode ??
                                                                    null.hashCode),
                                                            src.hashCode),
                                                        srcEnt.hashCode),
                                                    dst.hashCode),
                                                dstEnt.hashCode),
                                            opMode.hashCode),
                                        errorCount.hashCode),
                                    errorEnts.hashCode),
                                maneuverType.hashCode),
                            maneuverStime.hashCode),
                        maneuverEta.hashCode),
                    controlLoops.hashCode),
                flags.hashCode),
            lastError.hashCode),
        lastErrorTime.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('VehicleState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('opMode', '$opMode (Enumerated) [${opMode.toPrettyString()}]')
          ..add('errorCount', '$errorCount')
          ..add('errorEnts', errorEnts)
          ..add('maneuverType', '$maneuverType')
          ..add('maneuverStime', '$maneuverStime (s)')
          ..add('maneuverEta', '$maneuverEta (s)')
          ..add('controlLoops',
              '$controlLoops (Bitfield) [${controlLoops.toPrettyString()}]')
          ..add('flags', '$flags (Bitfield) [${flags.toPrettyString()}]')
          ..add('lastError', lastError)
          ..add('lastErrorTime', '$lastErrorTime (s)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'VehicleState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'op_mode': opMode.value,
        'error_count': errorCount,
        'error_ents': errorEnts,
        'maneuver_type': maneuverType,
        'maneuver_stime': maneuverStime,
        'maneuver_eta': maneuverEta,
        'control_loops': controlLoops.value,
        'flags': flags.value,
        'last_error': lastError,
        'last_error_time': lastErrorTime,
      };
}

/// Vehicle State builder class
///
class VehicleStateBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<VehicleState, VehicleStateBuilder> {
  _$VehicleState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  VehicleStateEnumOpMode _opMode = VehicleStateEnumOpMode(0);
  VehicleStateEnumOpMode get opMode => _$this._opMode;
  set opMode(VehicleStateEnumOpMode opMode) => _$this._opMode = opMode;

  int _errorCount = 0;
  int get errorCount => _$this._errorCount;
  set errorCount(int errorCount) => _$this._errorCount = errorCount;

  String _errorEnts = '';
  String get errorEnts => _$this._errorEnts;
  set errorEnts(String errorEnts) => _$this._errorEnts = errorEnts;

  int _maneuverType = 0;
  int get maneuverType => _$this._maneuverType;
  set maneuverType(int maneuverType) => _$this._maneuverType = maneuverType;

  double _maneuverStime = 0;
  double get maneuverStime => _$this._maneuverStime;
  set maneuverStime(double maneuverStime) =>
      _$this._maneuverStime = maneuverStime;

  int _maneuverEta = 0;
  int get maneuverEta => _$this._maneuverEta;
  set maneuverEta(int maneuverEta) => _$this._maneuverEta = maneuverEta;

  CLoopsMaskBitfield _controlLoops = CLoopsMaskBitfield(0);
  CLoopsMaskBitfield get controlLoops => _$this._controlLoops;
  set controlLoops(CLoopsMaskBitfield controlLoops) =>
      _$this._controlLoops = controlLoops;

  VehicleStateBitfieldFlags _flags = VehicleStateBitfieldFlags(0);
  VehicleStateBitfieldFlags get flags => _$this._flags;
  set flags(VehicleStateBitfieldFlags flags) => _$this._flags = flags;

  String _lastError = '';
  String get lastError => _$this._lastError;
  set lastError(String lastError) => _$this._lastError = lastError;

  double _lastErrorTime = 0;
  double get lastErrorTime => _$this._lastErrorTime;
  set lastErrorTime(double lastErrorTime) =>
      _$this._lastErrorTime = lastErrorTime;

  VehicleStateBuilder();

  VehicleStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  VehicleStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$VehicleState.fromJson(json);
    replace(v);
  }

  @override
  VehicleStateBuilder fromJson(core.Map<String, dynamic> json) =>
      VehicleStateBuilder.fromJson(json);

  @override
  VehicleStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      VehicleStateBuilder()..copyFromHeader(headerFrom);

  VehicleStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _opMode = _$v!.opMode;
      _errorCount = _$v!.errorCount;
      _errorEnts = _$v!.errorEnts;
      _maneuverType = _$v!.maneuverType;
      _maneuverStime = _$v!.maneuverStime;
      _maneuverEta = _$v!.maneuverEta;
      _controlLoops = _$v!.controlLoops;
      _flags = _$v!.flags;
      _lastError = _$v!.lastError;
      _lastErrorTime = _$v!.lastErrorTime;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(VehicleState other) {
    _$v = other as _$VehicleState;
  }

  @override
  void update(void Function(VehicleStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  VehicleState build() {
    final result = _$v ??
        _$VehicleState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            opMode: opMode,
            errorCount: errorCount,
            errorEnts: errorEnts,
            maneuverType: maneuverType,
            maneuverStime: maneuverStime,
            maneuverEta: maneuverEta,
            controlLoops: controlLoops,
            flags: flags,
            lastError: lastError,
            lastErrorTime: lastErrorTime);
    replace(result);
    return result;
  }
}

/// Vehicle Command immutable class
///
class _$VehicleCommand extends VehicleCommand {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final VehicleCommandEnumType type;
  @override
  final int requestId;
  @override
  final VehicleCommandEnumCommand command;
  @override
  final Maneuver? maneuver;
  @override
  final int calibTime;
  @override
  final String info;

  factory _$VehicleCommand([void Function(VehicleCommandBuilder b)? updates]) =>
      (VehicleCommandBuilder()..update(updates)).build() as _$VehicleCommand;

  factory _$VehicleCommand.fromJson(core.Map<String, dynamic> json) {
    var val = VehicleCommandBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.type = json.containsKey('type') && json['type'] != null
        ? VehicleCommandEnumType(json['type'] as int)
        : VehicleCommandEnumType(0);
    val.requestId =
        json.containsKey('request_id') ? json['request_id'] as int : 0;
    val.command = json.containsKey('command') && json['command'] != null
        ? VehicleCommandEnumCommand(json['command'] as int)
        : VehicleCommandEnumCommand(0);

    Maneuver? maneuver;
    if (json.containsKey('maneuver') && json['maneuver'] != null) {
      var msgJson = json['maneuver'] as core.Map<String, dynamic>;
      if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
        var msgType = msgJson['abbrev'] as String;
        var builder = messagesBuilders[msgType]?.call();
        builder = builder?.fromJson(msgJson);
        maneuver = builder?.build() as Maneuver?;
      }
    }
    val.maneuver = maneuver;
    val.calibTime =
        json.containsKey('calib_time') ? json['calib_time'] as int : 0;
    val.info = json.containsKey('info') && json['info'] != null
        ? json['info'] as String
        : '';

    return val.build() as _$VehicleCommand;
  }

  _$VehicleCommand._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.type,
      required this.requestId,
      required this.command,
      this.maneuver,
      required this.calibTime,
      required this.info})
      : super._();

  @override
  VehicleCommand rebuild(void Function(VehicleCommandBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  VehicleCommandBuilder toBuilder() => VehicleCommandBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is VehicleCommand &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        type == other.type &&
        requestId == other.requestId &&
        command == other.command &&
        maneuver == other.maneuver &&
        calibTime == other.calibTime &&
        info == other.info;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                0,
                                                timestamp?.hashCode ??
                                                    null.hashCode),
                                            src.hashCode),
                                        srcEnt.hashCode),
                                    dst.hashCode),
                                dstEnt.hashCode),
                            type.hashCode),
                        requestId.hashCode),
                    command.hashCode),
                maneuver?.hashCode ?? null.hashCode),
            calibTime.hashCode),
        info.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('VehicleCommand')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('type', '$type (Enumerated) [${type.toPrettyString()}]')
          ..add('requestId', '$requestId')
          ..add(
              'command', '$command (Enumerated) [${command.toPrettyString()}]')
          ..add('maneuver', '$maneuver')
          ..add('calibTime', '$calibTime (s)')
          ..add('info', info))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'VehicleCommand',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'type': type.value,
        'request_id': requestId,
        'command': command.value,
        'maneuver': maneuver?.toJson(false),
        'calib_time': calibTime,
        'info': info,
      };
}

/// Vehicle Command builder class
///
class VehicleCommandBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<VehicleCommand, VehicleCommandBuilder> {
  _$VehicleCommand? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  VehicleCommandEnumType _type = VehicleCommandEnumType(0);
  VehicleCommandEnumType get type => _$this._type;
  set type(VehicleCommandEnumType type) => _$this._type = type;

  int _requestId = 0;
  int get requestId => _$this._requestId;
  set requestId(int requestId) => _$this._requestId = requestId;

  VehicleCommandEnumCommand _command = VehicleCommandEnumCommand(0);
  VehicleCommandEnumCommand get command => _$this._command;
  set command(VehicleCommandEnumCommand command) => _$this._command = command;

  Maneuver? _maneuver;
  Maneuver? get maneuver => _$this._maneuver;
  set maneuver(Maneuver? maneuver) => _$this._maneuver = maneuver;

  int _calibTime = 0;
  int get calibTime => _$this._calibTime;
  set calibTime(int calibTime) => _$this._calibTime = calibTime;

  String _info = '';
  String get info => _$this._info;
  set info(String info) => _$this._info = info;

  VehicleCommandBuilder();

  VehicleCommandBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  VehicleCommandBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$VehicleCommand.fromJson(json);
    replace(v);
  }

  @override
  VehicleCommandBuilder fromJson(core.Map<String, dynamic> json) =>
      VehicleCommandBuilder.fromJson(json);

  @override
  VehicleCommandBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      VehicleCommandBuilder()..copyFromHeader(headerFrom);

  VehicleCommandBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _type = _$v!.type;
      _requestId = _$v!.requestId;
      _command = _$v!.command;
      _maneuver = _$v!.maneuver;
      _calibTime = _$v!.calibTime;
      _info = _$v!.info;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(VehicleCommand other) {
    _$v = other as _$VehicleCommand;
  }

  @override
  void update(void Function(VehicleCommandBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  VehicleCommand build() {
    final result = _$v ??
        _$VehicleCommand._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            type: type,
            requestId: requestId,
            command: command,
            maneuver: maneuver,
            calibTime: calibTime,
            info: info);
    replace(result);
    return result;
  }
}

/// Monitor Entity State immutable class
///
class _$MonitorEntityState extends MonitorEntityState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final MonitorEntityStateEnumCommand command;
  @override
  final String entities;

  factory _$MonitorEntityState(
          [void Function(MonitorEntityStateBuilder b)? updates]) =>
      (MonitorEntityStateBuilder()..update(updates)).build()
          as _$MonitorEntityState;

  factory _$MonitorEntityState.fromJson(core.Map<String, dynamic> json) {
    var val = MonitorEntityStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.command = json.containsKey('command') && json['command'] != null
        ? MonitorEntityStateEnumCommand(json['command'] as int)
        : MonitorEntityStateEnumCommand(0);
    val.entities = json.containsKey('entities') && json['entities'] != null
        ? json['entities'] as String
        : '';

    return val.build() as _$MonitorEntityState;
  }

  _$MonitorEntityState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.command,
      required this.entities})
      : super._();

  @override
  MonitorEntityState rebuild(
          void Function(MonitorEntityStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  MonitorEntityStateBuilder toBuilder() =>
      MonitorEntityStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is MonitorEntityState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        command == other.command &&
        entities == other.entities;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            command.hashCode),
        entities.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('MonitorEntityState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add(
              'command', '$command (Enumerated) [${command.toPrettyString()}]')
          ..add('entities', entities))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'MonitorEntityState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'command': command.value,
        'entities': entities,
      };
}

/// Monitor Entity State builder class
///
class MonitorEntityStateBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<MonitorEntityState, MonitorEntityStateBuilder> {
  _$MonitorEntityState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  MonitorEntityStateEnumCommand _command = MonitorEntityStateEnumCommand(0);
  MonitorEntityStateEnumCommand get command => _$this._command;
  set command(MonitorEntityStateEnumCommand command) =>
      _$this._command = command;

  String _entities = '';
  String get entities => _$this._entities;
  set entities(String entities) => _$this._entities = entities;

  MonitorEntityStateBuilder();

  MonitorEntityStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  MonitorEntityStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$MonitorEntityState.fromJson(json);
    replace(v);
  }

  @override
  MonitorEntityStateBuilder fromJson(core.Map<String, dynamic> json) =>
      MonitorEntityStateBuilder.fromJson(json);

  @override
  MonitorEntityStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      MonitorEntityStateBuilder()..copyFromHeader(headerFrom);

  MonitorEntityStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _command = _$v!.command;
      _entities = _$v!.entities;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(MonitorEntityState other) {
    _$v = other as _$MonitorEntityState;
  }

  @override
  void update(void Function(MonitorEntityStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  MonitorEntityState build() {
    final result = _$v ??
        _$MonitorEntityState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            command: command,
            entities: entities);
    replace(result);
    return result;
  }
}

/// Entity Monitoring State immutable class
///
class _$EntityMonitoringState extends EntityMonitoringState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int mcount;
  @override
  final String mnames;
  @override
  final int ecount;
  @override
  final String enames;
  @override
  final int ccount;
  @override
  final String cnames;
  @override
  final String lastError;
  @override
  final double lastErrorTime;

  factory _$EntityMonitoringState(
          [void Function(EntityMonitoringStateBuilder b)? updates]) =>
      (EntityMonitoringStateBuilder()..update(updates)).build()
          as _$EntityMonitoringState;

  factory _$EntityMonitoringState.fromJson(core.Map<String, dynamic> json) {
    var val = EntityMonitoringStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.mcount = json.containsKey('mcount') ? json['mcount'] as int : 0;
    val.mnames = json.containsKey('mnames') && json['mnames'] != null
        ? json['mnames'] as String
        : '';
    val.ecount = json.containsKey('ecount') ? json['ecount'] as int : 0;
    val.enames = json.containsKey('enames') && json['enames'] != null
        ? json['enames'] as String
        : '';
    val.ccount = json.containsKey('ccount') ? json['ccount'] as int : 0;
    val.cnames = json.containsKey('cnames') && json['cnames'] != null
        ? json['cnames'] as String
        : '';
    val.lastError = json.containsKey('last_error') && json['last_error'] != null
        ? json['last_error'] as String
        : '';
    val.lastErrorTime = json.containsKey('last_error_time')
        ? json['last_error_time'] as double
        : 0;

    return val.build() as _$EntityMonitoringState;
  }

  _$EntityMonitoringState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.mcount,
      required this.mnames,
      required this.ecount,
      required this.enames,
      required this.ccount,
      required this.cnames,
      required this.lastError,
      required this.lastErrorTime})
      : super._();

  @override
  EntityMonitoringState rebuild(
          void Function(EntityMonitoringStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  EntityMonitoringStateBuilder toBuilder() =>
      EntityMonitoringStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is EntityMonitoringState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        mcount == other.mcount &&
        mnames == other.mnames &&
        ecount == other.ecount &&
        enames == other.enames &&
        ccount == other.ccount &&
        cnames == other.cnames &&
        lastError == other.lastError &&
        (lastErrorTime == other.lastErrorTime ||
            lastErrorTime - other.lastErrorTime <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        0,
                                                        timestamp?.hashCode ??
                                                            null.hashCode),
                                                    src.hashCode),
                                                srcEnt.hashCode),
                                            dst.hashCode),
                                        dstEnt.hashCode),
                                    mcount.hashCode),
                                mnames.hashCode),
                            ecount.hashCode),
                        enames.hashCode),
                    ccount.hashCode),
                cnames.hashCode),
            lastError.hashCode),
        lastErrorTime.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('EntityMonitoringState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('mcount', '$mcount')
          ..add('mnames', mnames)
          ..add('ecount', '$ecount')
          ..add('enames', enames)
          ..add('ccount', '$ccount')
          ..add('cnames', cnames)
          ..add('lastError', lastError)
          ..add('lastErrorTime', '$lastErrorTime (s)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'EntityMonitoringState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'mcount': mcount,
        'mnames': mnames,
        'ecount': ecount,
        'enames': enames,
        'ccount': ccount,
        'cnames': cnames,
        'last_error': lastError,
        'last_error_time': lastErrorTime,
      };
}

/// Entity Monitoring State builder class
///
class EntityMonitoringStateBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<EntityMonitoringState,
            EntityMonitoringStateBuilder> {
  _$EntityMonitoringState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _mcount = 0;
  int get mcount => _$this._mcount;
  set mcount(int mcount) => _$this._mcount = mcount;

  String _mnames = '';
  String get mnames => _$this._mnames;
  set mnames(String mnames) => _$this._mnames = mnames;

  int _ecount = 0;
  int get ecount => _$this._ecount;
  set ecount(int ecount) => _$this._ecount = ecount;

  String _enames = '';
  String get enames => _$this._enames;
  set enames(String enames) => _$this._enames = enames;

  int _ccount = 0;
  int get ccount => _$this._ccount;
  set ccount(int ccount) => _$this._ccount = ccount;

  String _cnames = '';
  String get cnames => _$this._cnames;
  set cnames(String cnames) => _$this._cnames = cnames;

  String _lastError = '';
  String get lastError => _$this._lastError;
  set lastError(String lastError) => _$this._lastError = lastError;

  double _lastErrorTime = 0;
  double get lastErrorTime => _$this._lastErrorTime;
  set lastErrorTime(double lastErrorTime) =>
      _$this._lastErrorTime = lastErrorTime;

  EntityMonitoringStateBuilder();

  EntityMonitoringStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  EntityMonitoringStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$EntityMonitoringState.fromJson(json);
    replace(v);
  }

  @override
  EntityMonitoringStateBuilder fromJson(core.Map<String, dynamic> json) =>
      EntityMonitoringStateBuilder.fromJson(json);

  @override
  EntityMonitoringStateBuilder newInstance(
          [ImcBuilderHeaderPart? headerFrom]) =>
      EntityMonitoringStateBuilder()..copyFromHeader(headerFrom);

  EntityMonitoringStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _mcount = _$v!.mcount;
      _mnames = _$v!.mnames;
      _ecount = _$v!.ecount;
      _enames = _$v!.enames;
      _ccount = _$v!.ccount;
      _cnames = _$v!.cnames;
      _lastError = _$v!.lastError;
      _lastErrorTime = _$v!.lastErrorTime;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(EntityMonitoringState other) {
    _$v = other as _$EntityMonitoringState;
  }

  @override
  void update(void Function(EntityMonitoringStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  EntityMonitoringState build() {
    final result = _$v ??
        _$EntityMonitoringState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            mcount: mcount,
            mnames: mnames,
            ecount: ecount,
            enames: enames,
            ccount: ccount,
            cnames: cnames,
            lastError: lastError,
            lastErrorTime: lastErrorTime);
    replace(result);
    return result;
  }
}

/// Operational Limits immutable class
///
class _$OperationalLimits extends OperationalLimits {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final OpLimitsMaskBitfield mask;
  @override
  final double maxDepth;
  @override
  final double minAltitude;
  @override
  final double maxAltitude;
  @override
  final double minSpeed;
  @override
  final double maxSpeed;
  @override
  final double maxVrate;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double orientation;
  @override
  final double width;
  @override
  final double length;

  factory _$OperationalLimits(
          [void Function(OperationalLimitsBuilder b)? updates]) =>
      (OperationalLimitsBuilder()..update(updates)).build()
          as _$OperationalLimits;

  factory _$OperationalLimits.fromJson(core.Map<String, dynamic> json) {
    var val = OperationalLimitsBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.mask = json.containsKey('mask') && json['mask'] != null
        ? OpLimitsMaskBitfield(json['mask'] as int)
        : OpLimitsMaskBitfield(0);
    val.maxDepth =
        json.containsKey('max_depth') ? json['max_depth'] as double : 0;
    val.minAltitude =
        json.containsKey('min_altitude') ? json['min_altitude'] as double : 0;
    val.maxAltitude =
        json.containsKey('max_altitude') ? json['max_altitude'] as double : 0;
    val.minSpeed =
        json.containsKey('min_speed') ? json['min_speed'] as double : 0;
    val.maxSpeed =
        json.containsKey('max_speed') ? json['max_speed'] as double : 0;
    val.maxVrate =
        json.containsKey('max_vrate') ? json['max_vrate'] as double : 0;
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.orientation =
        json.containsKey('orientation') ? json['orientation'] as double : 0;
    val.width = json.containsKey('width') ? json['width'] as double : 0;
    val.length = json.containsKey('length') ? json['length'] as double : 0;

    return val.build() as _$OperationalLimits;
  }

  _$OperationalLimits._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.mask,
      required this.maxDepth,
      required this.minAltitude,
      required this.maxAltitude,
      required this.minSpeed,
      required this.maxSpeed,
      required this.maxVrate,
      required this.lat,
      required this.lon,
      required this.orientation,
      required this.width,
      required this.length})
      : super._();

  @override
  OperationalLimits rebuild(
          void Function(OperationalLimitsBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  OperationalLimitsBuilder toBuilder() =>
      OperationalLimitsBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is OperationalLimits &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        mask == other.mask &&
        (maxDepth == other.maxDepth || maxDepth - other.maxDepth <= 1E-7) &&
        (minAltitude == other.minAltitude ||
            minAltitude - other.minAltitude <= 1E-7) &&
        (maxAltitude == other.maxAltitude ||
            maxAltitude - other.maxAltitude <= 1E-7) &&
        (minSpeed == other.minSpeed || minSpeed - other.minSpeed <= 1E-7) &&
        (maxSpeed == other.maxSpeed || maxSpeed - other.maxSpeed <= 1E-7) &&
        (maxVrate == other.maxVrate || maxVrate - other.maxVrate <= 1E-7) &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (orientation == other.orientation ||
            orientation - other.orientation <= 1E-7) &&
        (width == other.width || width - other.width <= 1E-7) &&
        (length == other.length || length - other.length <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        0,
                                                                        timestamp?.hashCode ??
                                                                            null.hashCode),
                                                                    src.hashCode),
                                                                srcEnt.hashCode),
                                                            dst.hashCode),
                                                        dstEnt.hashCode),
                                                    mask.hashCode),
                                                maxDepth.hashCode),
                                            minAltitude.hashCode),
                                        maxAltitude.hashCode),
                                    minSpeed.hashCode),
                                maxSpeed.hashCode),
                            maxVrate.hashCode),
                        lat.hashCode),
                    lon.hashCode),
                orientation.hashCode),
            width.hashCode),
        length.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('OperationalLimits')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('mask', '$mask (Bitfield) [${mask.toPrettyString()}]')
          ..add('maxDepth', '$maxDepth (m)')
          ..add('minAltitude', '$minAltitude (m)')
          ..add('maxAltitude', '$maxAltitude (m)')
          ..add('minSpeed', '$minSpeed (m/s)')
          ..add('maxSpeed', '$maxSpeed (m/s)')
          ..add('maxVrate', '$maxVrate (m/s)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('orientation',
              '$orientation (rad) [${orientation * 180.0 / math.pi} (deg)]')
          ..add('width', '$width (m)')
          ..add('length', '$length (m)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'OperationalLimits',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'mask': mask.value,
        'max_depth': maxDepth,
        'min_altitude': minAltitude,
        'max_altitude': maxAltitude,
        'min_speed': minSpeed,
        'max_speed': maxSpeed,
        'max_vrate': maxVrate,
        'lat': lat,
        'lon': lon,
        'orientation': orientation,
        'width': width,
        'length': length,
      };
}

/// Operational Limits builder class
///
class OperationalLimitsBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<OperationalLimits, OperationalLimitsBuilder> {
  _$OperationalLimits? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  OpLimitsMaskBitfield _mask = OpLimitsMaskBitfield(0);
  OpLimitsMaskBitfield get mask => _$this._mask;
  set mask(OpLimitsMaskBitfield mask) => _$this._mask = mask;

  double _maxDepth = 0;
  double get maxDepth => _$this._maxDepth;
  set maxDepth(double maxDepth) => _$this._maxDepth = maxDepth;

  double _minAltitude = 0;
  double get minAltitude => _$this._minAltitude;
  set minAltitude(double minAltitude) => _$this._minAltitude = minAltitude;

  double _maxAltitude = 0;
  double get maxAltitude => _$this._maxAltitude;
  set maxAltitude(double maxAltitude) => _$this._maxAltitude = maxAltitude;

  double _minSpeed = 0;
  double get minSpeed => _$this._minSpeed;
  set minSpeed(double minSpeed) => _$this._minSpeed = minSpeed;

  double _maxSpeed = 0;
  double get maxSpeed => _$this._maxSpeed;
  set maxSpeed(double maxSpeed) => _$this._maxSpeed = maxSpeed;

  double _maxVrate = 0;
  double get maxVrate => _$this._maxVrate;
  set maxVrate(double maxVrate) => _$this._maxVrate = maxVrate;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _orientation = 0;
  double get orientation => _$this._orientation;
  set orientation(double orientation) => _$this._orientation = orientation;

  double _width = 0;
  double get width => _$this._width;
  set width(double width) => _$this._width = width;

  double _length = 0;
  double get length => _$this._length;
  set length(double length) => _$this._length = length;

  OperationalLimitsBuilder();

  OperationalLimitsBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  OperationalLimitsBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$OperationalLimits.fromJson(json);
    replace(v);
  }

  @override
  OperationalLimitsBuilder fromJson(core.Map<String, dynamic> json) =>
      OperationalLimitsBuilder.fromJson(json);

  @override
  OperationalLimitsBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      OperationalLimitsBuilder()..copyFromHeader(headerFrom);

  OperationalLimitsBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _mask = _$v!.mask;
      _maxDepth = _$v!.maxDepth;
      _minAltitude = _$v!.minAltitude;
      _maxAltitude = _$v!.maxAltitude;
      _minSpeed = _$v!.minSpeed;
      _maxSpeed = _$v!.maxSpeed;
      _maxVrate = _$v!.maxVrate;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _orientation = _$v!.orientation;
      _width = _$v!.width;
      _length = _$v!.length;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(OperationalLimits other) {
    _$v = other as _$OperationalLimits;
  }

  @override
  void update(void Function(OperationalLimitsBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  OperationalLimits build() {
    final result = _$v ??
        _$OperationalLimits._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            mask: mask,
            maxDepth: maxDepth,
            minAltitude: minAltitude,
            maxAltitude: maxAltitude,
            minSpeed: minSpeed,
            maxSpeed: maxSpeed,
            maxVrate: maxVrate,
            lat: lat,
            lon: lon,
            orientation: orientation,
            width: width,
            length: length);
    replace(result);
    return result;
  }
}

/// Get Operational Limits immutable class
///
class _$GetOperationalLimits extends GetOperationalLimits {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  factory _$GetOperationalLimits(
          [void Function(GetOperationalLimitsBuilder b)? updates]) =>
      (GetOperationalLimitsBuilder()..update(updates)).build()
          as _$GetOperationalLimits;

  factory _$GetOperationalLimits.fromJson(core.Map<String, dynamic> json) {
    var val = GetOperationalLimitsBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    return val.build() as _$GetOperationalLimits;
  }

  _$GetOperationalLimits._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId})
      : super._();

  @override
  GetOperationalLimits rebuild(
          void Function(GetOperationalLimitsBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GetOperationalLimitsBuilder toBuilder() =>
      GetOperationalLimitsBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GetOperationalLimits &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc($jc($jc(0, timestamp?.hashCode ?? null.hashCode), src.hashCode),
                srcEnt.hashCode),
            dst.hashCode),
        dstEnt.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GetOperationalLimits')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'GetOperationalLimits',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
      };
}

/// Get Operational Limits builder class
///
class GetOperationalLimitsBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<GetOperationalLimits,
            GetOperationalLimitsBuilder> {
  _$GetOperationalLimits? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  GetOperationalLimitsBuilder();

  GetOperationalLimitsBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  GetOperationalLimitsBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$GetOperationalLimits.fromJson(json);
    replace(v);
  }

  @override
  GetOperationalLimitsBuilder fromJson(core.Map<String, dynamic> json) =>
      GetOperationalLimitsBuilder.fromJson(json);

  @override
  GetOperationalLimitsBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      GetOperationalLimitsBuilder()..copyFromHeader(headerFrom);

  GetOperationalLimitsBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GetOperationalLimits other) {
    _$v = other as _$GetOperationalLimits;
  }

  @override
  void update(void Function(GetOperationalLimitsBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GetOperationalLimits build() {
    final result = _$v ??
        _$GetOperationalLimits._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt);
    replace(result);
    return result;
  }
}

/// Calibration immutable class
///
class _$Calibration extends Calibration {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int duration;

  factory _$Calibration([void Function(CalibrationBuilder b)? updates]) =>
      (CalibrationBuilder()..update(updates)).build() as _$Calibration;

  factory _$Calibration.fromJson(core.Map<String, dynamic> json) {
    var val = CalibrationBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.duration = json.containsKey('duration') ? json['duration'] as int : 0;

    return val.build() as _$Calibration;
  }

  _$Calibration._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.duration})
      : super._();

  @override
  Calibration rebuild(void Function(CalibrationBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  CalibrationBuilder toBuilder() => CalibrationBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Calibration &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        duration == other.duration;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        duration.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Calibration')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('duration', '$duration (s)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Calibration',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'duration': duration,
      };
}

/// Calibration builder class
///
class CalibrationBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Calibration, CalibrationBuilder> {
  _$Calibration? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _duration = 0;
  int get duration => _$this._duration;
  set duration(int duration) => _$this._duration = duration;

  CalibrationBuilder();

  CalibrationBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  CalibrationBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Calibration.fromJson(json);
    replace(v);
  }

  @override
  CalibrationBuilder fromJson(core.Map<String, dynamic> json) =>
      CalibrationBuilder.fromJson(json);

  @override
  CalibrationBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      CalibrationBuilder()..copyFromHeader(headerFrom);

  CalibrationBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _duration = _$v!.duration;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Calibration other) {
    _$v = other as _$Calibration;
  }

  @override
  void update(void Function(CalibrationBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Calibration build() {
    final result = _$v ??
        _$Calibration._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            duration: duration);
    replace(result);
    return result;
  }
}

/// Control Loops immutable class
///
class _$ControlLoops extends ControlLoops {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final ControlLoopsEnumEnable enable;
  @override
  final CLoopsMaskBitfield mask;
  @override
  final int scopeRef;

  factory _$ControlLoops([void Function(ControlLoopsBuilder b)? updates]) =>
      (ControlLoopsBuilder()..update(updates)).build() as _$ControlLoops;

  factory _$ControlLoops.fromJson(core.Map<String, dynamic> json) {
    var val = ControlLoopsBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.enable = json.containsKey('enable') && json['enable'] != null
        ? ControlLoopsEnumEnable(json['enable'] as int)
        : ControlLoopsEnumEnable(0);
    val.mask = json.containsKey('mask') && json['mask'] != null
        ? CLoopsMaskBitfield(json['mask'] as int)
        : CLoopsMaskBitfield(0);
    val.scopeRef = json.containsKey('scope_ref') ? json['scope_ref'] as int : 0;

    return val.build() as _$ControlLoops;
  }

  _$ControlLoops._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.enable,
      required this.mask,
      required this.scopeRef})
      : super._();

  @override
  ControlLoops rebuild(void Function(ControlLoopsBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  ControlLoopsBuilder toBuilder() => ControlLoopsBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is ControlLoops &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        enable == other.enable &&
        mask == other.mask &&
        scopeRef == other.scopeRef;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                enable.hashCode),
            mask.hashCode),
        scopeRef.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('ControlLoops')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('enable', '$enable (Enumerated) [${enable.toPrettyString()}]')
          ..add('mask', '$mask (Bitfield) [${mask.toPrettyString()}]')
          ..add('scopeRef', '$scopeRef'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'ControlLoops',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'enable': enable.value,
        'mask': mask.value,
        'scope_ref': scopeRef,
      };
}

/// Control Loops builder class
///
class ControlLoopsBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<ControlLoops, ControlLoopsBuilder> {
  _$ControlLoops? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  ControlLoopsEnumEnable _enable = ControlLoopsEnumEnable(0);
  ControlLoopsEnumEnable get enable => _$this._enable;
  set enable(ControlLoopsEnumEnable enable) => _$this._enable = enable;

  CLoopsMaskBitfield _mask = CLoopsMaskBitfield(0);
  CLoopsMaskBitfield get mask => _$this._mask;
  set mask(CLoopsMaskBitfield mask) => _$this._mask = mask;

  int _scopeRef = 0;
  int get scopeRef => _$this._scopeRef;
  set scopeRef(int scopeRef) => _$this._scopeRef = scopeRef;

  ControlLoopsBuilder();

  ControlLoopsBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  ControlLoopsBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$ControlLoops.fromJson(json);
    replace(v);
  }

  @override
  ControlLoopsBuilder fromJson(core.Map<String, dynamic> json) =>
      ControlLoopsBuilder.fromJson(json);

  @override
  ControlLoopsBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      ControlLoopsBuilder()..copyFromHeader(headerFrom);

  ControlLoopsBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _enable = _$v!.enable;
      _mask = _$v!.mask;
      _scopeRef = _$v!.scopeRef;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(ControlLoops other) {
    _$v = other as _$ControlLoops;
  }

  @override
  void update(void Function(ControlLoopsBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  ControlLoops build() {
    final result = _$v ??
        _$ControlLoops._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            enable: enable,
            mask: mask,
            scopeRef: scopeRef);
    replace(result);
    return result;
  }
}

/// Vehicle Medium immutable class
///
class _$VehicleMedium extends VehicleMedium {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final VehicleMediumEnumMedium medium;

  factory _$VehicleMedium([void Function(VehicleMediumBuilder b)? updates]) =>
      (VehicleMediumBuilder()..update(updates)).build() as _$VehicleMedium;

  factory _$VehicleMedium.fromJson(core.Map<String, dynamic> json) {
    var val = VehicleMediumBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.medium = json.containsKey('medium') && json['medium'] != null
        ? VehicleMediumEnumMedium(json['medium'] as int)
        : VehicleMediumEnumMedium(0);

    return val.build() as _$VehicleMedium;
  }

  _$VehicleMedium._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.medium})
      : super._();

  @override
  VehicleMedium rebuild(void Function(VehicleMediumBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  VehicleMediumBuilder toBuilder() => VehicleMediumBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is VehicleMedium &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        medium == other.medium;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        medium.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('VehicleMedium')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('medium', '$medium (Enumerated) [${medium.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'VehicleMedium',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'medium': medium.value,
      };
}

/// Vehicle Medium builder class
///
class VehicleMediumBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<VehicleMedium, VehicleMediumBuilder> {
  _$VehicleMedium? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  VehicleMediumEnumMedium _medium = VehicleMediumEnumMedium(0);
  VehicleMediumEnumMedium get medium => _$this._medium;
  set medium(VehicleMediumEnumMedium medium) => _$this._medium = medium;

  VehicleMediumBuilder();

  VehicleMediumBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  VehicleMediumBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$VehicleMedium.fromJson(json);
    replace(v);
  }

  @override
  VehicleMediumBuilder fromJson(core.Map<String, dynamic> json) =>
      VehicleMediumBuilder.fromJson(json);

  @override
  VehicleMediumBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      VehicleMediumBuilder()..copyFromHeader(headerFrom);

  VehicleMediumBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _medium = _$v!.medium;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(VehicleMedium other) {
    _$v = other as _$VehicleMedium;
  }

  @override
  void update(void Function(VehicleMediumBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  VehicleMedium build() {
    final result = _$v ??
        _$VehicleMedium._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            medium: medium);
    replace(result);
    return result;
  }
}

/// Collision immutable class
///
class _$Collision extends Collision {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;
  @override
  final CollisionBitfieldType type;

  factory _$Collision([void Function(CollisionBuilder b)? updates]) =>
      (CollisionBuilder()..update(updates)).build() as _$Collision;

  factory _$Collision.fromJson(core.Map<String, dynamic> json) {
    var val = CollisionBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;
    val.type = json.containsKey('type') && json['type'] != null
        ? CollisionBitfieldType(json['type'] as int)
        : CollisionBitfieldType(0);

    return val.build() as _$Collision;
  }

  _$Collision._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value,
      required this.type})
      : super._();

  @override
  Collision rebuild(void Function(CollisionBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  CollisionBuilder toBuilder() => CollisionBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Collision &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7) &&
        type == other.type;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            value.hashCode),
        type.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Collision')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (m/s/s)')
          ..add('type', '$type (Bitfield) [${type.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Collision',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
        'type': type.value,
      };
}

/// Collision builder class
///
class CollisionBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Collision, CollisionBuilder> {
  _$Collision? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  CollisionBitfieldType _type = CollisionBitfieldType(0);
  CollisionBitfieldType get type => _$this._type;
  set type(CollisionBitfieldType type) => _$this._type = type;

  CollisionBuilder();

  CollisionBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  CollisionBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Collision.fromJson(json);
    replace(v);
  }

  @override
  CollisionBuilder fromJson(core.Map<String, dynamic> json) =>
      CollisionBuilder.fromJson(json);

  @override
  CollisionBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      CollisionBuilder()..copyFromHeader(headerFrom);

  CollisionBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _type = _$v!.type;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Collision other) {
    _$v = other as _$Collision;
  }

  @override
  void update(void Function(CollisionBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Collision build() {
    final result = _$v ??
        _$Collision._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value,
            type: type);
    replace(result);
    return result;
  }
}

/// Formation Tracking State immutable class
///
class _$FormState extends FormState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double posSimErr;
  @override
  final double converg;
  @override
  final double turbulence;
  @override
  final FormStateEnumPosSimMon posSimMon;
  @override
  final FormStateEnumCommMon commMon;
  @override
  final FormStateEnumConvergMon convergMon;

  factory _$FormState([void Function(FormStateBuilder b)? updates]) =>
      (FormStateBuilder()..update(updates)).build() as _$FormState;

  factory _$FormState.fromJson(core.Map<String, dynamic> json) {
    var val = FormStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.posSimErr =
        json.containsKey('PosSimErr') ? json['PosSimErr'] as double : 0;
    val.converg = json.containsKey('Converg') ? json['Converg'] as double : 0;
    val.turbulence =
        json.containsKey('Turbulence') ? json['Turbulence'] as double : 0;
    val.posSimMon = json.containsKey('PosSimMon') && json['PosSimMon'] != null
        ? FormStateEnumPosSimMon(json['PosSimMon'] as int)
        : FormStateEnumPosSimMon(0);
    val.commMon = json.containsKey('CommMon') && json['CommMon'] != null
        ? FormStateEnumCommMon(json['CommMon'] as int)
        : FormStateEnumCommMon(0);
    val.convergMon =
        json.containsKey('ConvergMon') && json['ConvergMon'] != null
            ? FormStateEnumConvergMon(json['ConvergMon'] as int)
            : FormStateEnumConvergMon(0);

    return val.build() as _$FormState;
  }

  _$FormState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.posSimErr,
      required this.converg,
      required this.turbulence,
      required this.posSimMon,
      required this.commMon,
      required this.convergMon})
      : super._();

  @override
  FormState rebuild(void Function(FormStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  FormStateBuilder toBuilder() => FormStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is FormState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (posSimErr == other.posSimErr || posSimErr - other.posSimErr <= 1E-7) &&
        (converg == other.converg || converg - other.converg <= 1E-7) &&
        (turbulence == other.turbulence ||
            turbulence - other.turbulence <= 1E-7) &&
        posSimMon == other.posSimMon &&
        commMon == other.commMon &&
        convergMon == other.convergMon;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                0,
                                                timestamp?.hashCode ??
                                                    null.hashCode),
                                            src.hashCode),
                                        srcEnt.hashCode),
                                    dst.hashCode),
                                dstEnt.hashCode),
                            posSimErr.hashCode),
                        converg.hashCode),
                    turbulence.hashCode),
                posSimMon.hashCode),
            commMon.hashCode),
        convergMon.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('FormState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('posSimErr', '$posSimErr (m)')
          ..add('converg', '$converg (m)')
          ..add('turbulence', '$turbulence (m/s/s)')
          ..add('posSimMon',
              '$posSimMon (Enumerated) [${posSimMon.toPrettyString()}]')
          ..add(
              'commMon', '$commMon (Enumerated) [${commMon.toPrettyString()}]')
          ..add('convergMon',
              '$convergMon (Enumerated) [${convergMon.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'FormState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'PosSimErr': posSimErr,
        'Converg': converg,
        'Turbulence': turbulence,
        'PosSimMon': posSimMon.value,
        'CommMon': commMon.value,
        'ConvergMon': convergMon.value,
      };
}

/// Formation Tracking State builder class
///
class FormStateBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<FormState, FormStateBuilder> {
  _$FormState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _posSimErr = 0;
  double get posSimErr => _$this._posSimErr;
  set posSimErr(double posSimErr) => _$this._posSimErr = posSimErr;

  double _converg = 0;
  double get converg => _$this._converg;
  set converg(double converg) => _$this._converg = converg;

  double _turbulence = 0;
  double get turbulence => _$this._turbulence;
  set turbulence(double turbulence) => _$this._turbulence = turbulence;

  FormStateEnumPosSimMon _posSimMon = FormStateEnumPosSimMon(0);
  FormStateEnumPosSimMon get posSimMon => _$this._posSimMon;
  set posSimMon(FormStateEnumPosSimMon posSimMon) =>
      _$this._posSimMon = posSimMon;

  FormStateEnumCommMon _commMon = FormStateEnumCommMon(0);
  FormStateEnumCommMon get commMon => _$this._commMon;
  set commMon(FormStateEnumCommMon commMon) => _$this._commMon = commMon;

  FormStateEnumConvergMon _convergMon = FormStateEnumConvergMon(0);
  FormStateEnumConvergMon get convergMon => _$this._convergMon;
  set convergMon(FormStateEnumConvergMon convergMon) =>
      _$this._convergMon = convergMon;

  FormStateBuilder();

  FormStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  FormStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$FormState.fromJson(json);
    replace(v);
  }

  @override
  FormStateBuilder fromJson(core.Map<String, dynamic> json) =>
      FormStateBuilder.fromJson(json);

  @override
  FormStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      FormStateBuilder()..copyFromHeader(headerFrom);

  FormStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _posSimErr = _$v!.posSimErr;
      _converg = _$v!.converg;
      _turbulence = _$v!.turbulence;
      _posSimMon = _$v!.posSimMon;
      _commMon = _$v!.commMon;
      _convergMon = _$v!.convergMon;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(FormState other) {
    _$v = other as _$FormState;
  }

  @override
  void update(void Function(FormStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  FormState build() {
    final result = _$v ??
        _$FormState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            posSimErr: posSimErr,
            converg: converg,
            turbulence: turbulence,
            posSimMon: posSimMon,
            commMon: commMon,
            convergMon: convergMon);
    replace(result);
    return result;
  }
}

/// Autopilot Mode immutable class
///
class _$AutopilotMode extends AutopilotMode {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final AutopilotModeEnumAutonomy autonomy;
  @override
  final String mode;

  factory _$AutopilotMode([void Function(AutopilotModeBuilder b)? updates]) =>
      (AutopilotModeBuilder()..update(updates)).build() as _$AutopilotMode;

  factory _$AutopilotMode.fromJson(core.Map<String, dynamic> json) {
    var val = AutopilotModeBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.autonomy = json.containsKey('autonomy') && json['autonomy'] != null
        ? AutopilotModeEnumAutonomy(json['autonomy'] as int)
        : AutopilotModeEnumAutonomy(0);
    val.mode = json.containsKey('mode') && json['mode'] != null
        ? json['mode'] as String
        : '';

    return val.build() as _$AutopilotMode;
  }

  _$AutopilotMode._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.autonomy,
      required this.mode})
      : super._();

  @override
  AutopilotMode rebuild(void Function(AutopilotModeBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  AutopilotModeBuilder toBuilder() => AutopilotModeBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is AutopilotMode &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        autonomy == other.autonomy &&
        mode == other.mode;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            autonomy.hashCode),
        mode.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('AutopilotMode')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('autonomy',
              '$autonomy (Enumerated) [${autonomy.toPrettyString()}]')
          ..add('mode', mode))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'AutopilotMode',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'autonomy': autonomy.value,
        'mode': mode,
      };
}

/// Autopilot Mode builder class
///
class AutopilotModeBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<AutopilotMode, AutopilotModeBuilder> {
  _$AutopilotMode? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  AutopilotModeEnumAutonomy _autonomy = AutopilotModeEnumAutonomy(0);
  AutopilotModeEnumAutonomy get autonomy => _$this._autonomy;
  set autonomy(AutopilotModeEnumAutonomy autonomy) =>
      _$this._autonomy = autonomy;

  String _mode = '';
  String get mode => _$this._mode;
  set mode(String mode) => _$this._mode = mode;

  AutopilotModeBuilder();

  AutopilotModeBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  AutopilotModeBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$AutopilotMode.fromJson(json);
    replace(v);
  }

  @override
  AutopilotModeBuilder fromJson(core.Map<String, dynamic> json) =>
      AutopilotModeBuilder.fromJson(json);

  @override
  AutopilotModeBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      AutopilotModeBuilder()..copyFromHeader(headerFrom);

  AutopilotModeBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _autonomy = _$v!.autonomy;
      _mode = _$v!.mode;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(AutopilotMode other) {
    _$v = other as _$AutopilotMode;
  }

  @override
  void update(void Function(AutopilotModeBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  AutopilotMode build() {
    final result = _$v ??
        _$AutopilotMode._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            autonomy: autonomy,
            mode: mode);
    replace(result);
    return result;
  }
}

/// Formation Tracking State immutable class
///
class _$FormationState extends FormationState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final FormationStateEnumType type;
  @override
  final FormationStateEnumOp op;
  @override
  final double posSimErr;
  @override
  final double converg;
  @override
  final double turbulence;
  @override
  final FormationStateEnumPosSimMon posSimMon;
  @override
  final FormationStateEnumCommMon commMon;
  @override
  final FormationStateEnumConvergMon convergMon;

  factory _$FormationState([void Function(FormationStateBuilder b)? updates]) =>
      (FormationStateBuilder()..update(updates)).build() as _$FormationState;

  factory _$FormationState.fromJson(core.Map<String, dynamic> json) {
    var val = FormationStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.type = json.containsKey('type') && json['type'] != null
        ? FormationStateEnumType(json['type'] as int)
        : FormationStateEnumType(0);
    val.op = json.containsKey('op') && json['op'] != null
        ? FormationStateEnumOp(json['op'] as int)
        : FormationStateEnumOp(0);
    val.posSimErr =
        json.containsKey('PosSimErr') ? json['PosSimErr'] as double : 0;
    val.converg = json.containsKey('Converg') ? json['Converg'] as double : 0;
    val.turbulence =
        json.containsKey('Turbulence') ? json['Turbulence'] as double : 0;
    val.posSimMon = json.containsKey('PosSimMon') && json['PosSimMon'] != null
        ? FormationStateEnumPosSimMon(json['PosSimMon'] as int)
        : FormationStateEnumPosSimMon(0);
    val.commMon = json.containsKey('CommMon') && json['CommMon'] != null
        ? FormationStateEnumCommMon(json['CommMon'] as int)
        : FormationStateEnumCommMon(0);
    val.convergMon =
        json.containsKey('ConvergMon') && json['ConvergMon'] != null
            ? FormationStateEnumConvergMon(json['ConvergMon'] as int)
            : FormationStateEnumConvergMon(0);

    return val.build() as _$FormationState;
  }

  _$FormationState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.type,
      required this.op,
      required this.posSimErr,
      required this.converg,
      required this.turbulence,
      required this.posSimMon,
      required this.commMon,
      required this.convergMon})
      : super._();

  @override
  FormationState rebuild(void Function(FormationStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  FormationStateBuilder toBuilder() => FormationStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is FormationState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        type == other.type &&
        op == other.op &&
        (posSimErr == other.posSimErr || posSimErr - other.posSimErr <= 1E-7) &&
        (converg == other.converg || converg - other.converg <= 1E-7) &&
        (turbulence == other.turbulence ||
            turbulence - other.turbulence <= 1E-7) &&
        posSimMon == other.posSimMon &&
        commMon == other.commMon &&
        convergMon == other.convergMon;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        0,
                                                        timestamp?.hashCode ??
                                                            null.hashCode),
                                                    src.hashCode),
                                                srcEnt.hashCode),
                                            dst.hashCode),
                                        dstEnt.hashCode),
                                    type.hashCode),
                                op.hashCode),
                            posSimErr.hashCode),
                        converg.hashCode),
                    turbulence.hashCode),
                posSimMon.hashCode),
            commMon.hashCode),
        convergMon.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('FormationState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('type', '$type (Enumerated) [${type.toPrettyString()}]')
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]')
          ..add('posSimErr', '$posSimErr (m)')
          ..add('converg', '$converg (m)')
          ..add('turbulence', '$turbulence (m/s/s)')
          ..add('posSimMon',
              '$posSimMon (Enumerated) [${posSimMon.toPrettyString()}]')
          ..add(
              'commMon', '$commMon (Enumerated) [${commMon.toPrettyString()}]')
          ..add('convergMon',
              '$convergMon (Enumerated) [${convergMon.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'FormationState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'type': type.value,
        'op': op.value,
        'PosSimErr': posSimErr,
        'Converg': converg,
        'Turbulence': turbulence,
        'PosSimMon': posSimMon.value,
        'CommMon': commMon.value,
        'ConvergMon': convergMon.value,
      };
}

/// Formation Tracking State builder class
///
class FormationStateBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<FormationState, FormationStateBuilder> {
  _$FormationState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  FormationStateEnumType _type = FormationStateEnumType(0);
  FormationStateEnumType get type => _$this._type;
  set type(FormationStateEnumType type) => _$this._type = type;

  FormationStateEnumOp _op = FormationStateEnumOp(0);
  FormationStateEnumOp get op => _$this._op;
  set op(FormationStateEnumOp op) => _$this._op = op;

  double _posSimErr = 0;
  double get posSimErr => _$this._posSimErr;
  set posSimErr(double posSimErr) => _$this._posSimErr = posSimErr;

  double _converg = 0;
  double get converg => _$this._converg;
  set converg(double converg) => _$this._converg = converg;

  double _turbulence = 0;
  double get turbulence => _$this._turbulence;
  set turbulence(double turbulence) => _$this._turbulence = turbulence;

  FormationStateEnumPosSimMon _posSimMon = FormationStateEnumPosSimMon(0);
  FormationStateEnumPosSimMon get posSimMon => _$this._posSimMon;
  set posSimMon(FormationStateEnumPosSimMon posSimMon) =>
      _$this._posSimMon = posSimMon;

  FormationStateEnumCommMon _commMon = FormationStateEnumCommMon(0);
  FormationStateEnumCommMon get commMon => _$this._commMon;
  set commMon(FormationStateEnumCommMon commMon) => _$this._commMon = commMon;

  FormationStateEnumConvergMon _convergMon = FormationStateEnumConvergMon(0);
  FormationStateEnumConvergMon get convergMon => _$this._convergMon;
  set convergMon(FormationStateEnumConvergMon convergMon) =>
      _$this._convergMon = convergMon;

  FormationStateBuilder();

  FormationStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  FormationStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$FormationState.fromJson(json);
    replace(v);
  }

  @override
  FormationStateBuilder fromJson(core.Map<String, dynamic> json) =>
      FormationStateBuilder.fromJson(json);

  @override
  FormationStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      FormationStateBuilder()..copyFromHeader(headerFrom);

  FormationStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _type = _$v!.type;
      _op = _$v!.op;
      _posSimErr = _$v!.posSimErr;
      _converg = _$v!.converg;
      _turbulence = _$v!.turbulence;
      _posSimMon = _$v!.posSimMon;
      _commMon = _$v!.commMon;
      _convergMon = _$v!.convergMon;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(FormationState other) {
    _$v = other as _$FormationState;
  }

  @override
  void update(void Function(FormationStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  FormationState build() {
    final result = _$v ??
        _$FormationState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            type: type,
            op: op,
            posSimErr: posSimErr,
            converg: converg,
            turbulence: turbulence,
            posSimMon: posSimMon,
            commMon: commMon,
            convergMon: convergMon);
    replace(result);
    return result;
  }
}

/// Report Control immutable class
///
class _$ReportControl extends ReportControl {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final ReportControlEnumOp op;
  @override
  final ReportControlBitfieldCommInterface commInterface;
  @override
  final int period;
  @override
  final String sysDst;

  factory _$ReportControl([void Function(ReportControlBuilder b)? updates]) =>
      (ReportControlBuilder()..update(updates)).build() as _$ReportControl;

  factory _$ReportControl.fromJson(core.Map<String, dynamic> json) {
    var val = ReportControlBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.op = json.containsKey('op') && json['op'] != null
        ? ReportControlEnumOp(json['op'] as int)
        : ReportControlEnumOp(0);
    val.commInterface =
        json.containsKey('comm_interface') && json['comm_interface'] != null
            ? ReportControlBitfieldCommInterface(json['comm_interface'] as int)
            : ReportControlBitfieldCommInterface(0);
    val.period = json.containsKey('period') ? json['period'] as int : 0;
    val.sysDst = json.containsKey('sys_dst') && json['sys_dst'] != null
        ? json['sys_dst'] as String
        : '';

    return val.build() as _$ReportControl;
  }

  _$ReportControl._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.op,
      required this.commInterface,
      required this.period,
      required this.sysDst})
      : super._();

  @override
  ReportControl rebuild(void Function(ReportControlBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  ReportControlBuilder toBuilder() => ReportControlBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is ReportControl &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        op == other.op &&
        commInterface == other.commInterface &&
        period == other.period &&
        sysDst == other.sysDst;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    op.hashCode),
                commInterface.hashCode),
            period.hashCode),
        sysDst.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('ReportControl')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]')
          ..add('commInterface',
              '$commInterface (Bitfield) [${commInterface.toPrettyString()}]')
          ..add('period', '$period (s)')
          ..add('sysDst', sysDst))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'ReportControl',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'op': op.value,
        'comm_interface': commInterface.value,
        'period': period,
        'sys_dst': sysDst,
      };
}

/// Report Control builder class
///
class ReportControlBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<ReportControl, ReportControlBuilder> {
  _$ReportControl? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  ReportControlEnumOp _op = ReportControlEnumOp(0);
  ReportControlEnumOp get op => _$this._op;
  set op(ReportControlEnumOp op) => _$this._op = op;

  ReportControlBitfieldCommInterface _commInterface =
      ReportControlBitfieldCommInterface(0);
  ReportControlBitfieldCommInterface get commInterface => _$this._commInterface;
  set commInterface(ReportControlBitfieldCommInterface commInterface) =>
      _$this._commInterface = commInterface;

  int _period = 0;
  int get period => _$this._period;
  set period(int period) => _$this._period = period;

  String _sysDst = '';
  String get sysDst => _$this._sysDst;
  set sysDst(String sysDst) => _$this._sysDst = sysDst;

  ReportControlBuilder();

  ReportControlBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  ReportControlBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$ReportControl.fromJson(json);
    replace(v);
  }

  @override
  ReportControlBuilder fromJson(core.Map<String, dynamic> json) =>
      ReportControlBuilder.fromJson(json);

  @override
  ReportControlBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      ReportControlBuilder()..copyFromHeader(headerFrom);

  ReportControlBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _op = _$v!.op;
      _commInterface = _$v!.commInterface;
      _period = _$v!.period;
      _sysDst = _$v!.sysDst;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(ReportControl other) {
    _$v = other as _$ReportControl;
  }

  @override
  void update(void Function(ReportControlBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  ReportControl build() {
    final result = _$v ??
        _$ReportControl._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            op: op,
            commInterface: commInterface,
            period: period,
            sysDst: sysDst);
    replace(result);
    return result;
  }
}

/// State Report immutable class
///
class _$StateReport extends StateReport {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int stime;
  @override
  final double latitude;
  @override
  final double longitude;
  @override
  final int altitude;
  @override
  final int depth;
  @override
  final int heading;
  @override
  final int speed;
  @override
  final int fuel;
  @override
  final int execState;
  @override
  final int planChecksum;

  factory _$StateReport([void Function(StateReportBuilder b)? updates]) =>
      (StateReportBuilder()..update(updates)).build() as _$StateReport;

  factory _$StateReport.fromJson(core.Map<String, dynamic> json) {
    var val = StateReportBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.stime = json.containsKey('stime') ? json['stime'] as int : 0;
    val.latitude =
        json.containsKey('latitude') ? json['latitude'] as double : 0;
    val.longitude =
        json.containsKey('longitude') ? json['longitude'] as double : 0;
    val.altitude = json.containsKey('altitude') ? json['altitude'] as int : 0;
    val.depth = json.containsKey('depth') ? json['depth'] as int : 0;
    val.heading = json.containsKey('heading') ? json['heading'] as int : 0;
    val.speed = json.containsKey('speed') ? json['speed'] as int : 0;
    val.fuel = json.containsKey('fuel') ? json['fuel'] as int : 0;
    val.execState =
        json.containsKey('exec_state') ? json['exec_state'] as int : 0;
    val.planChecksum =
        json.containsKey('plan_checksum') ? json['plan_checksum'] as int : 0;

    return val.build() as _$StateReport;
  }

  _$StateReport._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.stime,
      required this.latitude,
      required this.longitude,
      required this.altitude,
      required this.depth,
      required this.heading,
      required this.speed,
      required this.fuel,
      required this.execState,
      required this.planChecksum})
      : super._();

  @override
  StateReport rebuild(void Function(StateReportBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  StateReportBuilder toBuilder() => StateReportBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is StateReport &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        stime == other.stime &&
        (latitude == other.latitude || latitude - other.latitude <= 1E-7) &&
        (longitude == other.longitude || longitude - other.longitude <= 1E-7) &&
        altitude == other.altitude &&
        depth == other.depth &&
        heading == other.heading &&
        speed == other.speed &&
        fuel == other.fuel &&
        execState == other.execState &&
        planChecksum == other.planChecksum;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                0,
                                                                timestamp
                                                                        ?.hashCode ??
                                                                    null.hashCode),
                                                            src.hashCode),
                                                        srcEnt.hashCode),
                                                    dst.hashCode),
                                                dstEnt.hashCode),
                                            stime.hashCode),
                                        latitude.hashCode),
                                    longitude.hashCode),
                                altitude.hashCode),
                            depth.hashCode),
                        heading.hashCode),
                    speed.hashCode),
                fuel.hashCode),
            execState.hashCode),
        planChecksum.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('StateReport')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('stime', '$stime (s)')
          ..add('latitude', '$latitude (°)')
          ..add('longitude', '$longitude (°)')
          ..add('altitude', '$altitude (dm)')
          ..add('depth', '$depth (dm)')
          ..add('heading', '$heading')
          ..add('speed', '$speed (cm/s)')
          ..add('fuel', '$fuel (%)')
          ..add('execState', '$execState (%)')
          ..add('planChecksum', '$planChecksum'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'StateReport',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'stime': stime,
        'latitude': latitude,
        'longitude': longitude,
        'altitude': altitude,
        'depth': depth,
        'heading': heading,
        'speed': speed,
        'fuel': fuel,
        'exec_state': execState,
        'plan_checksum': planChecksum,
      };
}

/// State Report builder class
///
class StateReportBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<StateReport, StateReportBuilder> {
  _$StateReport? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _stime = 0;
  int get stime => _$this._stime;
  set stime(int stime) => _$this._stime = stime;

  double _latitude = 0;
  double get latitude => _$this._latitude;
  set latitude(double latitude) => _$this._latitude = latitude;

  double _longitude = 0;
  double get longitude => _$this._longitude;
  set longitude(double longitude) => _$this._longitude = longitude;

  int _altitude = 0;
  int get altitude => _$this._altitude;
  set altitude(int altitude) => _$this._altitude = altitude;

  int _depth = 0;
  int get depth => _$this._depth;
  set depth(int depth) => _$this._depth = depth;

  int _heading = 0;
  int get heading => _$this._heading;
  set heading(int heading) => _$this._heading = heading;

  int _speed = 0;
  int get speed => _$this._speed;
  set speed(int speed) => _$this._speed = speed;

  int _fuel = 0;
  int get fuel => _$this._fuel;
  set fuel(int fuel) => _$this._fuel = fuel;

  int _execState = 0;
  int get execState => _$this._execState;
  set execState(int execState) => _$this._execState = execState;

  int _planChecksum = 0;
  int get planChecksum => _$this._planChecksum;
  set planChecksum(int planChecksum) => _$this._planChecksum = planChecksum;

  StateReportBuilder();

  StateReportBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  StateReportBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$StateReport.fromJson(json);
    replace(v);
  }

  @override
  StateReportBuilder fromJson(core.Map<String, dynamic> json) =>
      StateReportBuilder.fromJson(json);

  @override
  StateReportBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      StateReportBuilder()..copyFromHeader(headerFrom);

  StateReportBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _stime = _$v!.stime;
      _latitude = _$v!.latitude;
      _longitude = _$v!.longitude;
      _altitude = _$v!.altitude;
      _depth = _$v!.depth;
      _heading = _$v!.heading;
      _speed = _$v!.speed;
      _fuel = _$v!.fuel;
      _execState = _$v!.execState;
      _planChecksum = _$v!.planChecksum;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(StateReport other) {
    _$v = other as _$StateReport;
  }

  @override
  void update(void Function(StateReportBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  StateReport build() {
    final result = _$v ??
        _$StateReport._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            stime: stime,
            latitude: latitude,
            longitude: longitude,
            altitude: altitude,
            depth: depth,
            heading: heading,
            speed: speed,
            fuel: fuel,
            execState: execState,
            planChecksum: planChecksum);
    replace(result);
    return result;
  }
}

/// Transmission Request immutable class
///
class _$TransmissionRequest extends TransmissionRequest {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int reqId;
  @override
  final TransmissionRequestEnumCommMean commMean;
  @override
  final String destination;
  @override
  final double deadline;
  @override
  final double range;
  @override
  final TransmissionRequestEnumDataMode dataMode;
  @override
  final ImcMessage? msgData;
  @override
  final String txtData;
  @override
  final List<int> rawData;

  factory _$TransmissionRequest(
          [void Function(TransmissionRequestBuilder b)? updates]) =>
      (TransmissionRequestBuilder()..update(updates)).build()
          as _$TransmissionRequest;

  factory _$TransmissionRequest.fromJson(core.Map<String, dynamic> json) {
    var val = TransmissionRequestBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.reqId = json.containsKey('req_id') ? json['req_id'] as int : 0;
    val.commMean = json.containsKey('comm_mean') && json['comm_mean'] != null
        ? TransmissionRequestEnumCommMean(json['comm_mean'] as int)
        : TransmissionRequestEnumCommMean(0);
    val.destination =
        json.containsKey('destination') && json['destination'] != null
            ? json['destination'] as String
            : '';
    val.deadline =
        json.containsKey('deadline') ? json['deadline'] as double : 0;
    val.range = json.containsKey('range') ? json['range'] as double : 0;
    val.dataMode = json.containsKey('data_mode') && json['data_mode'] != null
        ? TransmissionRequestEnumDataMode(json['data_mode'] as int)
        : TransmissionRequestEnumDataMode(0);

    ImcMessage? msgData;
    if (json.containsKey('msg_data') && json['msg_data'] != null) {
      var msgJson = json['msg_data'] as core.Map<String, dynamic>;
      if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
        var msgType = msgJson['abbrev'] as String;
        var builder = messagesBuilders[msgType]?.call();
        builder = builder?.fromJson(msgJson);
        msgData = builder?.build() as ImcMessage?;
      }
    }
    val.msgData = msgData;
    val.txtData = json.containsKey('txt_data') && json['txt_data'] != null
        ? json['txt_data'] as String
        : '';
    val.rawData = json.containsKey('raw_data')
        ? base64.decode(json['raw_data'] as String)
        : <int>[];

    return val.build() as _$TransmissionRequest;
  }

  _$TransmissionRequest._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.reqId,
      required this.commMean,
      required this.destination,
      required this.deadline,
      required this.range,
      required this.dataMode,
      this.msgData,
      required this.txtData,
      required this.rawData})
      : super._();

  @override
  TransmissionRequest rebuild(
          void Function(TransmissionRequestBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  TransmissionRequestBuilder toBuilder() =>
      TransmissionRequestBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is TransmissionRequest &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        reqId == other.reqId &&
        commMean == other.commMean &&
        destination == other.destination &&
        (deadline == other.deadline || deadline - other.deadline <= 1E-7) &&
        (range == other.range || range - other.range <= 1E-7) &&
        dataMode == other.dataMode &&
        msgData == other.msgData &&
        txtData == other.txtData &&
        ListEquality().equals(rawData, other.rawData);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            0,
                                                            timestamp
                                                                    ?.hashCode ??
                                                                null.hashCode),
                                                        src.hashCode),
                                                    srcEnt.hashCode),
                                                dst.hashCode),
                                            dstEnt.hashCode),
                                        reqId.hashCode),
                                    commMean.hashCode),
                                destination.hashCode),
                            deadline.hashCode),
                        range.hashCode),
                    dataMode.hashCode),
                msgData?.hashCode ?? null.hashCode),
            txtData.hashCode),
        rawData.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('TransmissionRequest')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('reqId', '$reqId')
          ..add('commMean',
              '$commMean (Enumerated) [${commMean.toPrettyString()}]')
          ..add('destination', destination)
          ..add('deadline', '$deadline')
          ..add('range', '$range (m)')
          ..add('dataMode',
              '$dataMode (Enumerated) [${dataMode.toPrettyString()}]')
          ..add('msgData', '$msgData')
          ..add('txtData', txtData)
          ..add('rawData', '$rawData'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'TransmissionRequest',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'req_id': reqId,
        'comm_mean': commMean.value,
        'destination': destination,
        'deadline': deadline,
        'range': range,
        'data_mode': dataMode.value,
        'msg_data': msgData?.toJson(false),
        'txt_data': txtData,
        'raw_data': base64.encode(rawData),
      };
}

/// Transmission Request builder class
///
class TransmissionRequestBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<TransmissionRequest,
            TransmissionRequestBuilder> {
  _$TransmissionRequest? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _reqId = 0;
  int get reqId => _$this._reqId;
  set reqId(int reqId) => _$this._reqId = reqId;

  TransmissionRequestEnumCommMean _commMean =
      TransmissionRequestEnumCommMean(0);
  TransmissionRequestEnumCommMean get commMean => _$this._commMean;
  set commMean(TransmissionRequestEnumCommMean commMean) =>
      _$this._commMean = commMean;

  String _destination = '';
  String get destination => _$this._destination;
  set destination(String destination) => _$this._destination = destination;

  double _deadline = 0;
  double get deadline => _$this._deadline;
  set deadline(double deadline) => _$this._deadline = deadline;

  double _range = 0;
  double get range => _$this._range;
  set range(double range) => _$this._range = range;

  TransmissionRequestEnumDataMode _dataMode =
      TransmissionRequestEnumDataMode(0);
  TransmissionRequestEnumDataMode get dataMode => _$this._dataMode;
  set dataMode(TransmissionRequestEnumDataMode dataMode) =>
      _$this._dataMode = dataMode;

  ImcMessage? _msgData;
  ImcMessage? get msgData => _$this._msgData;
  set msgData(ImcMessage? msgData) => _$this._msgData = msgData;

  String _txtData = '';
  String get txtData => _$this._txtData;
  set txtData(String txtData) => _$this._txtData = txtData;

  List<int> _rawData = <int>[];
  List<int> get rawData => _$this._rawData;
  set rawData(List<int> rawData) => _$this._rawData = rawData;

  TransmissionRequestBuilder();

  TransmissionRequestBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  TransmissionRequestBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$TransmissionRequest.fromJson(json);
    replace(v);
  }

  @override
  TransmissionRequestBuilder fromJson(core.Map<String, dynamic> json) =>
      TransmissionRequestBuilder.fromJson(json);

  @override
  TransmissionRequestBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      TransmissionRequestBuilder()..copyFromHeader(headerFrom);

  TransmissionRequestBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _reqId = _$v!.reqId;
      _commMean = _$v!.commMean;
      _destination = _$v!.destination;
      _deadline = _$v!.deadline;
      _range = _$v!.range;
      _dataMode = _$v!.dataMode;
      _msgData = _$v!.msgData;
      _txtData = _$v!.txtData;
      _rawData = _$v!.rawData;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(TransmissionRequest other) {
    _$v = other as _$TransmissionRequest;
  }

  @override
  void update(void Function(TransmissionRequestBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  TransmissionRequest build() {
    final result = _$v ??
        _$TransmissionRequest._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            reqId: reqId,
            commMean: commMean,
            destination: destination,
            deadline: deadline,
            range: range,
            dataMode: dataMode,
            msgData: msgData,
            txtData: txtData,
            rawData: rawData);
    replace(result);
    return result;
  }
}

/// Transmission Status immutable class
///
class _$TransmissionStatus extends TransmissionStatus {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int reqId;
  @override
  final TransmissionStatusEnumStatus status;
  @override
  final double range;
  @override
  final String info;

  factory _$TransmissionStatus(
          [void Function(TransmissionStatusBuilder b)? updates]) =>
      (TransmissionStatusBuilder()..update(updates)).build()
          as _$TransmissionStatus;

  factory _$TransmissionStatus.fromJson(core.Map<String, dynamic> json) {
    var val = TransmissionStatusBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.reqId = json.containsKey('req_id') ? json['req_id'] as int : 0;
    val.status = json.containsKey('status') && json['status'] != null
        ? TransmissionStatusEnumStatus(json['status'] as int)
        : TransmissionStatusEnumStatus(0);
    val.range = json.containsKey('range') ? json['range'] as double : 0;
    val.info = json.containsKey('info') && json['info'] != null
        ? json['info'] as String
        : '';

    return val.build() as _$TransmissionStatus;
  }

  _$TransmissionStatus._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.reqId,
      required this.status,
      required this.range,
      required this.info})
      : super._();

  @override
  TransmissionStatus rebuild(
          void Function(TransmissionStatusBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  TransmissionStatusBuilder toBuilder() =>
      TransmissionStatusBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is TransmissionStatus &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        reqId == other.reqId &&
        status == other.status &&
        (range == other.range || range - other.range <= 1E-7) &&
        info == other.info;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    reqId.hashCode),
                status.hashCode),
            range.hashCode),
        info.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('TransmissionStatus')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('reqId', '$reqId')
          ..add('status', '$status (Enumerated) [${status.toPrettyString()}]')
          ..add('range', '$range (m)')
          ..add('info', info))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'TransmissionStatus',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'req_id': reqId,
        'status': status.value,
        'range': range,
        'info': info,
      };
}

/// Transmission Status builder class
///
class TransmissionStatusBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<TransmissionStatus, TransmissionStatusBuilder> {
  _$TransmissionStatus? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _reqId = 0;
  int get reqId => _$this._reqId;
  set reqId(int reqId) => _$this._reqId = reqId;

  TransmissionStatusEnumStatus _status = TransmissionStatusEnumStatus(0);
  TransmissionStatusEnumStatus get status => _$this._status;
  set status(TransmissionStatusEnumStatus status) => _$this._status = status;

  double _range = 0;
  double get range => _$this._range;
  set range(double range) => _$this._range = range;

  String _info = '';
  String get info => _$this._info;
  set info(String info) => _$this._info = info;

  TransmissionStatusBuilder();

  TransmissionStatusBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  TransmissionStatusBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$TransmissionStatus.fromJson(json);
    replace(v);
  }

  @override
  TransmissionStatusBuilder fromJson(core.Map<String, dynamic> json) =>
      TransmissionStatusBuilder.fromJson(json);

  @override
  TransmissionStatusBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      TransmissionStatusBuilder()..copyFromHeader(headerFrom);

  TransmissionStatusBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _reqId = _$v!.reqId;
      _status = _$v!.status;
      _range = _$v!.range;
      _info = _$v!.info;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(TransmissionStatus other) {
    _$v = other as _$TransmissionStatus;
  }

  @override
  void update(void Function(TransmissionStatusBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  TransmissionStatus build() {
    final result = _$v ??
        _$TransmissionStatus._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            reqId: reqId,
            status: status,
            range: range,
            info: info);
    replace(result);
    return result;
  }
}

/// SMS Transmission Request immutable class
///
class _$SmsRequest extends SmsRequest {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int reqId;
  @override
  final String destination;
  @override
  final double timeout;
  @override
  final String smsText;

  factory _$SmsRequest([void Function(SmsRequestBuilder b)? updates]) =>
      (SmsRequestBuilder()..update(updates)).build() as _$SmsRequest;

  factory _$SmsRequest.fromJson(core.Map<String, dynamic> json) {
    var val = SmsRequestBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.reqId = json.containsKey('req_id') ? json['req_id'] as int : 0;
    val.destination =
        json.containsKey('destination') && json['destination'] != null
            ? json['destination'] as String
            : '';
    val.timeout = json.containsKey('timeout') ? json['timeout'] as double : 0;
    val.smsText = json.containsKey('sms_text') && json['sms_text'] != null
        ? json['sms_text'] as String
        : '';

    return val.build() as _$SmsRequest;
  }

  _$SmsRequest._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.reqId,
      required this.destination,
      required this.timeout,
      required this.smsText})
      : super._();

  @override
  SmsRequest rebuild(void Function(SmsRequestBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SmsRequestBuilder toBuilder() => SmsRequestBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is SmsRequest &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        reqId == other.reqId &&
        destination == other.destination &&
        (timeout == other.timeout || timeout - other.timeout <= 1E-7) &&
        smsText == other.smsText;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    reqId.hashCode),
                destination.hashCode),
            timeout.hashCode),
        smsText.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('SmsRequest')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('reqId', '$reqId')
          ..add('destination', destination)
          ..add('timeout', '$timeout (s)')
          ..add('smsText', smsText))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'SmsRequest',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'req_id': reqId,
        'destination': destination,
        'timeout': timeout,
        'sms_text': smsText,
      };
}

/// SMS Transmission Request builder class
///
class SmsRequestBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<SmsRequest, SmsRequestBuilder> {
  _$SmsRequest? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _reqId = 0;
  int get reqId => _$this._reqId;
  set reqId(int reqId) => _$this._reqId = reqId;

  String _destination = '';
  String get destination => _$this._destination;
  set destination(String destination) => _$this._destination = destination;

  double _timeout = 0;
  double get timeout => _$this._timeout;
  set timeout(double timeout) => _$this._timeout = timeout;

  String _smsText = '';
  String get smsText => _$this._smsText;
  set smsText(String smsText) => _$this._smsText = smsText;

  SmsRequestBuilder();

  SmsRequestBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SmsRequestBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$SmsRequest.fromJson(json);
    replace(v);
  }

  @override
  SmsRequestBuilder fromJson(core.Map<String, dynamic> json) =>
      SmsRequestBuilder.fromJson(json);

  @override
  SmsRequestBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SmsRequestBuilder()..copyFromHeader(headerFrom);

  SmsRequestBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _reqId = _$v!.reqId;
      _destination = _$v!.destination;
      _timeout = _$v!.timeout;
      _smsText = _$v!.smsText;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(SmsRequest other) {
    _$v = other as _$SmsRequest;
  }

  @override
  void update(void Function(SmsRequestBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  SmsRequest build() {
    final result = _$v ??
        _$SmsRequest._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            reqId: reqId,
            destination: destination,
            timeout: timeout,
            smsText: smsText);
    replace(result);
    return result;
  }
}

/// SMS Transmission Status immutable class
///
class _$SmsStatus extends SmsStatus {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int reqId;
  @override
  final SmsStatusEnumStatus status;
  @override
  final String info;

  factory _$SmsStatus([void Function(SmsStatusBuilder b)? updates]) =>
      (SmsStatusBuilder()..update(updates)).build() as _$SmsStatus;

  factory _$SmsStatus.fromJson(core.Map<String, dynamic> json) {
    var val = SmsStatusBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.reqId = json.containsKey('req_id') ? json['req_id'] as int : 0;
    val.status = json.containsKey('status') && json['status'] != null
        ? SmsStatusEnumStatus(json['status'] as int)
        : SmsStatusEnumStatus(0);
    val.info = json.containsKey('info') && json['info'] != null
        ? json['info'] as String
        : '';

    return val.build() as _$SmsStatus;
  }

  _$SmsStatus._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.reqId,
      required this.status,
      required this.info})
      : super._();

  @override
  SmsStatus rebuild(void Function(SmsStatusBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SmsStatusBuilder toBuilder() => SmsStatusBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is SmsStatus &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        reqId == other.reqId &&
        status == other.status &&
        info == other.info;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                reqId.hashCode),
            status.hashCode),
        info.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('SmsStatus')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('reqId', '$reqId')
          ..add('status', '$status (Enumerated) [${status.toPrettyString()}]')
          ..add('info', info))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'SmsStatus',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'req_id': reqId,
        'status': status.value,
        'info': info,
      };
}

/// SMS Transmission Status builder class
///
class SmsStatusBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<SmsStatus, SmsStatusBuilder> {
  _$SmsStatus? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _reqId = 0;
  int get reqId => _$this._reqId;
  set reqId(int reqId) => _$this._reqId = reqId;

  SmsStatusEnumStatus _status = SmsStatusEnumStatus(0);
  SmsStatusEnumStatus get status => _$this._status;
  set status(SmsStatusEnumStatus status) => _$this._status = status;

  String _info = '';
  String get info => _$this._info;
  set info(String info) => _$this._info = info;

  SmsStatusBuilder();

  SmsStatusBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SmsStatusBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$SmsStatus.fromJson(json);
    replace(v);
  }

  @override
  SmsStatusBuilder fromJson(core.Map<String, dynamic> json) =>
      SmsStatusBuilder.fromJson(json);

  @override
  SmsStatusBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SmsStatusBuilder()..copyFromHeader(headerFrom);

  SmsStatusBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _reqId = _$v!.reqId;
      _status = _$v!.status;
      _info = _$v!.info;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(SmsStatus other) {
    _$v = other as _$SmsStatus;
  }

  @override
  void update(void Function(SmsStatusBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  SmsStatus build() {
    final result = _$v ??
        _$SmsStatus._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            reqId: reqId,
            status: status,
            info: info);
    replace(result);
    return result;
  }
}

/// VTOL State immutable class
///
class _$VtolState extends VtolState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final VtolStateEnumState state;

  factory _$VtolState([void Function(VtolStateBuilder b)? updates]) =>
      (VtolStateBuilder()..update(updates)).build() as _$VtolState;

  factory _$VtolState.fromJson(core.Map<String, dynamic> json) {
    var val = VtolStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.state = json.containsKey('state') && json['state'] != null
        ? VtolStateEnumState(json['state'] as int)
        : VtolStateEnumState(0);

    return val.build() as _$VtolState;
  }

  _$VtolState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.state})
      : super._();

  @override
  VtolState rebuild(void Function(VtolStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  VtolStateBuilder toBuilder() => VtolStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is VtolState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        state == other.state;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        state.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('VtolState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('state', '$state (Enumerated) [${state.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'VtolState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'state': state.value,
      };
}

/// VTOL State builder class
///
class VtolStateBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<VtolState, VtolStateBuilder> {
  _$VtolState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  VtolStateEnumState _state = VtolStateEnumState(0);
  VtolStateEnumState get state => _$this._state;
  set state(VtolStateEnumState state) => _$this._state = state;

  VtolStateBuilder();

  VtolStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  VtolStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$VtolState.fromJson(json);
    replace(v);
  }

  @override
  VtolStateBuilder fromJson(core.Map<String, dynamic> json) =>
      VtolStateBuilder.fromJson(json);

  @override
  VtolStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      VtolStateBuilder()..copyFromHeader(headerFrom);

  VtolStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _state = _$v!.state;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(VtolState other) {
    _$v = other as _$VtolState;
  }

  @override
  void update(void Function(VtolStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  VtolState build() {
    final result = _$v ??
        _$VtolState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            state: state);
    replace(result);
    return result;
  }
}

/// Arming State immutable class
///
class _$ArmingState extends ArmingState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final ArmingStateEnumState state;

  factory _$ArmingState([void Function(ArmingStateBuilder b)? updates]) =>
      (ArmingStateBuilder()..update(updates)).build() as _$ArmingState;

  factory _$ArmingState.fromJson(core.Map<String, dynamic> json) {
    var val = ArmingStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.state = json.containsKey('state') && json['state'] != null
        ? ArmingStateEnumState(json['state'] as int)
        : ArmingStateEnumState(0);

    return val.build() as _$ArmingState;
  }

  _$ArmingState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.state})
      : super._();

  @override
  ArmingState rebuild(void Function(ArmingStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  ArmingStateBuilder toBuilder() => ArmingStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is ArmingState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        state == other.state;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        state.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('ArmingState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('state', '$state (Enumerated) [${state.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'ArmingState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'state': state.value,
      };
}

/// Arming State builder class
///
class ArmingStateBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<ArmingState, ArmingStateBuilder> {
  _$ArmingState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  ArmingStateEnumState _state = ArmingStateEnumState(0);
  ArmingStateEnumState get state => _$this._state;
  set state(ArmingStateEnumState state) => _$this._state = state;

  ArmingStateBuilder();

  ArmingStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  ArmingStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$ArmingState.fromJson(json);
    replace(v);
  }

  @override
  ArmingStateBuilder fromJson(core.Map<String, dynamic> json) =>
      ArmingStateBuilder.fromJson(json);

  @override
  ArmingStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      ArmingStateBuilder()..copyFromHeader(headerFrom);

  ArmingStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _state = _$v!.state;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(ArmingState other) {
    _$v = other as _$ArmingState;
  }

  @override
  void update(void Function(ArmingStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  ArmingState build() {
    final result = _$v ??
        _$ArmingState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            state: state);
    replace(result);
    return result;
  }
}

/// TCP Transmission Request immutable class
///
class _$TCPRequest extends TCPRequest {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int reqId;
  @override
  final String destination;
  @override
  final double timeout;
  @override
  final ImcMessage? msgData;

  factory _$TCPRequest([void Function(TCPRequestBuilder b)? updates]) =>
      (TCPRequestBuilder()..update(updates)).build() as _$TCPRequest;

  factory _$TCPRequest.fromJson(core.Map<String, dynamic> json) {
    var val = TCPRequestBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.reqId = json.containsKey('req_id') ? json['req_id'] as int : 0;
    val.destination =
        json.containsKey('destination') && json['destination'] != null
            ? json['destination'] as String
            : '';
    val.timeout = json.containsKey('timeout') ? json['timeout'] as double : 0;

    ImcMessage? msgData;
    if (json.containsKey('msg_data') && json['msg_data'] != null) {
      var msgJson = json['msg_data'] as core.Map<String, dynamic>;
      if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
        var msgType = msgJson['abbrev'] as String;
        var builder = messagesBuilders[msgType]?.call();
        builder = builder?.fromJson(msgJson);
        msgData = builder?.build() as ImcMessage?;
      }
    }
    val.msgData = msgData;

    return val.build() as _$TCPRequest;
  }

  _$TCPRequest._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.reqId,
      required this.destination,
      required this.timeout,
      this.msgData})
      : super._();

  @override
  TCPRequest rebuild(void Function(TCPRequestBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  TCPRequestBuilder toBuilder() => TCPRequestBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is TCPRequest &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        reqId == other.reqId &&
        destination == other.destination &&
        (timeout == other.timeout || timeout - other.timeout <= 1E-7) &&
        msgData == other.msgData;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    reqId.hashCode),
                destination.hashCode),
            timeout.hashCode),
        msgData?.hashCode ?? null.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('TCPRequest')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('reqId', '$reqId')
          ..add('destination', destination)
          ..add('timeout', '$timeout (s)')
          ..add('msgData', '$msgData'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'TCPRequest',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'req_id': reqId,
        'destination': destination,
        'timeout': timeout,
        'msg_data': msgData?.toJson(false),
      };
}

/// TCP Transmission Request builder class
///
class TCPRequestBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<TCPRequest, TCPRequestBuilder> {
  _$TCPRequest? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _reqId = 0;
  int get reqId => _$this._reqId;
  set reqId(int reqId) => _$this._reqId = reqId;

  String _destination = '';
  String get destination => _$this._destination;
  set destination(String destination) => _$this._destination = destination;

  double _timeout = 0;
  double get timeout => _$this._timeout;
  set timeout(double timeout) => _$this._timeout = timeout;

  ImcMessage? _msgData;
  ImcMessage? get msgData => _$this._msgData;
  set msgData(ImcMessage? msgData) => _$this._msgData = msgData;

  TCPRequestBuilder();

  TCPRequestBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  TCPRequestBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$TCPRequest.fromJson(json);
    replace(v);
  }

  @override
  TCPRequestBuilder fromJson(core.Map<String, dynamic> json) =>
      TCPRequestBuilder.fromJson(json);

  @override
  TCPRequestBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      TCPRequestBuilder()..copyFromHeader(headerFrom);

  TCPRequestBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _reqId = _$v!.reqId;
      _destination = _$v!.destination;
      _timeout = _$v!.timeout;
      _msgData = _$v!.msgData;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(TCPRequest other) {
    _$v = other as _$TCPRequest;
  }

  @override
  void update(void Function(TCPRequestBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  TCPRequest build() {
    final result = _$v ??
        _$TCPRequest._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            reqId: reqId,
            destination: destination,
            timeout: timeout,
            msgData: msgData);
    replace(result);
    return result;
  }
}

/// TCP Transmission Status immutable class
///
class _$TCPStatus extends TCPStatus {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int reqId;
  @override
  final TCPStatusEnumStatus status;
  @override
  final String info;

  factory _$TCPStatus([void Function(TCPStatusBuilder b)? updates]) =>
      (TCPStatusBuilder()..update(updates)).build() as _$TCPStatus;

  factory _$TCPStatus.fromJson(core.Map<String, dynamic> json) {
    var val = TCPStatusBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.reqId = json.containsKey('req_id') ? json['req_id'] as int : 0;
    val.status = json.containsKey('status') && json['status'] != null
        ? TCPStatusEnumStatus(json['status'] as int)
        : TCPStatusEnumStatus(0);
    val.info = json.containsKey('info') && json['info'] != null
        ? json['info'] as String
        : '';

    return val.build() as _$TCPStatus;
  }

  _$TCPStatus._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.reqId,
      required this.status,
      required this.info})
      : super._();

  @override
  TCPStatus rebuild(void Function(TCPStatusBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  TCPStatusBuilder toBuilder() => TCPStatusBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is TCPStatus &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        reqId == other.reqId &&
        status == other.status &&
        info == other.info;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                reqId.hashCode),
            status.hashCode),
        info.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('TCPStatus')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('reqId', '$reqId')
          ..add('status', '$status (Enumerated) [${status.toPrettyString()}]')
          ..add('info', info))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'TCPStatus',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'req_id': reqId,
        'status': status.value,
        'info': info,
      };
}

/// TCP Transmission Status builder class
///
class TCPStatusBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<TCPStatus, TCPStatusBuilder> {
  _$TCPStatus? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _reqId = 0;
  int get reqId => _$this._reqId;
  set reqId(int reqId) => _$this._reqId = reqId;

  TCPStatusEnumStatus _status = TCPStatusEnumStatus(0);
  TCPStatusEnumStatus get status => _$this._status;
  set status(TCPStatusEnumStatus status) => _$this._status = status;

  String _info = '';
  String get info => _$this._info;
  set info(String info) => _$this._info = info;

  TCPStatusBuilder();

  TCPStatusBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  TCPStatusBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$TCPStatus.fromJson(json);
    replace(v);
  }

  @override
  TCPStatusBuilder fromJson(core.Map<String, dynamic> json) =>
      TCPStatusBuilder.fromJson(json);

  @override
  TCPStatusBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      TCPStatusBuilder()..copyFromHeader(headerFrom);

  TCPStatusBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _reqId = _$v!.reqId;
      _status = _$v!.status;
      _info = _$v!.info;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(TCPStatus other) {
    _$v = other as _$TCPStatus;
  }

  @override
  void update(void Function(TCPStatusBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  TCPStatus build() {
    final result = _$v ??
        _$TCPStatus._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            reqId: reqId,
            status: status,
            info: info);
    replace(result);
    return result;
  }
}

/// Asset Report  immutable class
///
class _$AssetReport extends AssetReport {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String name;
  @override
  final double reportTime;
  @override
  final AssetReportEnumMedium medium;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double depth;
  @override
  final double alt;
  @override
  final double sog;
  @override
  final double cog;
  @override
  final List<ImcMessage> msgs;

  factory _$AssetReport([void Function(AssetReportBuilder b)? updates]) =>
      (AssetReportBuilder()..update(updates)).build() as _$AssetReport;

  factory _$AssetReport.fromJson(core.Map<String, dynamic> json) {
    var val = AssetReportBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.name = json.containsKey('name') && json['name'] != null
        ? json['name'] as String
        : '';
    val.reportTime =
        json.containsKey('report_time') ? json['report_time'] as double : 0;
    val.medium = json.containsKey('medium') && json['medium'] != null
        ? AssetReportEnumMedium(json['medium'] as int)
        : AssetReportEnumMedium(0);
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.depth = json.containsKey('depth') ? json['depth'] as double : 0;
    val.alt = json.containsKey('alt') ? json['alt'] as double : 0;
    val.sog = json.containsKey('sog') ? json['sog'] as double : 0;
    val.cog = json.containsKey('cog') ? json['cog'] as double : 0;
    var msgs = <ImcMessage>[];
    if (json.containsKey('msgs') && json['msgs'] != null) {
      var listJson = json['msgs'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as ImcMessage?;
          if (m != null) msgs.add(m);
        }
      }
    }
    val.msgs = msgs;

    return val.build() as _$AssetReport;
  }

  _$AssetReport._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.name,
      required this.reportTime,
      required this.medium,
      required this.lat,
      required this.lon,
      required this.depth,
      required this.alt,
      required this.sog,
      required this.cog,
      required this.msgs})
      : super._();

  @override
  AssetReport rebuild(void Function(AssetReportBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  AssetReportBuilder toBuilder() => AssetReportBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is AssetReport &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        name == other.name &&
        (reportTime == other.reportTime ||
            reportTime - other.reportTime <= 1E-7) &&
        medium == other.medium &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (depth == other.depth || depth - other.depth <= 1E-7) &&
        (alt == other.alt || alt - other.alt <= 1E-7) &&
        (sog == other.sog || sog - other.sog <= 1E-7) &&
        (cog == other.cog || cog - other.cog <= 1E-7) &&
        DeepCollectionEquality().equals(msgs, other.msgs);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                0,
                                                                timestamp
                                                                        ?.hashCode ??
                                                                    null.hashCode),
                                                            src.hashCode),
                                                        srcEnt.hashCode),
                                                    dst.hashCode),
                                                dstEnt.hashCode),
                                            name.hashCode),
                                        reportTime.hashCode),
                                    medium.hashCode),
                                lat.hashCode),
                            lon.hashCode),
                        depth.hashCode),
                    alt.hashCode),
                sog.hashCode),
            cog.hashCode),
        msgs.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('AssetReport')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('name', name)
          ..add('reportTime', '$reportTime (s)')
          ..add('medium', '$medium (Enumerated) [${medium.toPrettyString()}]')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('depth', '$depth (m)')
          ..add('alt', '$alt (m)')
          ..add('sog', '$sog (m/s)')
          ..add('cog', '$cog (rad) [${cog * 180.0 / math.pi} (deg)]')
          ..add('msgs', '$msgs'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'AssetReport',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'name': name,
        'report_time': reportTime,
        'medium': medium.value,
        'lat': lat,
        'lon': lon,
        'depth': depth,
        'alt': alt,
        'sog': sog,
        'cog': cog,
        'msgs': [
          ...msgs.map((m) => m.toJson(false)),
        ],
      };
}

/// Asset Report  builder class
///
class AssetReportBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<AssetReport, AssetReportBuilder> {
  _$AssetReport? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _name = '';
  String get name => _$this._name;
  set name(String name) => _$this._name = name;

  double _reportTime = 0;
  double get reportTime => _$this._reportTime;
  set reportTime(double reportTime) => _$this._reportTime = reportTime;

  AssetReportEnumMedium _medium = AssetReportEnumMedium(0);
  AssetReportEnumMedium get medium => _$this._medium;
  set medium(AssetReportEnumMedium medium) => _$this._medium = medium;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _depth = 0;
  double get depth => _$this._depth;
  set depth(double depth) => _$this._depth = depth;

  double _alt = 0;
  double get alt => _$this._alt;
  set alt(double alt) => _$this._alt = alt;

  double _sog = 0;
  double get sog => _$this._sog;
  set sog(double sog) => _$this._sog = sog;

  double _cog = 0;
  double get cog => _$this._cog;
  set cog(double cog) => _$this._cog = cog;

  List<ImcMessage> _msgs = <ImcMessage>[];
  List<ImcMessage> get msgs => _$this._msgs;
  set msgs(List<ImcMessage> msgs) => _$this._msgs = msgs;

  AssetReportBuilder();

  AssetReportBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  AssetReportBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$AssetReport.fromJson(json);
    replace(v);
  }

  @override
  AssetReportBuilder fromJson(core.Map<String, dynamic> json) =>
      AssetReportBuilder.fromJson(json);

  @override
  AssetReportBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      AssetReportBuilder()..copyFromHeader(headerFrom);

  AssetReportBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _name = _$v!.name;
      _reportTime = _$v!.reportTime;
      _medium = _$v!.medium;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _depth = _$v!.depth;
      _alt = _$v!.alt;
      _sog = _$v!.sog;
      _cog = _$v!.cog;
      _msgs = _$v!.msgs;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(AssetReport other) {
    _$v = other as _$AssetReport;
  }

  @override
  void update(void Function(AssetReportBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  AssetReport build() {
    final result = _$v ??
        _$AssetReport._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            name: name,
            reportTime: reportTime,
            medium: medium,
            lat: lat,
            lon: lon,
            depth: depth,
            alt: alt,
            sog: sog,
            cog: cog,
            msgs: msgs);
    replace(result);
    return result;
  }
}

/// Abort immutable class
///
class _$Abort extends Abort {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  factory _$Abort([void Function(AbortBuilder b)? updates]) =>
      (AbortBuilder()..update(updates)).build() as _$Abort;

  factory _$Abort.fromJson(core.Map<String, dynamic> json) {
    var val = AbortBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    return val.build() as _$Abort;
  }

  _$Abort._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId})
      : super._();

  @override
  Abort rebuild(void Function(AbortBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  AbortBuilder toBuilder() => AbortBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Abort &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc($jc($jc(0, timestamp?.hashCode ?? null.hashCode), src.hashCode),
                srcEnt.hashCode),
            dst.hashCode),
        dstEnt.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Abort')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Abort',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
      };
}

/// Abort builder class
///
class AbortBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Abort, AbortBuilder> {
  _$Abort? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  AbortBuilder();

  AbortBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  AbortBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Abort.fromJson(json);
    replace(v);
  }

  @override
  AbortBuilder fromJson(core.Map<String, dynamic> json) =>
      AbortBuilder.fromJson(json);

  @override
  AbortBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      AbortBuilder()..copyFromHeader(headerFrom);

  AbortBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Abort other) {
    _$v = other as _$Abort;
  }

  @override
  void update(void Function(AbortBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Abort build() {
    final result = _$v ??
        _$Abort._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt);
    replace(result);
    return result;
  }
}

/// Plan Specification immutable class
///
class _$PlanSpecification extends PlanSpecification {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String planId;
  @override
  final String description;
  @override
  final String vnamespace;
  @override
  final List<PlanVariable> variables;
  @override
  final String startManId;
  @override
  final List<PlanManeuver> maneuvers;
  @override
  final List<PlanTransition> transitions;
  @override
  final List<ImcMessage> startActions;
  @override
  final List<ImcMessage> endActions;

  factory _$PlanSpecification(
          [void Function(PlanSpecificationBuilder b)? updates]) =>
      (PlanSpecificationBuilder()..update(updates)).build()
          as _$PlanSpecification;

  factory _$PlanSpecification.fromJson(core.Map<String, dynamic> json) {
    var val = PlanSpecificationBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.planId = json.containsKey('plan_id') && json['plan_id'] != null
        ? json['plan_id'] as String
        : '';
    val.description =
        json.containsKey('description') && json['description'] != null
            ? json['description'] as String
            : '';
    val.vnamespace =
        json.containsKey('vnamespace') && json['vnamespace'] != null
            ? json['vnamespace'] as String
            : '';
    var variables = <PlanVariable>[];
    if (json.containsKey('variables') && json['variables'] != null) {
      var listJson = json['variables'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as PlanVariable?;
          if (m != null) variables.add(m);
        }
      }
    }
    val.variables = variables;
    val.startManId =
        json.containsKey('start_man_id') && json['start_man_id'] != null
            ? json['start_man_id'] as String
            : '';
    var maneuvers = <PlanManeuver>[];
    if (json.containsKey('maneuvers') && json['maneuvers'] != null) {
      var listJson = json['maneuvers'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as PlanManeuver?;
          if (m != null) maneuvers.add(m);
        }
      }
    }
    val.maneuvers = maneuvers;
    var transitions = <PlanTransition>[];
    if (json.containsKey('transitions') && json['transitions'] != null) {
      var listJson = json['transitions'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as PlanTransition?;
          if (m != null) transitions.add(m);
        }
      }
    }
    val.transitions = transitions;
    var startActions = <ImcMessage>[];
    if (json.containsKey('start_actions') && json['start_actions'] != null) {
      var listJson = json['start_actions'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as ImcMessage?;
          if (m != null) startActions.add(m);
        }
      }
    }
    val.startActions = startActions;
    var endActions = <ImcMessage>[];
    if (json.containsKey('end_actions') && json['end_actions'] != null) {
      var listJson = json['end_actions'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as ImcMessage?;
          if (m != null) endActions.add(m);
        }
      }
    }
    val.endActions = endActions;

    return val.build() as _$PlanSpecification;
  }

  _$PlanSpecification._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.planId,
      required this.description,
      required this.vnamespace,
      required this.variables,
      required this.startManId,
      required this.maneuvers,
      required this.transitions,
      required this.startActions,
      required this.endActions})
      : super._();

  @override
  PlanSpecification rebuild(
          void Function(PlanSpecificationBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  PlanSpecificationBuilder toBuilder() =>
      PlanSpecificationBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is PlanSpecification &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        planId == other.planId &&
        description == other.description &&
        vnamespace == other.vnamespace &&
        DeepCollectionEquality().equals(variables, other.variables) &&
        startManId == other.startManId &&
        DeepCollectionEquality().equals(maneuvers, other.maneuvers) &&
        DeepCollectionEquality().equals(transitions, other.transitions) &&
        DeepCollectionEquality().equals(startActions, other.startActions) &&
        DeepCollectionEquality().equals(endActions, other.endActions);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            0,
                                                            timestamp
                                                                    ?.hashCode ??
                                                                null.hashCode),
                                                        src.hashCode),
                                                    srcEnt.hashCode),
                                                dst.hashCode),
                                            dstEnt.hashCode),
                                        planId.hashCode),
                                    description.hashCode),
                                vnamespace.hashCode),
                            variables.hashCode),
                        startManId.hashCode),
                    maneuvers.hashCode),
                transitions.hashCode),
            startActions.hashCode),
        endActions.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('PlanSpecification')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('planId', planId)
          ..add('description', description)
          ..add('vnamespace', vnamespace)
          ..add('variables', '$variables')
          ..add('startManId', startManId)
          ..add('maneuvers', '$maneuvers')
          ..add('transitions', '$transitions')
          ..add('startActions', '$startActions')
          ..add('endActions', '$endActions'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'PlanSpecification',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'plan_id': planId,
        'description': description,
        'vnamespace': vnamespace,
        'variables': [
          ...variables.map((m) => m.toJson(false)),
        ],
        'start_man_id': startManId,
        'maneuvers': [
          ...maneuvers.map((m) => m.toJson(false)),
        ],
        'transitions': [
          ...transitions.map((m) => m.toJson(false)),
        ],
        'start_actions': [
          ...startActions.map((m) => m.toJson(false)),
        ],
        'end_actions': [
          ...endActions.map((m) => m.toJson(false)),
        ],
      };
}

/// Plan Specification builder class
///
class PlanSpecificationBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<PlanSpecification, PlanSpecificationBuilder> {
  _$PlanSpecification? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _planId = '';
  String get planId => _$this._planId;
  set planId(String planId) => _$this._planId = planId;

  String _description = '';
  String get description => _$this._description;
  set description(String description) => _$this._description = description;

  String _vnamespace = '';
  String get vnamespace => _$this._vnamespace;
  set vnamespace(String vnamespace) => _$this._vnamespace = vnamespace;

  List<PlanVariable> _variables = <PlanVariable>[];
  List<PlanVariable> get variables => _$this._variables;
  set variables(List<PlanVariable> variables) => _$this._variables = variables;

  String _startManId = '';
  String get startManId => _$this._startManId;
  set startManId(String startManId) => _$this._startManId = startManId;

  List<PlanManeuver> _maneuvers = <PlanManeuver>[];
  List<PlanManeuver> get maneuvers => _$this._maneuvers;
  set maneuvers(List<PlanManeuver> maneuvers) => _$this._maneuvers = maneuvers;

  List<PlanTransition> _transitions = <PlanTransition>[];
  List<PlanTransition> get transitions => _$this._transitions;
  set transitions(List<PlanTransition> transitions) =>
      _$this._transitions = transitions;

  List<ImcMessage> _startActions = <ImcMessage>[];
  List<ImcMessage> get startActions => _$this._startActions;
  set startActions(List<ImcMessage> startActions) =>
      _$this._startActions = startActions;

  List<ImcMessage> _endActions = <ImcMessage>[];
  List<ImcMessage> get endActions => _$this._endActions;
  set endActions(List<ImcMessage> endActions) =>
      _$this._endActions = endActions;

  PlanSpecificationBuilder();

  PlanSpecificationBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  PlanSpecificationBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$PlanSpecification.fromJson(json);
    replace(v);
  }

  @override
  PlanSpecificationBuilder fromJson(core.Map<String, dynamic> json) =>
      PlanSpecificationBuilder.fromJson(json);

  @override
  PlanSpecificationBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      PlanSpecificationBuilder()..copyFromHeader(headerFrom);

  PlanSpecificationBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _planId = _$v!.planId;
      _description = _$v!.description;
      _vnamespace = _$v!.vnamespace;
      _variables = _$v!.variables;
      _startManId = _$v!.startManId;
      _maneuvers = _$v!.maneuvers;
      _transitions = _$v!.transitions;
      _startActions = _$v!.startActions;
      _endActions = _$v!.endActions;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(PlanSpecification other) {
    _$v = other as _$PlanSpecification;
  }

  @override
  void update(void Function(PlanSpecificationBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  PlanSpecification build() {
    final result = _$v ??
        _$PlanSpecification._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            planId: planId,
            description: description,
            vnamespace: vnamespace,
            variables: variables,
            startManId: startManId,
            maneuvers: maneuvers,
            transitions: transitions,
            startActions: startActions,
            endActions: endActions);
    replace(result);
    return result;
  }
}

/// Plan Maneuver immutable class
///
class _$PlanManeuver extends PlanManeuver {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String maneuverId;
  @override
  final Maneuver? data;
  @override
  final List<ImcMessage> startActions;
  @override
  final List<ImcMessage> endActions;

  factory _$PlanManeuver([void Function(PlanManeuverBuilder b)? updates]) =>
      (PlanManeuverBuilder()..update(updates)).build() as _$PlanManeuver;

  factory _$PlanManeuver.fromJson(core.Map<String, dynamic> json) {
    var val = PlanManeuverBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.maneuverId =
        json.containsKey('maneuver_id') && json['maneuver_id'] != null
            ? json['maneuver_id'] as String
            : '';

    Maneuver? data;
    if (json.containsKey('data') && json['data'] != null) {
      var msgJson = json['data'] as core.Map<String, dynamic>;
      if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
        var msgType = msgJson['abbrev'] as String;
        var builder = messagesBuilders[msgType]?.call();
        builder = builder?.fromJson(msgJson);
        data = builder?.build() as Maneuver?;
      }
    }
    val.data = data;
    var startActions = <ImcMessage>[];
    if (json.containsKey('start_actions') && json['start_actions'] != null) {
      var listJson = json['start_actions'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as ImcMessage?;
          if (m != null) startActions.add(m);
        }
      }
    }
    val.startActions = startActions;
    var endActions = <ImcMessage>[];
    if (json.containsKey('end_actions') && json['end_actions'] != null) {
      var listJson = json['end_actions'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as ImcMessage?;
          if (m != null) endActions.add(m);
        }
      }
    }
    val.endActions = endActions;

    return val.build() as _$PlanManeuver;
  }

  _$PlanManeuver._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.maneuverId,
      this.data,
      required this.startActions,
      required this.endActions})
      : super._();

  @override
  PlanManeuver rebuild(void Function(PlanManeuverBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  PlanManeuverBuilder toBuilder() => PlanManeuverBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is PlanManeuver &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        maneuverId == other.maneuverId &&
        data == other.data &&
        DeepCollectionEquality().equals(startActions, other.startActions) &&
        DeepCollectionEquality().equals(endActions, other.endActions);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    maneuverId.hashCode),
                data?.hashCode ?? null.hashCode),
            startActions.hashCode),
        endActions.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('PlanManeuver')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('maneuverId', maneuverId)
          ..add('data', '$data')
          ..add('startActions', '$startActions')
          ..add('endActions', '$endActions'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'PlanManeuver',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'maneuver_id': maneuverId,
        'data': data?.toJson(false),
        'start_actions': [
          ...startActions.map((m) => m.toJson(false)),
        ],
        'end_actions': [
          ...endActions.map((m) => m.toJson(false)),
        ],
      };
}

/// Plan Maneuver builder class
///
class PlanManeuverBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<PlanManeuver, PlanManeuverBuilder> {
  _$PlanManeuver? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _maneuverId = '';
  String get maneuverId => _$this._maneuverId;
  set maneuverId(String maneuverId) => _$this._maneuverId = maneuverId;

  Maneuver? _data;
  Maneuver? get data => _$this._data;
  set data(Maneuver? data) => _$this._data = data;

  List<ImcMessage> _startActions = <ImcMessage>[];
  List<ImcMessage> get startActions => _$this._startActions;
  set startActions(List<ImcMessage> startActions) =>
      _$this._startActions = startActions;

  List<ImcMessage> _endActions = <ImcMessage>[];
  List<ImcMessage> get endActions => _$this._endActions;
  set endActions(List<ImcMessage> endActions) =>
      _$this._endActions = endActions;

  PlanManeuverBuilder();

  PlanManeuverBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  PlanManeuverBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$PlanManeuver.fromJson(json);
    replace(v);
  }

  @override
  PlanManeuverBuilder fromJson(core.Map<String, dynamic> json) =>
      PlanManeuverBuilder.fromJson(json);

  @override
  PlanManeuverBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      PlanManeuverBuilder()..copyFromHeader(headerFrom);

  PlanManeuverBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _maneuverId = _$v!.maneuverId;
      _data = _$v!.data;
      _startActions = _$v!.startActions;
      _endActions = _$v!.endActions;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(PlanManeuver other) {
    _$v = other as _$PlanManeuver;
  }

  @override
  void update(void Function(PlanManeuverBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  PlanManeuver build() {
    final result = _$v ??
        _$PlanManeuver._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            maneuverId: maneuverId,
            data: data,
            startActions: startActions,
            endActions: endActions);
    replace(result);
    return result;
  }
}

/// Plan Transition immutable class
///
class _$PlanTransition extends PlanTransition {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String sourceMan;
  @override
  final String destMan;
  @override
  final String conditions;
  @override
  final List<ImcMessage> actions;

  factory _$PlanTransition([void Function(PlanTransitionBuilder b)? updates]) =>
      (PlanTransitionBuilder()..update(updates)).build() as _$PlanTransition;

  factory _$PlanTransition.fromJson(core.Map<String, dynamic> json) {
    var val = PlanTransitionBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.sourceMan = json.containsKey('source_man') && json['source_man'] != null
        ? json['source_man'] as String
        : '';
    val.destMan = json.containsKey('dest_man') && json['dest_man'] != null
        ? json['dest_man'] as String
        : '';
    val.conditions =
        json.containsKey('conditions') && json['conditions'] != null
            ? json['conditions'] as String
            : '';
    var actions = <ImcMessage>[];
    if (json.containsKey('actions') && json['actions'] != null) {
      var listJson = json['actions'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as ImcMessage?;
          if (m != null) actions.add(m);
        }
      }
    }
    val.actions = actions;

    return val.build() as _$PlanTransition;
  }

  _$PlanTransition._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.sourceMan,
      required this.destMan,
      required this.conditions,
      required this.actions})
      : super._();

  @override
  PlanTransition rebuild(void Function(PlanTransitionBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  PlanTransitionBuilder toBuilder() => PlanTransitionBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is PlanTransition &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        sourceMan == other.sourceMan &&
        destMan == other.destMan &&
        conditions == other.conditions &&
        DeepCollectionEquality().equals(actions, other.actions);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    sourceMan.hashCode),
                destMan.hashCode),
            conditions.hashCode),
        actions.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('PlanTransition')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('sourceMan', sourceMan)
          ..add('destMan', destMan)
          ..add('conditions', conditions)
          ..add('actions', '$actions'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'PlanTransition',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'source_man': sourceMan,
        'dest_man': destMan,
        'conditions': conditions,
        'actions': [
          ...actions.map((m) => m.toJson(false)),
        ],
      };
}

/// Plan Transition builder class
///
class PlanTransitionBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<PlanTransition, PlanTransitionBuilder> {
  _$PlanTransition? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _sourceMan = '';
  String get sourceMan => _$this._sourceMan;
  set sourceMan(String sourceMan) => _$this._sourceMan = sourceMan;

  String _destMan = '';
  String get destMan => _$this._destMan;
  set destMan(String destMan) => _$this._destMan = destMan;

  String _conditions = '';
  String get conditions => _$this._conditions;
  set conditions(String conditions) => _$this._conditions = conditions;

  List<ImcMessage> _actions = <ImcMessage>[];
  List<ImcMessage> get actions => _$this._actions;
  set actions(List<ImcMessage> actions) => _$this._actions = actions;

  PlanTransitionBuilder();

  PlanTransitionBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  PlanTransitionBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$PlanTransition.fromJson(json);
    replace(v);
  }

  @override
  PlanTransitionBuilder fromJson(core.Map<String, dynamic> json) =>
      PlanTransitionBuilder.fromJson(json);

  @override
  PlanTransitionBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      PlanTransitionBuilder()..copyFromHeader(headerFrom);

  PlanTransitionBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _sourceMan = _$v!.sourceMan;
      _destMan = _$v!.destMan;
      _conditions = _$v!.conditions;
      _actions = _$v!.actions;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(PlanTransition other) {
    _$v = other as _$PlanTransition;
  }

  @override
  void update(void Function(PlanTransitionBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  PlanTransition build() {
    final result = _$v ??
        _$PlanTransition._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            sourceMan: sourceMan,
            destMan: destMan,
            conditions: conditions,
            actions: actions);
    replace(result);
    return result;
  }
}

/// Emergency Control immutable class
///
class _$EmergencyControl extends EmergencyControl {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final EmergencyControlEnumCommand command;
  @override
  final PlanSpecification? plan;

  factory _$EmergencyControl(
          [void Function(EmergencyControlBuilder b)? updates]) =>
      (EmergencyControlBuilder()..update(updates)).build()
          as _$EmergencyControl;

  factory _$EmergencyControl.fromJson(core.Map<String, dynamic> json) {
    var val = EmergencyControlBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.command = json.containsKey('command') && json['command'] != null
        ? EmergencyControlEnumCommand(json['command'] as int)
        : EmergencyControlEnumCommand(0);

    PlanSpecification? plan;
    if (json.containsKey('plan') && json['plan'] != null) {
      var msgJson = json['plan'] as core.Map<String, dynamic>;
      if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
        var msgType = msgJson['abbrev'] as String;
        var builder = messagesBuilders[msgType]?.call();
        builder = builder?.fromJson(msgJson);
        plan = builder?.build() as PlanSpecification?;
      }
    }
    val.plan = plan;

    return val.build() as _$EmergencyControl;
  }

  _$EmergencyControl._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.command,
      this.plan})
      : super._();

  @override
  EmergencyControl rebuild(void Function(EmergencyControlBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  EmergencyControlBuilder toBuilder() =>
      EmergencyControlBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is EmergencyControl &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        command == other.command &&
        plan == other.plan;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            command.hashCode),
        plan?.hashCode ?? null.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('EmergencyControl')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add(
              'command', '$command (Enumerated) [${command.toPrettyString()}]')
          ..add('plan', '$plan'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'EmergencyControl',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'command': command.value,
        'plan': plan?.toJson(false),
      };
}

/// Emergency Control builder class
///
class EmergencyControlBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<EmergencyControl, EmergencyControlBuilder> {
  _$EmergencyControl? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  EmergencyControlEnumCommand _command = EmergencyControlEnumCommand(0);
  EmergencyControlEnumCommand get command => _$this._command;
  set command(EmergencyControlEnumCommand command) => _$this._command = command;

  PlanSpecification? _plan;
  PlanSpecification? get plan => _$this._plan;
  set plan(PlanSpecification? plan) => _$this._plan = plan;

  EmergencyControlBuilder();

  EmergencyControlBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  EmergencyControlBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$EmergencyControl.fromJson(json);
    replace(v);
  }

  @override
  EmergencyControlBuilder fromJson(core.Map<String, dynamic> json) =>
      EmergencyControlBuilder.fromJson(json);

  @override
  EmergencyControlBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      EmergencyControlBuilder()..copyFromHeader(headerFrom);

  EmergencyControlBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _command = _$v!.command;
      _plan = _$v!.plan;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(EmergencyControl other) {
    _$v = other as _$EmergencyControl;
  }

  @override
  void update(void Function(EmergencyControlBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  EmergencyControl build() {
    final result = _$v ??
        _$EmergencyControl._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            command: command,
            plan: plan);
    replace(result);
    return result;
  }
}

/// Emergency Control State immutable class
///
class _$EmergencyControlState extends EmergencyControlState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final EmergencyControlStateEnumState state;
  @override
  final String planId;
  @override
  final int commLevel;

  factory _$EmergencyControlState(
          [void Function(EmergencyControlStateBuilder b)? updates]) =>
      (EmergencyControlStateBuilder()..update(updates)).build()
          as _$EmergencyControlState;

  factory _$EmergencyControlState.fromJson(core.Map<String, dynamic> json) {
    var val = EmergencyControlStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.state = json.containsKey('state') && json['state'] != null
        ? EmergencyControlStateEnumState(json['state'] as int)
        : EmergencyControlStateEnumState(0);
    val.planId = json.containsKey('plan_id') && json['plan_id'] != null
        ? json['plan_id'] as String
        : '';
    val.commLevel =
        json.containsKey('comm_level') ? json['comm_level'] as int : 0;

    return val.build() as _$EmergencyControlState;
  }

  _$EmergencyControlState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.state,
      required this.planId,
      required this.commLevel})
      : super._();

  @override
  EmergencyControlState rebuild(
          void Function(EmergencyControlStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  EmergencyControlStateBuilder toBuilder() =>
      EmergencyControlStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is EmergencyControlState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        state == other.state &&
        planId == other.planId &&
        commLevel == other.commLevel;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                state.hashCode),
            planId.hashCode),
        commLevel.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('EmergencyControlState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('state', '$state (Enumerated) [${state.toPrettyString()}]')
          ..add('planId', planId)
          ..add('commLevel', '$commLevel (%)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'EmergencyControlState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'state': state.value,
        'plan_id': planId,
        'comm_level': commLevel,
      };
}

/// Emergency Control State builder class
///
class EmergencyControlStateBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<EmergencyControlState,
            EmergencyControlStateBuilder> {
  _$EmergencyControlState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  EmergencyControlStateEnumState _state = EmergencyControlStateEnumState(0);
  EmergencyControlStateEnumState get state => _$this._state;
  set state(EmergencyControlStateEnumState state) => _$this._state = state;

  String _planId = '';
  String get planId => _$this._planId;
  set planId(String planId) => _$this._planId = planId;

  int _commLevel = 0;
  int get commLevel => _$this._commLevel;
  set commLevel(int commLevel) => _$this._commLevel = commLevel;

  EmergencyControlStateBuilder();

  EmergencyControlStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  EmergencyControlStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$EmergencyControlState.fromJson(json);
    replace(v);
  }

  @override
  EmergencyControlStateBuilder fromJson(core.Map<String, dynamic> json) =>
      EmergencyControlStateBuilder.fromJson(json);

  @override
  EmergencyControlStateBuilder newInstance(
          [ImcBuilderHeaderPart? headerFrom]) =>
      EmergencyControlStateBuilder()..copyFromHeader(headerFrom);

  EmergencyControlStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _state = _$v!.state;
      _planId = _$v!.planId;
      _commLevel = _$v!.commLevel;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(EmergencyControlState other) {
    _$v = other as _$EmergencyControlState;
  }

  @override
  void update(void Function(EmergencyControlStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  EmergencyControlState build() {
    final result = _$v ??
        _$EmergencyControlState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            state: state,
            planId: planId,
            commLevel: commLevel);
    replace(result);
    return result;
  }
}

/// Plan DB immutable class
///
class _$PlanDB extends PlanDB {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final PlanDBEnumType type;
  @override
  final PlanDBEnumOp op;
  @override
  final int requestId;
  @override
  final String planId;
  @override
  final ImcMessage? arg;
  @override
  final String info;

  factory _$PlanDB([void Function(PlanDBBuilder b)? updates]) =>
      (PlanDBBuilder()..update(updates)).build() as _$PlanDB;

  factory _$PlanDB.fromJson(core.Map<String, dynamic> json) {
    var val = PlanDBBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.type = json.containsKey('type') && json['type'] != null
        ? PlanDBEnumType(json['type'] as int)
        : PlanDBEnumType(0);
    val.op = json.containsKey('op') && json['op'] != null
        ? PlanDBEnumOp(json['op'] as int)
        : PlanDBEnumOp(0);
    val.requestId =
        json.containsKey('request_id') ? json['request_id'] as int : 0;
    val.planId = json.containsKey('plan_id') && json['plan_id'] != null
        ? json['plan_id'] as String
        : '';

    ImcMessage? arg;
    if (json.containsKey('arg') && json['arg'] != null) {
      var msgJson = json['arg'] as core.Map<String, dynamic>;
      if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
        var msgType = msgJson['abbrev'] as String;
        var builder = messagesBuilders[msgType]?.call();
        builder = builder?.fromJson(msgJson);
        arg = builder?.build() as ImcMessage?;
      }
    }
    val.arg = arg;
    val.info = json.containsKey('info') && json['info'] != null
        ? json['info'] as String
        : '';

    return val.build() as _$PlanDB;
  }

  _$PlanDB._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.type,
      required this.op,
      required this.requestId,
      required this.planId,
      this.arg,
      required this.info})
      : super._();

  @override
  PlanDB rebuild(void Function(PlanDBBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  PlanDBBuilder toBuilder() => PlanDBBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is PlanDB &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        type == other.type &&
        op == other.op &&
        requestId == other.requestId &&
        planId == other.planId &&
        arg == other.arg &&
        info == other.info;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                0,
                                                timestamp?.hashCode ??
                                                    null.hashCode),
                                            src.hashCode),
                                        srcEnt.hashCode),
                                    dst.hashCode),
                                dstEnt.hashCode),
                            type.hashCode),
                        op.hashCode),
                    requestId.hashCode),
                planId.hashCode),
            arg?.hashCode ?? null.hashCode),
        info.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('PlanDB')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('type', '$type (Enumerated) [${type.toPrettyString()}]')
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]')
          ..add('requestId', '$requestId')
          ..add('planId', planId)
          ..add('arg', '$arg')
          ..add('info', info))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'PlanDB',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'type': type.value,
        'op': op.value,
        'request_id': requestId,
        'plan_id': planId,
        'arg': arg?.toJson(false),
        'info': info,
      };
}

/// Plan DB builder class
///
class PlanDBBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<PlanDB, PlanDBBuilder> {
  _$PlanDB? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  PlanDBEnumType _type = PlanDBEnumType(0);
  PlanDBEnumType get type => _$this._type;
  set type(PlanDBEnumType type) => _$this._type = type;

  PlanDBEnumOp _op = PlanDBEnumOp(0);
  PlanDBEnumOp get op => _$this._op;
  set op(PlanDBEnumOp op) => _$this._op = op;

  int _requestId = 0;
  int get requestId => _$this._requestId;
  set requestId(int requestId) => _$this._requestId = requestId;

  String _planId = '';
  String get planId => _$this._planId;
  set planId(String planId) => _$this._planId = planId;

  ImcMessage? _arg;
  ImcMessage? get arg => _$this._arg;
  set arg(ImcMessage? arg) => _$this._arg = arg;

  String _info = '';
  String get info => _$this._info;
  set info(String info) => _$this._info = info;

  PlanDBBuilder();

  PlanDBBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  PlanDBBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$PlanDB.fromJson(json);
    replace(v);
  }

  @override
  PlanDBBuilder fromJson(core.Map<String, dynamic> json) =>
      PlanDBBuilder.fromJson(json);

  @override
  PlanDBBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      PlanDBBuilder()..copyFromHeader(headerFrom);

  PlanDBBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _type = _$v!.type;
      _op = _$v!.op;
      _requestId = _$v!.requestId;
      _planId = _$v!.planId;
      _arg = _$v!.arg;
      _info = _$v!.info;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(PlanDB other) {
    _$v = other as _$PlanDB;
  }

  @override
  void update(void Function(PlanDBBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  PlanDB build() {
    final result = _$v ??
        _$PlanDB._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            type: type,
            op: op,
            requestId: requestId,
            planId: planId,
            arg: arg,
            info: info);
    replace(result);
    return result;
  }
}

/// Plan DB State immutable class
///
class _$PlanDBState extends PlanDBState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int planCount;
  @override
  final int planSize;
  @override
  final double changeTime;
  @override
  final int changeSid;
  @override
  final String changeSname;
  @override
  final List<int> md5;
  @override
  final List<PlanDBInformation> plansInfo;

  factory _$PlanDBState([void Function(PlanDBStateBuilder b)? updates]) =>
      (PlanDBStateBuilder()..update(updates)).build() as _$PlanDBState;

  factory _$PlanDBState.fromJson(core.Map<String, dynamic> json) {
    var val = PlanDBStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.planCount =
        json.containsKey('plan_count') ? json['plan_count'] as int : 0;
    val.planSize = json.containsKey('plan_size') ? json['plan_size'] as int : 0;
    val.changeTime =
        json.containsKey('change_time') ? json['change_time'] as double : 0;
    val.changeSid =
        json.containsKey('change_sid') ? json['change_sid'] as int : 0;
    val.changeSname =
        json.containsKey('change_sname') && json['change_sname'] != null
            ? json['change_sname'] as String
            : '';
    val.md5 = json.containsKey('md5')
        ? base64.decode(json['md5'] as String)
        : <int>[];
    var plansInfo = <PlanDBInformation>[];
    if (json.containsKey('plans_info') && json['plans_info'] != null) {
      var listJson = json['plans_info'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as PlanDBInformation?;
          if (m != null) plansInfo.add(m);
        }
      }
    }
    val.plansInfo = plansInfo;

    return val.build() as _$PlanDBState;
  }

  _$PlanDBState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.planCount,
      required this.planSize,
      required this.changeTime,
      required this.changeSid,
      required this.changeSname,
      required this.md5,
      required this.plansInfo})
      : super._();

  @override
  PlanDBState rebuild(void Function(PlanDBStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  PlanDBStateBuilder toBuilder() => PlanDBStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is PlanDBState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        planCount == other.planCount &&
        planSize == other.planSize &&
        (changeTime == other.changeTime ||
            changeTime - other.changeTime <= 1E-7) &&
        changeSid == other.changeSid &&
        changeSname == other.changeSname &&
        ListEquality().equals(md5, other.md5) &&
        DeepCollectionEquality().equals(plansInfo, other.plansInfo);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    0,
                                                    timestamp?.hashCode ??
                                                        null.hashCode),
                                                src.hashCode),
                                            srcEnt.hashCode),
                                        dst.hashCode),
                                    dstEnt.hashCode),
                                planCount.hashCode),
                            planSize.hashCode),
                        changeTime.hashCode),
                    changeSid.hashCode),
                changeSname.hashCode),
            md5.hashCode),
        plansInfo.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('PlanDBState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('planCount', '$planCount')
          ..add('planSize', '$planSize')
          ..add('changeTime', '$changeTime (s)')
          ..add('changeSid', '$changeSid')
          ..add('changeSname', changeSname)
          ..add('md5', '$md5')
          ..add('plansInfo', '$plansInfo'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'PlanDBState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'plan_count': planCount,
        'plan_size': planSize,
        'change_time': changeTime,
        'change_sid': changeSid,
        'change_sname': changeSname,
        'md5': base64.encode(md5),
        'plans_info': [
          ...plansInfo.map((m) => m.toJson(false)),
        ],
      };
}

/// Plan DB State builder class
///
class PlanDBStateBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<PlanDBState, PlanDBStateBuilder> {
  _$PlanDBState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _planCount = 0;
  int get planCount => _$this._planCount;
  set planCount(int planCount) => _$this._planCount = planCount;

  int _planSize = 0;
  int get planSize => _$this._planSize;
  set planSize(int planSize) => _$this._planSize = planSize;

  double _changeTime = 0;
  double get changeTime => _$this._changeTime;
  set changeTime(double changeTime) => _$this._changeTime = changeTime;

  int _changeSid = 0;
  int get changeSid => _$this._changeSid;
  set changeSid(int changeSid) => _$this._changeSid = changeSid;

  String _changeSname = '';
  String get changeSname => _$this._changeSname;
  set changeSname(String changeSname) => _$this._changeSname = changeSname;

  List<int> _md5 = <int>[];
  List<int> get md5 => _$this._md5;
  set md5(List<int> md5) => _$this._md5 = md5;

  List<PlanDBInformation> _plansInfo = <PlanDBInformation>[];
  List<PlanDBInformation> get plansInfo => _$this._plansInfo;
  set plansInfo(List<PlanDBInformation> plansInfo) =>
      _$this._plansInfo = plansInfo;

  PlanDBStateBuilder();

  PlanDBStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  PlanDBStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$PlanDBState.fromJson(json);
    replace(v);
  }

  @override
  PlanDBStateBuilder fromJson(core.Map<String, dynamic> json) =>
      PlanDBStateBuilder.fromJson(json);

  @override
  PlanDBStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      PlanDBStateBuilder()..copyFromHeader(headerFrom);

  PlanDBStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _planCount = _$v!.planCount;
      _planSize = _$v!.planSize;
      _changeTime = _$v!.changeTime;
      _changeSid = _$v!.changeSid;
      _changeSname = _$v!.changeSname;
      _md5 = _$v!.md5;
      _plansInfo = _$v!.plansInfo;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(PlanDBState other) {
    _$v = other as _$PlanDBState;
  }

  @override
  void update(void Function(PlanDBStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  PlanDBState build() {
    final result = _$v ??
        _$PlanDBState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            planCount: planCount,
            planSize: planSize,
            changeTime: changeTime,
            changeSid: changeSid,
            changeSname: changeSname,
            md5: md5,
            plansInfo: plansInfo);
    replace(result);
    return result;
  }
}

/// Plan DB Information immutable class
///
class _$PlanDBInformation extends PlanDBInformation {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String planId;
  @override
  final int planSize;
  @override
  final double changeTime;
  @override
  final int changeSid;
  @override
  final String changeSname;
  @override
  final List<int> md5;

  factory _$PlanDBInformation(
          [void Function(PlanDBInformationBuilder b)? updates]) =>
      (PlanDBInformationBuilder()..update(updates)).build()
          as _$PlanDBInformation;

  factory _$PlanDBInformation.fromJson(core.Map<String, dynamic> json) {
    var val = PlanDBInformationBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.planId = json.containsKey('plan_id') && json['plan_id'] != null
        ? json['plan_id'] as String
        : '';
    val.planSize = json.containsKey('plan_size') ? json['plan_size'] as int : 0;
    val.changeTime =
        json.containsKey('change_time') ? json['change_time'] as double : 0;
    val.changeSid =
        json.containsKey('change_sid') ? json['change_sid'] as int : 0;
    val.changeSname =
        json.containsKey('change_sname') && json['change_sname'] != null
            ? json['change_sname'] as String
            : '';
    val.md5 = json.containsKey('md5')
        ? base64.decode(json['md5'] as String)
        : <int>[];

    return val.build() as _$PlanDBInformation;
  }

  _$PlanDBInformation._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.planId,
      required this.planSize,
      required this.changeTime,
      required this.changeSid,
      required this.changeSname,
      required this.md5})
      : super._();

  @override
  PlanDBInformation rebuild(
          void Function(PlanDBInformationBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  PlanDBInformationBuilder toBuilder() =>
      PlanDBInformationBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is PlanDBInformation &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        planId == other.planId &&
        planSize == other.planSize &&
        (changeTime == other.changeTime ||
            changeTime - other.changeTime <= 1E-7) &&
        changeSid == other.changeSid &&
        changeSname == other.changeSname &&
        ListEquality().equals(md5, other.md5);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                0,
                                                timestamp?.hashCode ??
                                                    null.hashCode),
                                            src.hashCode),
                                        srcEnt.hashCode),
                                    dst.hashCode),
                                dstEnt.hashCode),
                            planId.hashCode),
                        planSize.hashCode),
                    changeTime.hashCode),
                changeSid.hashCode),
            changeSname.hashCode),
        md5.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('PlanDBInformation')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('planId', planId)
          ..add('planSize', '$planSize')
          ..add('changeTime', '$changeTime')
          ..add('changeSid', '$changeSid')
          ..add('changeSname', changeSname)
          ..add('md5', '$md5'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'PlanDBInformation',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'plan_id': planId,
        'plan_size': planSize,
        'change_time': changeTime,
        'change_sid': changeSid,
        'change_sname': changeSname,
        'md5': base64.encode(md5),
      };
}

/// Plan DB Information builder class
///
class PlanDBInformationBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<PlanDBInformation, PlanDBInformationBuilder> {
  _$PlanDBInformation? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _planId = '';
  String get planId => _$this._planId;
  set planId(String planId) => _$this._planId = planId;

  int _planSize = 0;
  int get planSize => _$this._planSize;
  set planSize(int planSize) => _$this._planSize = planSize;

  double _changeTime = 0;
  double get changeTime => _$this._changeTime;
  set changeTime(double changeTime) => _$this._changeTime = changeTime;

  int _changeSid = 0;
  int get changeSid => _$this._changeSid;
  set changeSid(int changeSid) => _$this._changeSid = changeSid;

  String _changeSname = '';
  String get changeSname => _$this._changeSname;
  set changeSname(String changeSname) => _$this._changeSname = changeSname;

  List<int> _md5 = <int>[];
  List<int> get md5 => _$this._md5;
  set md5(List<int> md5) => _$this._md5 = md5;

  PlanDBInformationBuilder();

  PlanDBInformationBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  PlanDBInformationBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$PlanDBInformation.fromJson(json);
    replace(v);
  }

  @override
  PlanDBInformationBuilder fromJson(core.Map<String, dynamic> json) =>
      PlanDBInformationBuilder.fromJson(json);

  @override
  PlanDBInformationBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      PlanDBInformationBuilder()..copyFromHeader(headerFrom);

  PlanDBInformationBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _planId = _$v!.planId;
      _planSize = _$v!.planSize;
      _changeTime = _$v!.changeTime;
      _changeSid = _$v!.changeSid;
      _changeSname = _$v!.changeSname;
      _md5 = _$v!.md5;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(PlanDBInformation other) {
    _$v = other as _$PlanDBInformation;
  }

  @override
  void update(void Function(PlanDBInformationBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  PlanDBInformation build() {
    final result = _$v ??
        _$PlanDBInformation._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            planId: planId,
            planSize: planSize,
            changeTime: changeTime,
            changeSid: changeSid,
            changeSname: changeSname,
            md5: md5);
    replace(result);
    return result;
  }
}

/// Plan Control immutable class
///
class _$PlanControl extends PlanControl {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final PlanControlEnumType type;
  @override
  final PlanControlEnumOp op;
  @override
  final int requestId;
  @override
  final String planId;
  @override
  final PlanControlBitfieldFlags flags;
  @override
  final ImcMessage? arg;
  @override
  final String info;

  factory _$PlanControl([void Function(PlanControlBuilder b)? updates]) =>
      (PlanControlBuilder()..update(updates)).build() as _$PlanControl;

  factory _$PlanControl.fromJson(core.Map<String, dynamic> json) {
    var val = PlanControlBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.type = json.containsKey('type') && json['type'] != null
        ? PlanControlEnumType(json['type'] as int)
        : PlanControlEnumType(0);
    val.op = json.containsKey('op') && json['op'] != null
        ? PlanControlEnumOp(json['op'] as int)
        : PlanControlEnumOp(0);
    val.requestId =
        json.containsKey('request_id') ? json['request_id'] as int : 0;
    val.planId = json.containsKey('plan_id') && json['plan_id'] != null
        ? json['plan_id'] as String
        : '';
    val.flags = json.containsKey('flags') && json['flags'] != null
        ? PlanControlBitfieldFlags(json['flags'] as int)
        : PlanControlBitfieldFlags(0);

    ImcMessage? arg;
    if (json.containsKey('arg') && json['arg'] != null) {
      var msgJson = json['arg'] as core.Map<String, dynamic>;
      if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
        var msgType = msgJson['abbrev'] as String;
        var builder = messagesBuilders[msgType]?.call();
        builder = builder?.fromJson(msgJson);
        arg = builder?.build() as ImcMessage?;
      }
    }
    val.arg = arg;
    val.info = json.containsKey('info') && json['info'] != null
        ? json['info'] as String
        : '';

    return val.build() as _$PlanControl;
  }

  _$PlanControl._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.type,
      required this.op,
      required this.requestId,
      required this.planId,
      required this.flags,
      this.arg,
      required this.info})
      : super._();

  @override
  PlanControl rebuild(void Function(PlanControlBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  PlanControlBuilder toBuilder() => PlanControlBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is PlanControl &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        type == other.type &&
        op == other.op &&
        requestId == other.requestId &&
        planId == other.planId &&
        flags == other.flags &&
        arg == other.arg &&
        info == other.info;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    0,
                                                    timestamp?.hashCode ??
                                                        null.hashCode),
                                                src.hashCode),
                                            srcEnt.hashCode),
                                        dst.hashCode),
                                    dstEnt.hashCode),
                                type.hashCode),
                            op.hashCode),
                        requestId.hashCode),
                    planId.hashCode),
                flags.hashCode),
            arg?.hashCode ?? null.hashCode),
        info.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('PlanControl')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('type', '$type (Enumerated) [${type.toPrettyString()}]')
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]')
          ..add('requestId', '$requestId')
          ..add('planId', planId)
          ..add('flags', '$flags (Bitfield) [${flags.toPrettyString()}]')
          ..add('arg', '$arg')
          ..add('info', info))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'PlanControl',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'type': type.value,
        'op': op.value,
        'request_id': requestId,
        'plan_id': planId,
        'flags': flags.value,
        'arg': arg?.toJson(false),
        'info': info,
      };
}

/// Plan Control builder class
///
class PlanControlBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<PlanControl, PlanControlBuilder> {
  _$PlanControl? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  PlanControlEnumType _type = PlanControlEnumType(0);
  PlanControlEnumType get type => _$this._type;
  set type(PlanControlEnumType type) => _$this._type = type;

  PlanControlEnumOp _op = PlanControlEnumOp(0);
  PlanControlEnumOp get op => _$this._op;
  set op(PlanControlEnumOp op) => _$this._op = op;

  int _requestId = 0;
  int get requestId => _$this._requestId;
  set requestId(int requestId) => _$this._requestId = requestId;

  String _planId = '';
  String get planId => _$this._planId;
  set planId(String planId) => _$this._planId = planId;

  PlanControlBitfieldFlags _flags = PlanControlBitfieldFlags(0);
  PlanControlBitfieldFlags get flags => _$this._flags;
  set flags(PlanControlBitfieldFlags flags) => _$this._flags = flags;

  ImcMessage? _arg;
  ImcMessage? get arg => _$this._arg;
  set arg(ImcMessage? arg) => _$this._arg = arg;

  String _info = '';
  String get info => _$this._info;
  set info(String info) => _$this._info = info;

  PlanControlBuilder();

  PlanControlBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  PlanControlBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$PlanControl.fromJson(json);
    replace(v);
  }

  @override
  PlanControlBuilder fromJson(core.Map<String, dynamic> json) =>
      PlanControlBuilder.fromJson(json);

  @override
  PlanControlBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      PlanControlBuilder()..copyFromHeader(headerFrom);

  PlanControlBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _type = _$v!.type;
      _op = _$v!.op;
      _requestId = _$v!.requestId;
      _planId = _$v!.planId;
      _flags = _$v!.flags;
      _arg = _$v!.arg;
      _info = _$v!.info;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(PlanControl other) {
    _$v = other as _$PlanControl;
  }

  @override
  void update(void Function(PlanControlBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  PlanControl build() {
    final result = _$v ??
        _$PlanControl._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            type: type,
            op: op,
            requestId: requestId,
            planId: planId,
            flags: flags,
            arg: arg,
            info: info);
    replace(result);
    return result;
  }
}

/// Plan Control State immutable class
///
class _$PlanControlState extends PlanControlState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final PlanControlStateEnumState state;
  @override
  final String planId;
  @override
  final int planEta;
  @override
  final double planProgress;
  @override
  final String manId;
  @override
  final int manType;
  @override
  final int manEta;
  @override
  final PlanControlStateEnumLastOutcome lastOutcome;

  factory _$PlanControlState(
          [void Function(PlanControlStateBuilder b)? updates]) =>
      (PlanControlStateBuilder()..update(updates)).build()
          as _$PlanControlState;

  factory _$PlanControlState.fromJson(core.Map<String, dynamic> json) {
    var val = PlanControlStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.state = json.containsKey('state') && json['state'] != null
        ? PlanControlStateEnumState(json['state'] as int)
        : PlanControlStateEnumState(0);
    val.planId = json.containsKey('plan_id') && json['plan_id'] != null
        ? json['plan_id'] as String
        : '';
    val.planEta = json.containsKey('plan_eta') ? json['plan_eta'] as int : 0;
    val.planProgress =
        json.containsKey('plan_progress') ? json['plan_progress'] as double : 0;
    val.manId = json.containsKey('man_id') && json['man_id'] != null
        ? json['man_id'] as String
        : '';
    val.manType = json.containsKey('man_type') ? json['man_type'] as int : 0;
    val.manEta = json.containsKey('man_eta') ? json['man_eta'] as int : 0;
    val.lastOutcome =
        json.containsKey('last_outcome') && json['last_outcome'] != null
            ? PlanControlStateEnumLastOutcome(json['last_outcome'] as int)
            : PlanControlStateEnumLastOutcome(0);

    return val.build() as _$PlanControlState;
  }

  _$PlanControlState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.state,
      required this.planId,
      required this.planEta,
      required this.planProgress,
      required this.manId,
      required this.manType,
      required this.manEta,
      required this.lastOutcome})
      : super._();

  @override
  PlanControlState rebuild(void Function(PlanControlStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  PlanControlStateBuilder toBuilder() =>
      PlanControlStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is PlanControlState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        state == other.state &&
        planId == other.planId &&
        planEta == other.planEta &&
        (planProgress == other.planProgress ||
            planProgress - other.planProgress <= 1E-7) &&
        manId == other.manId &&
        manType == other.manType &&
        manEta == other.manEta &&
        lastOutcome == other.lastOutcome;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        0,
                                                        timestamp?.hashCode ??
                                                            null.hashCode),
                                                    src.hashCode),
                                                srcEnt.hashCode),
                                            dst.hashCode),
                                        dstEnt.hashCode),
                                    state.hashCode),
                                planId.hashCode),
                            planEta.hashCode),
                        planProgress.hashCode),
                    manId.hashCode),
                manType.hashCode),
            manEta.hashCode),
        lastOutcome.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('PlanControlState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('state', '$state (Enumerated) [${state.toPrettyString()}]')
          ..add('planId', planId)
          ..add('planEta', '$planEta (s)')
          ..add('planProgress', '$planProgress (%)')
          ..add('manId', manId)
          ..add('manType', '$manType')
          ..add('manEta', '$manEta (s)')
          ..add('lastOutcome',
              '$lastOutcome (Enumerated) [${lastOutcome.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'PlanControlState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'state': state.value,
        'plan_id': planId,
        'plan_eta': planEta,
        'plan_progress': planProgress,
        'man_id': manId,
        'man_type': manType,
        'man_eta': manEta,
        'last_outcome': lastOutcome.value,
      };
}

/// Plan Control State builder class
///
class PlanControlStateBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<PlanControlState, PlanControlStateBuilder> {
  _$PlanControlState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  PlanControlStateEnumState _state = PlanControlStateEnumState(0);
  PlanControlStateEnumState get state => _$this._state;
  set state(PlanControlStateEnumState state) => _$this._state = state;

  String _planId = '';
  String get planId => _$this._planId;
  set planId(String planId) => _$this._planId = planId;

  int _planEta = 0;
  int get planEta => _$this._planEta;
  set planEta(int planEta) => _$this._planEta = planEta;

  double _planProgress = 0;
  double get planProgress => _$this._planProgress;
  set planProgress(double planProgress) => _$this._planProgress = planProgress;

  String _manId = '';
  String get manId => _$this._manId;
  set manId(String manId) => _$this._manId = manId;

  int _manType = 0;
  int get manType => _$this._manType;
  set manType(int manType) => _$this._manType = manType;

  int _manEta = 0;
  int get manEta => _$this._manEta;
  set manEta(int manEta) => _$this._manEta = manEta;

  PlanControlStateEnumLastOutcome _lastOutcome =
      PlanControlStateEnumLastOutcome(0);
  PlanControlStateEnumLastOutcome get lastOutcome => _$this._lastOutcome;
  set lastOutcome(PlanControlStateEnumLastOutcome lastOutcome) =>
      _$this._lastOutcome = lastOutcome;

  PlanControlStateBuilder();

  PlanControlStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  PlanControlStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$PlanControlState.fromJson(json);
    replace(v);
  }

  @override
  PlanControlStateBuilder fromJson(core.Map<String, dynamic> json) =>
      PlanControlStateBuilder.fromJson(json);

  @override
  PlanControlStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      PlanControlStateBuilder()..copyFromHeader(headerFrom);

  PlanControlStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _state = _$v!.state;
      _planId = _$v!.planId;
      _planEta = _$v!.planEta;
      _planProgress = _$v!.planProgress;
      _manId = _$v!.manId;
      _manType = _$v!.manType;
      _manEta = _$v!.manEta;
      _lastOutcome = _$v!.lastOutcome;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(PlanControlState other) {
    _$v = other as _$PlanControlState;
  }

  @override
  void update(void Function(PlanControlStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  PlanControlState build() {
    final result = _$v ??
        _$PlanControlState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            state: state,
            planId: planId,
            planEta: planEta,
            planProgress: planProgress,
            manId: manId,
            manType: manType,
            manEta: manEta,
            lastOutcome: lastOutcome);
    replace(result);
    return result;
  }
}

/// Plan Variable immutable class
///
class _$PlanVariable extends PlanVariable {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String name;
  @override
  final String value;
  @override
  final PlanVariableEnumType type;
  @override
  final PlanVariableEnumAccess access;

  factory _$PlanVariable([void Function(PlanVariableBuilder b)? updates]) =>
      (PlanVariableBuilder()..update(updates)).build() as _$PlanVariable;

  factory _$PlanVariable.fromJson(core.Map<String, dynamic> json) {
    var val = PlanVariableBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.name = json.containsKey('name') && json['name'] != null
        ? json['name'] as String
        : '';
    val.value = json.containsKey('value') && json['value'] != null
        ? json['value'] as String
        : '';
    val.type = json.containsKey('type') && json['type'] != null
        ? PlanVariableEnumType(json['type'] as int)
        : PlanVariableEnumType(0);
    val.access = json.containsKey('access') && json['access'] != null
        ? PlanVariableEnumAccess(json['access'] as int)
        : PlanVariableEnumAccess(0);

    return val.build() as _$PlanVariable;
  }

  _$PlanVariable._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.name,
      required this.value,
      required this.type,
      required this.access})
      : super._();

  @override
  PlanVariable rebuild(void Function(PlanVariableBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  PlanVariableBuilder toBuilder() => PlanVariableBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is PlanVariable &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        name == other.name &&
        value == other.value &&
        type == other.type &&
        access == other.access;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    name.hashCode),
                value.hashCode),
            type.hashCode),
        access.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('PlanVariable')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('name', name)
          ..add('value', value)
          ..add('type', '$type (Enumerated) [${type.toPrettyString()}]')
          ..add('access', '$access (Enumerated) [${access.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'PlanVariable',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'name': name,
        'value': value,
        'type': type.value,
        'access': access.value,
      };
}

/// Plan Variable builder class
///
class PlanVariableBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<PlanVariable, PlanVariableBuilder> {
  _$PlanVariable? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _name = '';
  String get name => _$this._name;
  set name(String name) => _$this._name = name;

  String _value = '';
  String get value => _$this._value;
  set value(String value) => _$this._value = value;

  PlanVariableEnumType _type = PlanVariableEnumType(0);
  PlanVariableEnumType get type => _$this._type;
  set type(PlanVariableEnumType type) => _$this._type = type;

  PlanVariableEnumAccess _access = PlanVariableEnumAccess(0);
  PlanVariableEnumAccess get access => _$this._access;
  set access(PlanVariableEnumAccess access) => _$this._access = access;

  PlanVariableBuilder();

  PlanVariableBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  PlanVariableBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$PlanVariable.fromJson(json);
    replace(v);
  }

  @override
  PlanVariableBuilder fromJson(core.Map<String, dynamic> json) =>
      PlanVariableBuilder.fromJson(json);

  @override
  PlanVariableBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      PlanVariableBuilder()..copyFromHeader(headerFrom);

  PlanVariableBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _name = _$v!.name;
      _value = _$v!.value;
      _type = _$v!.type;
      _access = _$v!.access;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(PlanVariable other) {
    _$v = other as _$PlanVariable;
  }

  @override
  void update(void Function(PlanVariableBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  PlanVariable build() {
    final result = _$v ??
        _$PlanVariable._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            name: name,
            value: value,
            type: type,
            access: access);
    replace(result);
    return result;
  }
}

/// Plan Generation immutable class
///
class _$PlanGeneration extends PlanGeneration {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final PlanGenerationEnumCmd cmd;
  @override
  final PlanGenerationEnumOp op;
  @override
  final String planId;
  @override
  final String params;

  factory _$PlanGeneration([void Function(PlanGenerationBuilder b)? updates]) =>
      (PlanGenerationBuilder()..update(updates)).build() as _$PlanGeneration;

  factory _$PlanGeneration.fromJson(core.Map<String, dynamic> json) {
    var val = PlanGenerationBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.cmd = json.containsKey('cmd') && json['cmd'] != null
        ? PlanGenerationEnumCmd(json['cmd'] as int)
        : PlanGenerationEnumCmd(0);
    val.op = json.containsKey('op') && json['op'] != null
        ? PlanGenerationEnumOp(json['op'] as int)
        : PlanGenerationEnumOp(0);
    val.planId = json.containsKey('plan_id') && json['plan_id'] != null
        ? json['plan_id'] as String
        : '';
    val.params = json.containsKey('params') && json['params'] != null
        ? json['params'] as String
        : '';

    return val.build() as _$PlanGeneration;
  }

  _$PlanGeneration._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.cmd,
      required this.op,
      required this.planId,
      required this.params})
      : super._();

  @override
  PlanGeneration rebuild(void Function(PlanGenerationBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  PlanGenerationBuilder toBuilder() => PlanGenerationBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is PlanGeneration &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        cmd == other.cmd &&
        op == other.op &&
        planId == other.planId &&
        params == other.params;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    cmd.hashCode),
                op.hashCode),
            planId.hashCode),
        params.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('PlanGeneration')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('cmd', '$cmd (Enumerated) [${cmd.toPrettyString()}]')
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]')
          ..add('planId', planId)
          ..add('params', '$params (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'PlanGeneration',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'cmd': cmd.value,
        'op': op.value,
        'plan_id': planId,
        'params': params,
      };
}

/// Plan Generation builder class
///
class PlanGenerationBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<PlanGeneration, PlanGenerationBuilder> {
  _$PlanGeneration? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  PlanGenerationEnumCmd _cmd = PlanGenerationEnumCmd(0);
  PlanGenerationEnumCmd get cmd => _$this._cmd;
  set cmd(PlanGenerationEnumCmd cmd) => _$this._cmd = cmd;

  PlanGenerationEnumOp _op = PlanGenerationEnumOp(0);
  PlanGenerationEnumOp get op => _$this._op;
  set op(PlanGenerationEnumOp op) => _$this._op = op;

  String _planId = '';
  String get planId => _$this._planId;
  set planId(String planId) => _$this._planId = planId;

  String _params = '';
  String get params => _$this._params;
  set params(String params) => _$this._params = params;

  PlanGenerationBuilder();

  PlanGenerationBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  PlanGenerationBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$PlanGeneration.fromJson(json);
    replace(v);
  }

  @override
  PlanGenerationBuilder fromJson(core.Map<String, dynamic> json) =>
      PlanGenerationBuilder.fromJson(json);

  @override
  PlanGenerationBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      PlanGenerationBuilder()..copyFromHeader(headerFrom);

  PlanGenerationBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _cmd = _$v!.cmd;
      _op = _$v!.op;
      _planId = _$v!.planId;
      _params = _$v!.params;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(PlanGeneration other) {
    _$v = other as _$PlanGeneration;
  }

  @override
  void update(void Function(PlanGenerationBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  PlanGeneration build() {
    final result = _$v ??
        _$PlanGeneration._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            cmd: cmd,
            op: op,
            planId: planId,
            params: params);
    replace(result);
    return result;
  }
}

/// Leader State immutable class
///
class _$LeaderState extends LeaderState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String groupName;
  @override
  final LeaderStateEnumOp op;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double height;
  @override
  final double x;
  @override
  final double y;
  @override
  final double z;
  @override
  final double phi;
  @override
  final double theta;
  @override
  final double psi;
  @override
  final double vx;
  @override
  final double vy;
  @override
  final double vz;
  @override
  final double p;
  @override
  final double q;
  @override
  final double r;
  @override
  final double svx;
  @override
  final double svy;
  @override
  final double svz;

  factory _$LeaderState([void Function(LeaderStateBuilder b)? updates]) =>
      (LeaderStateBuilder()..update(updates)).build() as _$LeaderState;

  factory _$LeaderState.fromJson(core.Map<String, dynamic> json) {
    var val = LeaderStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.groupName = json.containsKey('group_name') && json['group_name'] != null
        ? json['group_name'] as String
        : '';
    val.op = json.containsKey('op') && json['op'] != null
        ? LeaderStateEnumOp(json['op'] as int)
        : LeaderStateEnumOp(0);
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.height = json.containsKey('height') ? json['height'] as double : 0;
    val.x = json.containsKey('x') ? json['x'] as double : 0;
    val.y = json.containsKey('y') ? json['y'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.phi = json.containsKey('phi') ? json['phi'] as double : 0;
    val.theta = json.containsKey('theta') ? json['theta'] as double : 0;
    val.psi = json.containsKey('psi') ? json['psi'] as double : 0;
    val.vx = json.containsKey('vx') ? json['vx'] as double : 0;
    val.vy = json.containsKey('vy') ? json['vy'] as double : 0;
    val.vz = json.containsKey('vz') ? json['vz'] as double : 0;
    val.p = json.containsKey('p') ? json['p'] as double : 0;
    val.q = json.containsKey('q') ? json['q'] as double : 0;
    val.r = json.containsKey('r') ? json['r'] as double : 0;
    val.svx = json.containsKey('svx') ? json['svx'] as double : 0;
    val.svy = json.containsKey('svy') ? json['svy'] as double : 0;
    val.svz = json.containsKey('svz') ? json['svz'] as double : 0;

    return val.build() as _$LeaderState;
  }

  _$LeaderState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.groupName,
      required this.op,
      required this.lat,
      required this.lon,
      required this.height,
      required this.x,
      required this.y,
      required this.z,
      required this.phi,
      required this.theta,
      required this.psi,
      required this.vx,
      required this.vy,
      required this.vz,
      required this.p,
      required this.q,
      required this.r,
      required this.svx,
      required this.svy,
      required this.svz})
      : super._();

  @override
  LeaderState rebuild(void Function(LeaderStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  LeaderStateBuilder toBuilder() => LeaderStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is LeaderState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        groupName == other.groupName &&
        op == other.op &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (height == other.height || height - other.height <= 1E-7) &&
        (x == other.x || x - other.x <= 1E-7) &&
        (y == other.y || y - other.y <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        (phi == other.phi || phi - other.phi <= 1E-7) &&
        (theta == other.theta || theta - other.theta <= 1E-7) &&
        (psi == other.psi || psi - other.psi <= 1E-7) &&
        (vx == other.vx || vx - other.vx <= 1E-7) &&
        (vy == other.vy || vy - other.vy <= 1E-7) &&
        (vz == other.vz || vz - other.vz <= 1E-7) &&
        (p == other.p || p - other.p <= 1E-7) &&
        (q == other.q || q - other.q <= 1E-7) &&
        (r == other.r || r - other.r <= 1E-7) &&
        (svx == other.svx || svx - other.svx <= 1E-7) &&
        (svy == other.svy || svy - other.svy <= 1E-7) &&
        (svz == other.svz || svz - other.svz <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc($jc($jc($jc($jc($jc(0, timestamp?.hashCode ?? null.hashCode), src.hashCode), srcEnt.hashCode), dst.hashCode), dstEnt.hashCode), groupName.hashCode),
                                                                                op.hashCode),
                                                                            lat.hashCode),
                                                                        lon.hashCode),
                                                                    height.hashCode),
                                                                x.hashCode),
                                                            y.hashCode),
                                                        z.hashCode),
                                                    phi.hashCode),
                                                theta.hashCode),
                                            psi.hashCode),
                                        vx.hashCode),
                                    vy.hashCode),
                                vz.hashCode),
                            p.hashCode),
                        q.hashCode),
                    r.hashCode),
                svx.hashCode),
            svy.hashCode),
        svz.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('LeaderState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('groupName', groupName)
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('height', '$height (m)')
          ..add('x', '$x (m)')
          ..add('y', '$y (m)')
          ..add('z', '$z (m)')
          ..add('phi', '$phi (rad) [${phi * 180.0 / math.pi} (deg)]')
          ..add('theta', '$theta (rad) [${theta * 180.0 / math.pi} (deg)]')
          ..add('psi', '$psi (rad) [${psi * 180.0 / math.pi} (deg)]')
          ..add('vx', '$vx (m/s)')
          ..add('vy', '$vy (m/s)')
          ..add('vz', '$vz (m/s)')
          ..add('p', '$p (rad/s) [${p * 180.0 / math.pi} (deg/s)]')
          ..add('q', '$q (rad/s) [${q * 180.0 / math.pi} (deg/s)]')
          ..add('r', '$r (rad/s) [${r * 180.0 / math.pi} (deg/s)]')
          ..add('svx', '$svx (m/s)')
          ..add('svy', '$svy (m/s)')
          ..add('svz', '$svz (m/s)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'LeaderState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'group_name': groupName,
        'op': op.value,
        'lat': lat,
        'lon': lon,
        'height': height,
        'x': x,
        'y': y,
        'z': z,
        'phi': phi,
        'theta': theta,
        'psi': psi,
        'vx': vx,
        'vy': vy,
        'vz': vz,
        'p': p,
        'q': q,
        'r': r,
        'svx': svx,
        'svy': svy,
        'svz': svz,
      };
}

/// Leader State builder class
///
class LeaderStateBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<LeaderState, LeaderStateBuilder> {
  _$LeaderState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _groupName = '';
  String get groupName => _$this._groupName;
  set groupName(String groupName) => _$this._groupName = groupName;

  LeaderStateEnumOp _op = LeaderStateEnumOp(0);
  LeaderStateEnumOp get op => _$this._op;
  set op(LeaderStateEnumOp op) => _$this._op = op;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _height = 0;
  double get height => _$this._height;
  set height(double height) => _$this._height = height;

  double _x = 0;
  double get x => _$this._x;
  set x(double x) => _$this._x = x;

  double _y = 0;
  double get y => _$this._y;
  set y(double y) => _$this._y = y;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  double _phi = 0;
  double get phi => _$this._phi;
  set phi(double phi) => _$this._phi = phi;

  double _theta = 0;
  double get theta => _$this._theta;
  set theta(double theta) => _$this._theta = theta;

  double _psi = 0;
  double get psi => _$this._psi;
  set psi(double psi) => _$this._psi = psi;

  double _vx = 0;
  double get vx => _$this._vx;
  set vx(double vx) => _$this._vx = vx;

  double _vy = 0;
  double get vy => _$this._vy;
  set vy(double vy) => _$this._vy = vy;

  double _vz = 0;
  double get vz => _$this._vz;
  set vz(double vz) => _$this._vz = vz;

  double _p = 0;
  double get p => _$this._p;
  set p(double p) => _$this._p = p;

  double _q = 0;
  double get q => _$this._q;
  set q(double q) => _$this._q = q;

  double _r = 0;
  double get r => _$this._r;
  set r(double r) => _$this._r = r;

  double _svx = 0;
  double get svx => _$this._svx;
  set svx(double svx) => _$this._svx = svx;

  double _svy = 0;
  double get svy => _$this._svy;
  set svy(double svy) => _$this._svy = svy;

  double _svz = 0;
  double get svz => _$this._svz;
  set svz(double svz) => _$this._svz = svz;

  LeaderStateBuilder();

  LeaderStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  LeaderStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$LeaderState.fromJson(json);
    replace(v);
  }

  @override
  LeaderStateBuilder fromJson(core.Map<String, dynamic> json) =>
      LeaderStateBuilder.fromJson(json);

  @override
  LeaderStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      LeaderStateBuilder()..copyFromHeader(headerFrom);

  LeaderStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _groupName = _$v!.groupName;
      _op = _$v!.op;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _height = _$v!.height;
      _x = _$v!.x;
      _y = _$v!.y;
      _z = _$v!.z;
      _phi = _$v!.phi;
      _theta = _$v!.theta;
      _psi = _$v!.psi;
      _vx = _$v!.vx;
      _vy = _$v!.vy;
      _vz = _$v!.vz;
      _p = _$v!.p;
      _q = _$v!.q;
      _r = _$v!.r;
      _svx = _$v!.svx;
      _svy = _$v!.svy;
      _svz = _$v!.svz;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(LeaderState other) {
    _$v = other as _$LeaderState;
  }

  @override
  void update(void Function(LeaderStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  LeaderState build() {
    final result = _$v ??
        _$LeaderState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            groupName: groupName,
            op: op,
            lat: lat,
            lon: lon,
            height: height,
            x: x,
            y: y,
            z: z,
            phi: phi,
            theta: theta,
            psi: psi,
            vx: vx,
            vy: vy,
            vz: vz,
            p: p,
            q: q,
            r: r,
            svx: svx,
            svy: svy,
            svz: svz);
    replace(result);
    return result;
  }
}

/// Plan Statistics immutable class
///
class _$PlanStatistics extends PlanStatistics {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String planId;
  @override
  final PlanStatisticsEnumType type;
  @override
  final PlanStatisticsBitfieldProperties properties;
  @override
  final String durations;
  @override
  final String distances;
  @override
  final String actions;
  @override
  final String fuel;

  factory _$PlanStatistics([void Function(PlanStatisticsBuilder b)? updates]) =>
      (PlanStatisticsBuilder()..update(updates)).build() as _$PlanStatistics;

  factory _$PlanStatistics.fromJson(core.Map<String, dynamic> json) {
    var val = PlanStatisticsBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.planId = json.containsKey('plan_id') && json['plan_id'] != null
        ? json['plan_id'] as String
        : '';
    val.type = json.containsKey('type') && json['type'] != null
        ? PlanStatisticsEnumType(json['type'] as int)
        : PlanStatisticsEnumType(0);
    val.properties =
        json.containsKey('properties') && json['properties'] != null
            ? PlanStatisticsBitfieldProperties(json['properties'] as int)
            : PlanStatisticsBitfieldProperties(0);
    val.durations = json.containsKey('durations') && json['durations'] != null
        ? json['durations'] as String
        : '';
    val.distances = json.containsKey('distances') && json['distances'] != null
        ? json['distances'] as String
        : '';
    val.actions = json.containsKey('actions') && json['actions'] != null
        ? json['actions'] as String
        : '';
    val.fuel = json.containsKey('fuel') && json['fuel'] != null
        ? json['fuel'] as String
        : '';

    return val.build() as _$PlanStatistics;
  }

  _$PlanStatistics._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.planId,
      required this.type,
      required this.properties,
      required this.durations,
      required this.distances,
      required this.actions,
      required this.fuel})
      : super._();

  @override
  PlanStatistics rebuild(void Function(PlanStatisticsBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  PlanStatisticsBuilder toBuilder() => PlanStatisticsBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is PlanStatistics &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        planId == other.planId &&
        type == other.type &&
        properties == other.properties &&
        durations == other.durations &&
        distances == other.distances &&
        actions == other.actions &&
        fuel == other.fuel;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    0,
                                                    timestamp?.hashCode ??
                                                        null.hashCode),
                                                src.hashCode),
                                            srcEnt.hashCode),
                                        dst.hashCode),
                                    dstEnt.hashCode),
                                planId.hashCode),
                            type.hashCode),
                        properties.hashCode),
                    durations.hashCode),
                distances.hashCode),
            actions.hashCode),
        fuel.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('PlanStatistics')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('planId', planId)
          ..add('type', '$type (Enumerated) [${type.toPrettyString()}]')
          ..add('properties',
              '$properties (Bitfield) [${properties.toPrettyString()}]')
          ..add('durations', '$durations (TupleList)')
          ..add('distances', '$distances (TupleList)')
          ..add('actions', '$actions (TupleList)')
          ..add('fuel', '$fuel (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'PlanStatistics',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'plan_id': planId,
        'type': type.value,
        'properties': properties.value,
        'durations': durations,
        'distances': distances,
        'actions': actions,
        'fuel': fuel,
      };
}

/// Plan Statistics builder class
///
class PlanStatisticsBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<PlanStatistics, PlanStatisticsBuilder> {
  _$PlanStatistics? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _planId = '';
  String get planId => _$this._planId;
  set planId(String planId) => _$this._planId = planId;

  PlanStatisticsEnumType _type = PlanStatisticsEnumType(0);
  PlanStatisticsEnumType get type => _$this._type;
  set type(PlanStatisticsEnumType type) => _$this._type = type;

  PlanStatisticsBitfieldProperties _properties =
      PlanStatisticsBitfieldProperties(0);
  PlanStatisticsBitfieldProperties get properties => _$this._properties;
  set properties(PlanStatisticsBitfieldProperties properties) =>
      _$this._properties = properties;

  String _durations = '';
  String get durations => _$this._durations;
  set durations(String durations) => _$this._durations = durations;

  String _distances = '';
  String get distances => _$this._distances;
  set distances(String distances) => _$this._distances = distances;

  String _actions = '';
  String get actions => _$this._actions;
  set actions(String actions) => _$this._actions = actions;

  String _fuel = '';
  String get fuel => _$this._fuel;
  set fuel(String fuel) => _$this._fuel = fuel;

  PlanStatisticsBuilder();

  PlanStatisticsBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  PlanStatisticsBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$PlanStatistics.fromJson(json);
    replace(v);
  }

  @override
  PlanStatisticsBuilder fromJson(core.Map<String, dynamic> json) =>
      PlanStatisticsBuilder.fromJson(json);

  @override
  PlanStatisticsBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      PlanStatisticsBuilder()..copyFromHeader(headerFrom);

  PlanStatisticsBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _planId = _$v!.planId;
      _type = _$v!.type;
      _properties = _$v!.properties;
      _durations = _$v!.durations;
      _distances = _$v!.distances;
      _actions = _$v!.actions;
      _fuel = _$v!.fuel;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(PlanStatistics other) {
    _$v = other as _$PlanStatistics;
  }

  @override
  void update(void Function(PlanStatisticsBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  PlanStatistics build() {
    final result = _$v ??
        _$PlanStatistics._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            planId: planId,
            type: type,
            properties: properties,
            durations: durations,
            distances: distances,
            actions: actions,
            fuel: fuel);
    replace(result);
    return result;
  }
}

/// Reported State immutable class
///
class _$ReportedState extends ReportedState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double lat;
  @override
  final double lon;
  @override
  final double depth;
  @override
  final double roll;
  @override
  final double pitch;
  @override
  final double yaw;
  @override
  final double rcpTime;
  @override
  final String sid;
  @override
  final ReportedStateEnumSType sType;

  factory _$ReportedState([void Function(ReportedStateBuilder b)? updates]) =>
      (ReportedStateBuilder()..update(updates)).build() as _$ReportedState;

  factory _$ReportedState.fromJson(core.Map<String, dynamic> json) {
    var val = ReportedStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.depth = json.containsKey('depth') ? json['depth'] as double : 0;
    val.roll = json.containsKey('roll') ? json['roll'] as double : 0;
    val.pitch = json.containsKey('pitch') ? json['pitch'] as double : 0;
    val.yaw = json.containsKey('yaw') ? json['yaw'] as double : 0;
    val.rcpTime = json.containsKey('rcp_time') ? json['rcp_time'] as double : 0;
    val.sid = json.containsKey('sid') && json['sid'] != null
        ? json['sid'] as String
        : '';
    val.sType = json.containsKey('s_type') && json['s_type'] != null
        ? ReportedStateEnumSType(json['s_type'] as int)
        : ReportedStateEnumSType(0);

    return val.build() as _$ReportedState;
  }

  _$ReportedState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.lat,
      required this.lon,
      required this.depth,
      required this.roll,
      required this.pitch,
      required this.yaw,
      required this.rcpTime,
      required this.sid,
      required this.sType})
      : super._();

  @override
  ReportedState rebuild(void Function(ReportedStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  ReportedStateBuilder toBuilder() => ReportedStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is ReportedState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (depth == other.depth || depth - other.depth <= 1E-7) &&
        (roll == other.roll || roll - other.roll <= 1E-7) &&
        (pitch == other.pitch || pitch - other.pitch <= 1E-7) &&
        (yaw == other.yaw || yaw - other.yaw <= 1E-7) &&
        (rcpTime == other.rcpTime || rcpTime - other.rcpTime <= 1E-7) &&
        sid == other.sid &&
        sType == other.sType;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            0,
                                                            timestamp
                                                                    ?.hashCode ??
                                                                null.hashCode),
                                                        src.hashCode),
                                                    srcEnt.hashCode),
                                                dst.hashCode),
                                            dstEnt.hashCode),
                                        lat.hashCode),
                                    lon.hashCode),
                                depth.hashCode),
                            roll.hashCode),
                        pitch.hashCode),
                    yaw.hashCode),
                rcpTime.hashCode),
            sid.hashCode),
        sType.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('ReportedState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('depth', '$depth (m)')
          ..add('roll', '$roll (rad) [${roll * 180.0 / math.pi} (deg)]')
          ..add('pitch', '$pitch (rad) [${pitch * 180.0 / math.pi} (deg)]')
          ..add('yaw', '$yaw (rad) [${yaw * 180.0 / math.pi} (deg)]')
          ..add('rcpTime', '$rcpTime (s)')
          ..add('sid', sid)
          ..add('sType', '$sType (Enumerated) [${sType.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'ReportedState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'lat': lat,
        'lon': lon,
        'depth': depth,
        'roll': roll,
        'pitch': pitch,
        'yaw': yaw,
        'rcp_time': rcpTime,
        'sid': sid,
        's_type': sType.value,
      };
}

/// Reported State builder class
///
class ReportedStateBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<ReportedState, ReportedStateBuilder> {
  _$ReportedState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _depth = 0;
  double get depth => _$this._depth;
  set depth(double depth) => _$this._depth = depth;

  double _roll = 0;
  double get roll => _$this._roll;
  set roll(double roll) => _$this._roll = roll;

  double _pitch = 0;
  double get pitch => _$this._pitch;
  set pitch(double pitch) => _$this._pitch = pitch;

  double _yaw = 0;
  double get yaw => _$this._yaw;
  set yaw(double yaw) => _$this._yaw = yaw;

  double _rcpTime = 0;
  double get rcpTime => _$this._rcpTime;
  set rcpTime(double rcpTime) => _$this._rcpTime = rcpTime;

  String _sid = '';
  String get sid => _$this._sid;
  set sid(String sid) => _$this._sid = sid;

  ReportedStateEnumSType _sType = ReportedStateEnumSType(0);
  ReportedStateEnumSType get sType => _$this._sType;
  set sType(ReportedStateEnumSType sType) => _$this._sType = sType;

  ReportedStateBuilder();

  ReportedStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  ReportedStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$ReportedState.fromJson(json);
    replace(v);
  }

  @override
  ReportedStateBuilder fromJson(core.Map<String, dynamic> json) =>
      ReportedStateBuilder.fromJson(json);

  @override
  ReportedStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      ReportedStateBuilder()..copyFromHeader(headerFrom);

  ReportedStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _depth = _$v!.depth;
      _roll = _$v!.roll;
      _pitch = _$v!.pitch;
      _yaw = _$v!.yaw;
      _rcpTime = _$v!.rcpTime;
      _sid = _$v!.sid;
      _sType = _$v!.sType;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(ReportedState other) {
    _$v = other as _$ReportedState;
  }

  @override
  void update(void Function(ReportedStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  ReportedState build() {
    final result = _$v ??
        _$ReportedState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            lat: lat,
            lon: lon,
            depth: depth,
            roll: roll,
            pitch: pitch,
            yaw: yaw,
            rcpTime: rcpTime,
            sid: sid,
            sType: sType);
    replace(result);
    return result;
  }
}

/// Remote Sensor Info immutable class
///
class _$RemoteSensorInfo extends RemoteSensorInfo {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String id;
  @override
  final String sensorClass;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double alt;
  @override
  final double heading;
  @override
  final String data;

  factory _$RemoteSensorInfo(
          [void Function(RemoteSensorInfoBuilder b)? updates]) =>
      (RemoteSensorInfoBuilder()..update(updates)).build()
          as _$RemoteSensorInfo;

  factory _$RemoteSensorInfo.fromJson(core.Map<String, dynamic> json) {
    var val = RemoteSensorInfoBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.id = json.containsKey('id') && json['id'] != null
        ? json['id'] as String
        : '';
    val.sensorClass =
        json.containsKey('sensor_class') && json['sensor_class'] != null
            ? json['sensor_class'] as String
            : '';
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.alt = json.containsKey('alt') ? json['alt'] as double : 0;
    val.heading = json.containsKey('heading') ? json['heading'] as double : 0;
    val.data = json.containsKey('data') && json['data'] != null
        ? json['data'] as String
        : '';

    return val.build() as _$RemoteSensorInfo;
  }

  _$RemoteSensorInfo._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.id,
      required this.sensorClass,
      required this.lat,
      required this.lon,
      required this.alt,
      required this.heading,
      required this.data})
      : super._();

  @override
  RemoteSensorInfo rebuild(void Function(RemoteSensorInfoBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  RemoteSensorInfoBuilder toBuilder() =>
      RemoteSensorInfoBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is RemoteSensorInfo &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        id == other.id &&
        sensorClass == other.sensorClass &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (alt == other.alt || alt - other.alt <= 1E-7) &&
        (heading == other.heading || heading - other.heading <= 1E-7) &&
        data == other.data;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    0,
                                                    timestamp?.hashCode ??
                                                        null.hashCode),
                                                src.hashCode),
                                            srcEnt.hashCode),
                                        dst.hashCode),
                                    dstEnt.hashCode),
                                id.hashCode),
                            sensorClass.hashCode),
                        lat.hashCode),
                    lon.hashCode),
                alt.hashCode),
            heading.hashCode),
        data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('RemoteSensorInfo')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('id', id)
          ..add('sensorClass', sensorClass)
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('alt', '$alt (m)')
          ..add(
              'heading', '$heading (rad) [${heading * 180.0 / math.pi} (deg)]')
          ..add('data', '$data (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'RemoteSensorInfo',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'id': id,
        'sensor_class': sensorClass,
        'lat': lat,
        'lon': lon,
        'alt': alt,
        'heading': heading,
        'data': data,
      };
}

/// Remote Sensor Info builder class
///
class RemoteSensorInfoBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<RemoteSensorInfo, RemoteSensorInfoBuilder> {
  _$RemoteSensorInfo? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _id = '';
  String get id => _$this._id;
  set id(String id) => _$this._id = id;

  String _sensorClass = '';
  String get sensorClass => _$this._sensorClass;
  set sensorClass(String sensorClass) => _$this._sensorClass = sensorClass;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _alt = 0;
  double get alt => _$this._alt;
  set alt(double alt) => _$this._alt = alt;

  double _heading = 0;
  double get heading => _$this._heading;
  set heading(double heading) => _$this._heading = heading;

  String _data = '';
  String get data => _$this._data;
  set data(String data) => _$this._data = data;

  RemoteSensorInfoBuilder();

  RemoteSensorInfoBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  RemoteSensorInfoBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$RemoteSensorInfo.fromJson(json);
    replace(v);
  }

  @override
  RemoteSensorInfoBuilder fromJson(core.Map<String, dynamic> json) =>
      RemoteSensorInfoBuilder.fromJson(json);

  @override
  RemoteSensorInfoBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      RemoteSensorInfoBuilder()..copyFromHeader(headerFrom);

  RemoteSensorInfoBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _id = _$v!.id;
      _sensorClass = _$v!.sensorClass;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _alt = _$v!.alt;
      _heading = _$v!.heading;
      _data = _$v!.data;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(RemoteSensorInfo other) {
    _$v = other as _$RemoteSensorInfo;
  }

  @override
  void update(void Function(RemoteSensorInfoBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  RemoteSensorInfo build() {
    final result = _$v ??
        _$RemoteSensorInfo._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            id: id,
            sensorClass: sensorClass,
            lat: lat,
            lon: lon,
            alt: alt,
            heading: heading,
            data: data);
    replace(result);
    return result;
  }
}

/// Map immutable class
///
class _$Map extends Map {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String id;
  @override
  final List<MapFeature> features;

  factory _$Map([void Function(MapBuilder b)? updates]) =>
      (MapBuilder()..update(updates)).build() as _$Map;

  factory _$Map.fromJson(core.Map<String, dynamic> json) {
    var val = MapBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.id = json.containsKey('id') && json['id'] != null
        ? json['id'] as String
        : '';
    var features = <MapFeature>[];
    if (json.containsKey('features') && json['features'] != null) {
      var listJson = json['features'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as MapFeature?;
          if (m != null) features.add(m);
        }
      }
    }
    val.features = features;

    return val.build() as _$Map;
  }

  _$Map._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.id,
      required this.features})
      : super._();

  @override
  Map rebuild(void Function(MapBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  MapBuilder toBuilder() => MapBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Map &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        id == other.id &&
        DeepCollectionEquality().equals(features, other.features);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            id.hashCode),
        features.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Map')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('id', id)
          ..add('features', '$features'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Map',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'id': id,
        'features': [
          ...features.map((m) => m.toJson(false)),
        ],
      };
}

/// Map builder class
///
class MapBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Map, MapBuilder> {
  _$Map? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _id = '';
  String get id => _$this._id;
  set id(String id) => _$this._id = id;

  List<MapFeature> _features = <MapFeature>[];
  List<MapFeature> get features => _$this._features;
  set features(List<MapFeature> features) => _$this._features = features;

  MapBuilder();

  MapBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  MapBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Map.fromJson(json);
    replace(v);
  }

  @override
  MapBuilder fromJson(core.Map<String, dynamic> json) =>
      MapBuilder.fromJson(json);

  @override
  MapBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      MapBuilder()..copyFromHeader(headerFrom);

  MapBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _id = _$v!.id;
      _features = _$v!.features;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Map other) {
    _$v = other as _$Map;
  }

  @override
  void update(void Function(MapBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Map build() {
    final result = _$v ??
        _$Map._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            id: id,
            features: features);
    replace(result);
    return result;
  }
}

/// Map Feature immutable class
///
class _$MapFeature extends MapFeature {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String id;
  @override
  final MapFeatureEnumFeatureType featureType;
  @override
  final int rgbRed;
  @override
  final int rgbGreen;
  @override
  final int rgbBlue;
  @override
  final List<MapPoint> feature;

  factory _$MapFeature([void Function(MapFeatureBuilder b)? updates]) =>
      (MapFeatureBuilder()..update(updates)).build() as _$MapFeature;

  factory _$MapFeature.fromJson(core.Map<String, dynamic> json) {
    var val = MapFeatureBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.id = json.containsKey('id') && json['id'] != null
        ? json['id'] as String
        : '';
    val.featureType =
        json.containsKey('feature_type') && json['feature_type'] != null
            ? MapFeatureEnumFeatureType(json['feature_type'] as int)
            : MapFeatureEnumFeatureType(0);
    val.rgbRed = json.containsKey('rgb_red') ? json['rgb_red'] as int : 0;
    val.rgbGreen = json.containsKey('rgb_green') ? json['rgb_green'] as int : 0;
    val.rgbBlue = json.containsKey('rgb_blue') ? json['rgb_blue'] as int : 0;
    var feature = <MapPoint>[];
    if (json.containsKey('feature') && json['feature'] != null) {
      var listJson = json['feature'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as MapPoint?;
          if (m != null) feature.add(m);
        }
      }
    }
    val.feature = feature;

    return val.build() as _$MapFeature;
  }

  _$MapFeature._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.id,
      required this.featureType,
      required this.rgbRed,
      required this.rgbGreen,
      required this.rgbBlue,
      required this.feature})
      : super._();

  @override
  MapFeature rebuild(void Function(MapFeatureBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  MapFeatureBuilder toBuilder() => MapFeatureBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is MapFeature &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        id == other.id &&
        featureType == other.featureType &&
        rgbRed == other.rgbRed &&
        rgbGreen == other.rgbGreen &&
        rgbBlue == other.rgbBlue &&
        DeepCollectionEquality().equals(feature, other.feature);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                0,
                                                timestamp?.hashCode ??
                                                    null.hashCode),
                                            src.hashCode),
                                        srcEnt.hashCode),
                                    dst.hashCode),
                                dstEnt.hashCode),
                            id.hashCode),
                        featureType.hashCode),
                    rgbRed.hashCode),
                rgbGreen.hashCode),
            rgbBlue.hashCode),
        feature.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('MapFeature')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('id', id)
          ..add('featureType',
              '$featureType (Enumerated) [${featureType.toPrettyString()}]')
          ..add('rgbRed', '$rgbRed')
          ..add('rgbGreen', '$rgbGreen')
          ..add('rgbBlue', '$rgbBlue')
          ..add('feature', '$feature'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'MapFeature',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'id': id,
        'feature_type': featureType.value,
        'rgb_red': rgbRed,
        'rgb_green': rgbGreen,
        'rgb_blue': rgbBlue,
        'feature': [
          ...feature.map((m) => m.toJson(false)),
        ],
      };
}

/// Map Feature builder class
///
class MapFeatureBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<MapFeature, MapFeatureBuilder> {
  _$MapFeature? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _id = '';
  String get id => _$this._id;
  set id(String id) => _$this._id = id;

  MapFeatureEnumFeatureType _featureType = MapFeatureEnumFeatureType(0);
  MapFeatureEnumFeatureType get featureType => _$this._featureType;
  set featureType(MapFeatureEnumFeatureType featureType) =>
      _$this._featureType = featureType;

  int _rgbRed = 0;
  int get rgbRed => _$this._rgbRed;
  set rgbRed(int rgbRed) => _$this._rgbRed = rgbRed;

  int _rgbGreen = 0;
  int get rgbGreen => _$this._rgbGreen;
  set rgbGreen(int rgbGreen) => _$this._rgbGreen = rgbGreen;

  int _rgbBlue = 0;
  int get rgbBlue => _$this._rgbBlue;
  set rgbBlue(int rgbBlue) => _$this._rgbBlue = rgbBlue;

  List<MapPoint> _feature = <MapPoint>[];
  List<MapPoint> get feature => _$this._feature;
  set feature(List<MapPoint> feature) => _$this._feature = feature;

  MapFeatureBuilder();

  MapFeatureBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  MapFeatureBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$MapFeature.fromJson(json);
    replace(v);
  }

  @override
  MapFeatureBuilder fromJson(core.Map<String, dynamic> json) =>
      MapFeatureBuilder.fromJson(json);

  @override
  MapFeatureBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      MapFeatureBuilder()..copyFromHeader(headerFrom);

  MapFeatureBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _id = _$v!.id;
      _featureType = _$v!.featureType;
      _rgbRed = _$v!.rgbRed;
      _rgbGreen = _$v!.rgbGreen;
      _rgbBlue = _$v!.rgbBlue;
      _feature = _$v!.feature;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(MapFeature other) {
    _$v = other as _$MapFeature;
  }

  @override
  void update(void Function(MapFeatureBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  MapFeature build() {
    final result = _$v ??
        _$MapFeature._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            id: id,
            featureType: featureType,
            rgbRed: rgbRed,
            rgbGreen: rgbGreen,
            rgbBlue: rgbBlue,
            feature: feature);
    replace(result);
    return result;
  }
}

/// MapPoint immutable class
///
class _$MapPoint extends MapPoint {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double lat;
  @override
  final double lon;
  @override
  final double alt;

  factory _$MapPoint([void Function(MapPointBuilder b)? updates]) =>
      (MapPointBuilder()..update(updates)).build() as _$MapPoint;

  factory _$MapPoint.fromJson(core.Map<String, dynamic> json) {
    var val = MapPointBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.alt = json.containsKey('alt') ? json['alt'] as double : 0;

    return val.build() as _$MapPoint;
  }

  _$MapPoint._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.lat,
      required this.lon,
      required this.alt})
      : super._();

  @override
  MapPoint rebuild(void Function(MapPointBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  MapPointBuilder toBuilder() => MapPointBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is MapPoint &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (alt == other.alt || alt - other.alt <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                lat.hashCode),
            lon.hashCode),
        alt.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('MapPoint')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('alt', '$alt (m)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'MapPoint',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'lat': lat,
        'lon': lon,
        'alt': alt,
      };
}

/// MapPoint builder class
///
class MapPointBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<MapPoint, MapPointBuilder> {
  _$MapPoint? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _alt = 0;
  double get alt => _$this._alt;
  set alt(double alt) => _$this._alt = alt;

  MapPointBuilder();

  MapPointBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  MapPointBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$MapPoint.fromJson(json);
    replace(v);
  }

  @override
  MapPointBuilder fromJson(core.Map<String, dynamic> json) =>
      MapPointBuilder.fromJson(json);

  @override
  MapPointBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      MapPointBuilder()..copyFromHeader(headerFrom);

  MapPointBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _alt = _$v!.alt;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(MapPoint other) {
    _$v = other as _$MapPoint;
  }

  @override
  void update(void Function(MapPointBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  MapPoint build() {
    final result = _$v ??
        _$MapPoint._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            lat: lat,
            lon: lon,
            alt: alt);
    replace(result);
    return result;
  }
}

/// CCU Event immutable class
///
class _$CcuEvent extends CcuEvent {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final CcuEventEnumType type;
  @override
  final String id;
  @override
  final ImcMessage? arg;

  factory _$CcuEvent([void Function(CcuEventBuilder b)? updates]) =>
      (CcuEventBuilder()..update(updates)).build() as _$CcuEvent;

  factory _$CcuEvent.fromJson(core.Map<String, dynamic> json) {
    var val = CcuEventBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.type = json.containsKey('type') && json['type'] != null
        ? CcuEventEnumType(json['type'] as int)
        : CcuEventEnumType(0);
    val.id = json.containsKey('id') && json['id'] != null
        ? json['id'] as String
        : '';

    ImcMessage? arg;
    if (json.containsKey('arg') && json['arg'] != null) {
      var msgJson = json['arg'] as core.Map<String, dynamic>;
      if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
        var msgType = msgJson['abbrev'] as String;
        var builder = messagesBuilders[msgType]?.call();
        builder = builder?.fromJson(msgJson);
        arg = builder?.build() as ImcMessage?;
      }
    }
    val.arg = arg;

    return val.build() as _$CcuEvent;
  }

  _$CcuEvent._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.type,
      required this.id,
      this.arg})
      : super._();

  @override
  CcuEvent rebuild(void Function(CcuEventBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  CcuEventBuilder toBuilder() => CcuEventBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is CcuEvent &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        type == other.type &&
        id == other.id &&
        arg == other.arg;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                type.hashCode),
            id.hashCode),
        arg?.hashCode ?? null.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('CcuEvent')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('type', '$type (Enumerated) [${type.toPrettyString()}]')
          ..add('id', id)
          ..add('arg', '$arg'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'CcuEvent',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'type': type.value,
        'id': id,
        'arg': arg?.toJson(false),
      };
}

/// CCU Event builder class
///
class CcuEventBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<CcuEvent, CcuEventBuilder> {
  _$CcuEvent? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  CcuEventEnumType _type = CcuEventEnumType(0);
  CcuEventEnumType get type => _$this._type;
  set type(CcuEventEnumType type) => _$this._type = type;

  String _id = '';
  String get id => _$this._id;
  set id(String id) => _$this._id = id;

  ImcMessage? _arg;
  ImcMessage? get arg => _$this._arg;
  set arg(ImcMessage? arg) => _$this._arg = arg;

  CcuEventBuilder();

  CcuEventBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  CcuEventBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$CcuEvent.fromJson(json);
    replace(v);
  }

  @override
  CcuEventBuilder fromJson(core.Map<String, dynamic> json) =>
      CcuEventBuilder.fromJson(json);

  @override
  CcuEventBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      CcuEventBuilder()..copyFromHeader(headerFrom);

  CcuEventBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _type = _$v!.type;
      _id = _$v!.id;
      _arg = _$v!.arg;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(CcuEvent other) {
    _$v = other as _$CcuEvent;
  }

  @override
  void update(void Function(CcuEventBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  CcuEvent build() {
    final result = _$v ??
        _$CcuEvent._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            type: type,
            id: id,
            arg: arg);
    replace(result);
    return result;
  }
}

/// Vehicle Links immutable class
///
class _$VehicleLinks extends VehicleLinks {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String localname;
  @override
  final List<Announce> links;

  factory _$VehicleLinks([void Function(VehicleLinksBuilder b)? updates]) =>
      (VehicleLinksBuilder()..update(updates)).build() as _$VehicleLinks;

  factory _$VehicleLinks.fromJson(core.Map<String, dynamic> json) {
    var val = VehicleLinksBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.localname = json.containsKey('localname') && json['localname'] != null
        ? json['localname'] as String
        : '';
    var links = <Announce>[];
    if (json.containsKey('links') && json['links'] != null) {
      var listJson = json['links'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as Announce?;
          if (m != null) links.add(m);
        }
      }
    }
    val.links = links;

    return val.build() as _$VehicleLinks;
  }

  _$VehicleLinks._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.localname,
      required this.links})
      : super._();

  @override
  VehicleLinks rebuild(void Function(VehicleLinksBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  VehicleLinksBuilder toBuilder() => VehicleLinksBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is VehicleLinks &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        localname == other.localname &&
        DeepCollectionEquality().equals(links, other.links);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            localname.hashCode),
        links.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('VehicleLinks')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('localname', localname)
          ..add('links', '$links'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'VehicleLinks',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'localname': localname,
        'links': [
          ...links.map((m) => m.toJson(false)),
        ],
      };
}

/// Vehicle Links builder class
///
class VehicleLinksBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<VehicleLinks, VehicleLinksBuilder> {
  _$VehicleLinks? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _localname = '';
  String get localname => _$this._localname;
  set localname(String localname) => _$this._localname = localname;

  List<Announce> _links = <Announce>[];
  List<Announce> get links => _$this._links;
  set links(List<Announce> links) => _$this._links = links;

  VehicleLinksBuilder();

  VehicleLinksBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  VehicleLinksBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$VehicleLinks.fromJson(json);
    replace(v);
  }

  @override
  VehicleLinksBuilder fromJson(core.Map<String, dynamic> json) =>
      VehicleLinksBuilder.fromJson(json);

  @override
  VehicleLinksBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      VehicleLinksBuilder()..copyFromHeader(headerFrom);

  VehicleLinksBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _localname = _$v!.localname;
      _links = _$v!.links;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(VehicleLinks other) {
    _$v = other as _$VehicleLinks;
  }

  @override
  void update(void Function(VehicleLinksBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  VehicleLinks build() {
    final result = _$v ??
        _$VehicleLinks._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            localname: localname,
            links: links);
    replace(result);
    return result;
  }
}

/// TREX Observation immutable class
///
class _$TrexObservation extends TrexObservation {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String timeline;
  @override
  final String predicate;
  @override
  final String attributes;

  factory _$TrexObservation(
          [void Function(TrexObservationBuilder b)? updates]) =>
      (TrexObservationBuilder()..update(updates)).build() as _$TrexObservation;

  factory _$TrexObservation.fromJson(core.Map<String, dynamic> json) {
    var val = TrexObservationBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.timeline = json.containsKey('timeline') && json['timeline'] != null
        ? json['timeline'] as String
        : '';
    val.predicate = json.containsKey('predicate') && json['predicate'] != null
        ? json['predicate'] as String
        : '';
    val.attributes =
        json.containsKey('attributes') && json['attributes'] != null
            ? json['attributes'] as String
            : '';

    return val.build() as _$TrexObservation;
  }

  _$TrexObservation._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.timeline,
      required this.predicate,
      required this.attributes})
      : super._();

  @override
  TrexObservation rebuild(void Function(TrexObservationBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  TrexObservationBuilder toBuilder() => TrexObservationBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is TrexObservation &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        timeline == other.timeline &&
        predicate == other.predicate &&
        attributes == other.attributes;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                timeline.hashCode),
            predicate.hashCode),
        attributes.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('TrexObservation')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('timeline', timeline)
          ..add('predicate', predicate)
          ..add('attributes', '$attributes (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'TrexObservation',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'timeline': timeline,
        'predicate': predicate,
        'attributes': attributes,
      };
}

/// TREX Observation builder class
///
class TrexObservationBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<TrexObservation, TrexObservationBuilder> {
  _$TrexObservation? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _timeline = '';
  String get timeline => _$this._timeline;
  set timeline(String timeline) => _$this._timeline = timeline;

  String _predicate = '';
  String get predicate => _$this._predicate;
  set predicate(String predicate) => _$this._predicate = predicate;

  String _attributes = '';
  String get attributes => _$this._attributes;
  set attributes(String attributes) => _$this._attributes = attributes;

  TrexObservationBuilder();

  TrexObservationBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  TrexObservationBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$TrexObservation.fromJson(json);
    replace(v);
  }

  @override
  TrexObservationBuilder fromJson(core.Map<String, dynamic> json) =>
      TrexObservationBuilder.fromJson(json);

  @override
  TrexObservationBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      TrexObservationBuilder()..copyFromHeader(headerFrom);

  TrexObservationBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _timeline = _$v!.timeline;
      _predicate = _$v!.predicate;
      _attributes = _$v!.attributes;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(TrexObservation other) {
    _$v = other as _$TrexObservation;
  }

  @override
  void update(void Function(TrexObservationBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  TrexObservation build() {
    final result = _$v ??
        _$TrexObservation._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            timeline: timeline,
            predicate: predicate,
            attributes: attributes);
    replace(result);
    return result;
  }
}

/// TREX Command immutable class
///
class _$TrexCommand extends TrexCommand {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final TrexCommandEnumCommand command;
  @override
  final String goalId;
  @override
  final String goalXml;

  factory _$TrexCommand([void Function(TrexCommandBuilder b)? updates]) =>
      (TrexCommandBuilder()..update(updates)).build() as _$TrexCommand;

  factory _$TrexCommand.fromJson(core.Map<String, dynamic> json) {
    var val = TrexCommandBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.command = json.containsKey('command') && json['command'] != null
        ? TrexCommandEnumCommand(json['command'] as int)
        : TrexCommandEnumCommand(0);
    val.goalId = json.containsKey('goal_id') && json['goal_id'] != null
        ? json['goal_id'] as String
        : '';
    val.goalXml = json.containsKey('goal_xml') && json['goal_xml'] != null
        ? json['goal_xml'] as String
        : '';

    return val.build() as _$TrexCommand;
  }

  _$TrexCommand._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.command,
      required this.goalId,
      required this.goalXml})
      : super._();

  @override
  TrexCommand rebuild(void Function(TrexCommandBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  TrexCommandBuilder toBuilder() => TrexCommandBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is TrexCommand &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        command == other.command &&
        goalId == other.goalId &&
        goalXml == other.goalXml;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                command.hashCode),
            goalId.hashCode),
        goalXml.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('TrexCommand')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add(
              'command', '$command (Enumerated) [${command.toPrettyString()}]')
          ..add('goalId', goalId)
          ..add('goalXml', goalXml))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'TrexCommand',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'command': command.value,
        'goal_id': goalId,
        'goal_xml': goalXml,
      };
}

/// TREX Command builder class
///
class TrexCommandBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<TrexCommand, TrexCommandBuilder> {
  _$TrexCommand? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  TrexCommandEnumCommand _command = TrexCommandEnumCommand(0);
  TrexCommandEnumCommand get command => _$this._command;
  set command(TrexCommandEnumCommand command) => _$this._command = command;

  String _goalId = '';
  String get goalId => _$this._goalId;
  set goalId(String goalId) => _$this._goalId = goalId;

  String _goalXml = '';
  String get goalXml => _$this._goalXml;
  set goalXml(String goalXml) => _$this._goalXml = goalXml;

  TrexCommandBuilder();

  TrexCommandBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  TrexCommandBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$TrexCommand.fromJson(json);
    replace(v);
  }

  @override
  TrexCommandBuilder fromJson(core.Map<String, dynamic> json) =>
      TrexCommandBuilder.fromJson(json);

  @override
  TrexCommandBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      TrexCommandBuilder()..copyFromHeader(headerFrom);

  TrexCommandBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _command = _$v!.command;
      _goalId = _$v!.goalId;
      _goalXml = _$v!.goalXml;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(TrexCommand other) {
    _$v = other as _$TrexCommand;
  }

  @override
  void update(void Function(TrexCommandBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  TrexCommand build() {
    final result = _$v ??
        _$TrexCommand._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            command: command,
            goalId: goalId,
            goalXml: goalXml);
    replace(result);
    return result;
  }
}

/// TREX Operation immutable class
///
class _$TrexOperation extends TrexOperation {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final TrexOperationEnumOp op;
  @override
  final String goalId;
  @override
  final TrexToken? token;

  factory _$TrexOperation([void Function(TrexOperationBuilder b)? updates]) =>
      (TrexOperationBuilder()..update(updates)).build() as _$TrexOperation;

  factory _$TrexOperation.fromJson(core.Map<String, dynamic> json) {
    var val = TrexOperationBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.op = json.containsKey('op') && json['op'] != null
        ? TrexOperationEnumOp(json['op'] as int)
        : TrexOperationEnumOp(0);
    val.goalId = json.containsKey('goal_id') && json['goal_id'] != null
        ? json['goal_id'] as String
        : '';

    TrexToken? token;
    if (json.containsKey('token') && json['token'] != null) {
      var msgJson = json['token'] as core.Map<String, dynamic>;
      if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
        var msgType = msgJson['abbrev'] as String;
        var builder = messagesBuilders[msgType]?.call();
        builder = builder?.fromJson(msgJson);
        token = builder?.build() as TrexToken?;
      }
    }
    val.token = token;

    return val.build() as _$TrexOperation;
  }

  _$TrexOperation._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.op,
      required this.goalId,
      this.token})
      : super._();

  @override
  TrexOperation rebuild(void Function(TrexOperationBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  TrexOperationBuilder toBuilder() => TrexOperationBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is TrexOperation &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        op == other.op &&
        goalId == other.goalId &&
        token == other.token;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                op.hashCode),
            goalId.hashCode),
        token?.hashCode ?? null.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('TrexOperation')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]')
          ..add('goalId', goalId)
          ..add('token', '$token'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'TrexOperation',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'op': op.value,
        'goal_id': goalId,
        'token': token?.toJson(false),
      };
}

/// TREX Operation builder class
///
class TrexOperationBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<TrexOperation, TrexOperationBuilder> {
  _$TrexOperation? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  TrexOperationEnumOp _op = TrexOperationEnumOp(0);
  TrexOperationEnumOp get op => _$this._op;
  set op(TrexOperationEnumOp op) => _$this._op = op;

  String _goalId = '';
  String get goalId => _$this._goalId;
  set goalId(String goalId) => _$this._goalId = goalId;

  TrexToken? _token;
  TrexToken? get token => _$this._token;
  set token(TrexToken? token) => _$this._token = token;

  TrexOperationBuilder();

  TrexOperationBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  TrexOperationBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$TrexOperation.fromJson(json);
    replace(v);
  }

  @override
  TrexOperationBuilder fromJson(core.Map<String, dynamic> json) =>
      TrexOperationBuilder.fromJson(json);

  @override
  TrexOperationBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      TrexOperationBuilder()..copyFromHeader(headerFrom);

  TrexOperationBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _op = _$v!.op;
      _goalId = _$v!.goalId;
      _token = _$v!.token;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(TrexOperation other) {
    _$v = other as _$TrexOperation;
  }

  @override
  void update(void Function(TrexOperationBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  TrexOperation build() {
    final result = _$v ??
        _$TrexOperation._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            op: op,
            goalId: goalId,
            token: token);
    replace(result);
    return result;
  }
}

/// TREX Attribute immutable class
///
class _$TrexAttribute extends TrexAttribute {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String name;
  @override
  final TrexAttributeEnumAttrType attrType;
  @override
  final String min;
  @override
  final String max;

  factory _$TrexAttribute([void Function(TrexAttributeBuilder b)? updates]) =>
      (TrexAttributeBuilder()..update(updates)).build() as _$TrexAttribute;

  factory _$TrexAttribute.fromJson(core.Map<String, dynamic> json) {
    var val = TrexAttributeBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.name = json.containsKey('name') && json['name'] != null
        ? json['name'] as String
        : '';
    val.attrType = json.containsKey('attr_type') && json['attr_type'] != null
        ? TrexAttributeEnumAttrType(json['attr_type'] as int)
        : TrexAttributeEnumAttrType(0);
    val.min = json.containsKey('min') && json['min'] != null
        ? json['min'] as String
        : '';
    val.max = json.containsKey('max') && json['max'] != null
        ? json['max'] as String
        : '';

    return val.build() as _$TrexAttribute;
  }

  _$TrexAttribute._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.name,
      required this.attrType,
      required this.min,
      required this.max})
      : super._();

  @override
  TrexAttribute rebuild(void Function(TrexAttributeBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  TrexAttributeBuilder toBuilder() => TrexAttributeBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is TrexAttribute &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        name == other.name &&
        attrType == other.attrType &&
        min == other.min &&
        max == other.max;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    name.hashCode),
                attrType.hashCode),
            min.hashCode),
        max.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('TrexAttribute')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('name', name)
          ..add('attrType',
              '$attrType (Enumerated) [${attrType.toPrettyString()}]')
          ..add('min', min)
          ..add('max', max))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'TrexAttribute',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'name': name,
        'attr_type': attrType.value,
        'min': min,
        'max': max,
      };
}

/// TREX Attribute builder class
///
class TrexAttributeBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<TrexAttribute, TrexAttributeBuilder> {
  _$TrexAttribute? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _name = '';
  String get name => _$this._name;
  set name(String name) => _$this._name = name;

  TrexAttributeEnumAttrType _attrType = TrexAttributeEnumAttrType(0);
  TrexAttributeEnumAttrType get attrType => _$this._attrType;
  set attrType(TrexAttributeEnumAttrType attrType) =>
      _$this._attrType = attrType;

  String _min = '';
  String get min => _$this._min;
  set min(String min) => _$this._min = min;

  String _max = '';
  String get max => _$this._max;
  set max(String max) => _$this._max = max;

  TrexAttributeBuilder();

  TrexAttributeBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  TrexAttributeBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$TrexAttribute.fromJson(json);
    replace(v);
  }

  @override
  TrexAttributeBuilder fromJson(core.Map<String, dynamic> json) =>
      TrexAttributeBuilder.fromJson(json);

  @override
  TrexAttributeBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      TrexAttributeBuilder()..copyFromHeader(headerFrom);

  TrexAttributeBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _name = _$v!.name;
      _attrType = _$v!.attrType;
      _min = _$v!.min;
      _max = _$v!.max;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(TrexAttribute other) {
    _$v = other as _$TrexAttribute;
  }

  @override
  void update(void Function(TrexAttributeBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  TrexAttribute build() {
    final result = _$v ??
        _$TrexAttribute._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            name: name,
            attrType: attrType,
            min: min,
            max: max);
    replace(result);
    return result;
  }
}

/// TREX Token immutable class
///
class _$TrexToken extends TrexToken {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String timeline;
  @override
  final String predicate;
  @override
  final List<TrexAttribute> attributes;

  factory _$TrexToken([void Function(TrexTokenBuilder b)? updates]) =>
      (TrexTokenBuilder()..update(updates)).build() as _$TrexToken;

  factory _$TrexToken.fromJson(core.Map<String, dynamic> json) {
    var val = TrexTokenBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.timeline = json.containsKey('timeline') && json['timeline'] != null
        ? json['timeline'] as String
        : '';
    val.predicate = json.containsKey('predicate') && json['predicate'] != null
        ? json['predicate'] as String
        : '';
    var attributes = <TrexAttribute>[];
    if (json.containsKey('attributes') && json['attributes'] != null) {
      var listJson = json['attributes'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as TrexAttribute?;
          if (m != null) attributes.add(m);
        }
      }
    }
    val.attributes = attributes;

    return val.build() as _$TrexToken;
  }

  _$TrexToken._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.timeline,
      required this.predicate,
      required this.attributes})
      : super._();

  @override
  TrexToken rebuild(void Function(TrexTokenBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  TrexTokenBuilder toBuilder() => TrexTokenBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is TrexToken &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        timeline == other.timeline &&
        predicate == other.predicate &&
        DeepCollectionEquality().equals(attributes, other.attributes);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                timeline.hashCode),
            predicate.hashCode),
        attributes.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('TrexToken')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('timeline', timeline)
          ..add('predicate', predicate)
          ..add('attributes', '$attributes'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'TrexToken',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'timeline': timeline,
        'predicate': predicate,
        'attributes': [
          ...attributes.map((m) => m.toJson(false)),
        ],
      };
}

/// TREX Token builder class
///
class TrexTokenBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<TrexToken, TrexTokenBuilder> {
  _$TrexToken? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _timeline = '';
  String get timeline => _$this._timeline;
  set timeline(String timeline) => _$this._timeline = timeline;

  String _predicate = '';
  String get predicate => _$this._predicate;
  set predicate(String predicate) => _$this._predicate = predicate;

  List<TrexAttribute> _attributes = <TrexAttribute>[];
  List<TrexAttribute> get attributes => _$this._attributes;
  set attributes(List<TrexAttribute> attributes) =>
      _$this._attributes = attributes;

  TrexTokenBuilder();

  TrexTokenBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  TrexTokenBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$TrexToken.fromJson(json);
    replace(v);
  }

  @override
  TrexTokenBuilder fromJson(core.Map<String, dynamic> json) =>
      TrexTokenBuilder.fromJson(json);

  @override
  TrexTokenBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      TrexTokenBuilder()..copyFromHeader(headerFrom);

  TrexTokenBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _timeline = _$v!.timeline;
      _predicate = _$v!.predicate;
      _attributes = _$v!.attributes;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(TrexToken other) {
    _$v = other as _$TrexToken;
  }

  @override
  void update(void Function(TrexTokenBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  TrexToken build() {
    final result = _$v ??
        _$TrexToken._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            timeline: timeline,
            predicate: predicate,
            attributes: attributes);
    replace(result);
    return result;
  }
}

/// TREX Plan immutable class
///
class _$TrexPlan extends TrexPlan {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String reactor;
  @override
  final List<TrexToken> tokens;

  factory _$TrexPlan([void Function(TrexPlanBuilder b)? updates]) =>
      (TrexPlanBuilder()..update(updates)).build() as _$TrexPlan;

  factory _$TrexPlan.fromJson(core.Map<String, dynamic> json) {
    var val = TrexPlanBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.reactor = json.containsKey('reactor') && json['reactor'] != null
        ? json['reactor'] as String
        : '';
    var tokens = <TrexToken>[];
    if (json.containsKey('tokens') && json['tokens'] != null) {
      var listJson = json['tokens'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as TrexToken?;
          if (m != null) tokens.add(m);
        }
      }
    }
    val.tokens = tokens;

    return val.build() as _$TrexPlan;
  }

  _$TrexPlan._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.reactor,
      required this.tokens})
      : super._();

  @override
  TrexPlan rebuild(void Function(TrexPlanBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  TrexPlanBuilder toBuilder() => TrexPlanBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is TrexPlan &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        reactor == other.reactor &&
        DeepCollectionEquality().equals(tokens, other.tokens);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            reactor.hashCode),
        tokens.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('TrexPlan')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('reactor', reactor)
          ..add('tokens', '$tokens'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'TrexPlan',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'reactor': reactor,
        'tokens': [
          ...tokens.map((m) => m.toJson(false)),
        ],
      };
}

/// TREX Plan builder class
///
class TrexPlanBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<TrexPlan, TrexPlanBuilder> {
  _$TrexPlan? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _reactor = '';
  String get reactor => _$this._reactor;
  set reactor(String reactor) => _$this._reactor = reactor;

  List<TrexToken> _tokens = <TrexToken>[];
  List<TrexToken> get tokens => _$this._tokens;
  set tokens(List<TrexToken> tokens) => _$this._tokens = tokens;

  TrexPlanBuilder();

  TrexPlanBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  TrexPlanBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$TrexPlan.fromJson(json);
    replace(v);
  }

  @override
  TrexPlanBuilder fromJson(core.Map<String, dynamic> json) =>
      TrexPlanBuilder.fromJson(json);

  @override
  TrexPlanBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      TrexPlanBuilder()..copyFromHeader(headerFrom);

  TrexPlanBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _reactor = _$v!.reactor;
      _tokens = _$v!.tokens;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(TrexPlan other) {
    _$v = other as _$TrexPlan;
  }

  @override
  void update(void Function(TrexPlanBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  TrexPlan build() {
    final result = _$v ??
        _$TrexPlan._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            reactor: reactor,
            tokens: tokens);
    replace(result);
    return result;
  }
}

/// Event immutable class
///
class _$Event extends Event {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String topic;
  @override
  final String data;

  factory _$Event([void Function(EventBuilder b)? updates]) =>
      (EventBuilder()..update(updates)).build() as _$Event;

  factory _$Event.fromJson(core.Map<String, dynamic> json) {
    var val = EventBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.topic = json.containsKey('topic') && json['topic'] != null
        ? json['topic'] as String
        : '';
    val.data = json.containsKey('data') && json['data'] != null
        ? json['data'] as String
        : '';

    return val.build() as _$Event;
  }

  _$Event._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.topic,
      required this.data})
      : super._();

  @override
  Event rebuild(void Function(EventBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  EventBuilder toBuilder() => EventBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Event &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        topic == other.topic &&
        data == other.data;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            topic.hashCode),
        data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Event')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('topic', topic)
          ..add('data', '$data (TupleList)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Event',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'topic': topic,
        'data': data,
      };
}

/// Event builder class
///
class EventBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Event, EventBuilder> {
  _$Event? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _topic = '';
  String get topic => _$this._topic;
  set topic(String topic) => _$this._topic = topic;

  String _data = '';
  String get data => _$this._data;
  set data(String data) => _$this._data = data;

  EventBuilder();

  EventBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  EventBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Event.fromJson(json);
    replace(v);
  }

  @override
  EventBuilder fromJson(core.Map<String, dynamic> json) =>
      EventBuilder.fromJson(json);

  @override
  EventBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      EventBuilder()..copyFromHeader(headerFrom);

  EventBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _topic = _$v!.topic;
      _data = _$v!.data;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Event other) {
    _$v = other as _$Event;
  }

  @override
  void update(void Function(EventBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Event build() {
    final result = _$v ??
        _$Event._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            topic: topic,
            data: data);
    replace(result);
    return result;
  }
}

/// Compressed Image immutable class
///
class _$CompressedImage extends CompressedImage {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int frameid;
  @override
  final List<int> data;

  factory _$CompressedImage(
          [void Function(CompressedImageBuilder b)? updates]) =>
      (CompressedImageBuilder()..update(updates)).build() as _$CompressedImage;

  factory _$CompressedImage.fromJson(core.Map<String, dynamic> json) {
    var val = CompressedImageBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.frameid = json.containsKey('frameid') ? json['frameid'] as int : 0;
    val.data = json.containsKey('data')
        ? base64.decode(json['data'] as String)
        : <int>[];

    return val.build() as _$CompressedImage;
  }

  _$CompressedImage._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.frameid,
      required this.data})
      : super._();

  @override
  CompressedImage rebuild(void Function(CompressedImageBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  CompressedImageBuilder toBuilder() => CompressedImageBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is CompressedImage &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        frameid == other.frameid &&
        ListEquality().equals(data, other.data);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            frameid.hashCode),
        data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('CompressedImage')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('frameid', '$frameid')
          ..add('data', '$data'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'CompressedImage',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'frameid': frameid,
        'data': base64.encode(data),
      };
}

/// Compressed Image builder class
///
class CompressedImageBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<CompressedImage, CompressedImageBuilder> {
  _$CompressedImage? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _frameid = 0;
  int get frameid => _$this._frameid;
  set frameid(int frameid) => _$this._frameid = frameid;

  List<int> _data = <int>[];
  List<int> get data => _$this._data;
  set data(List<int> data) => _$this._data = data;

  CompressedImageBuilder();

  CompressedImageBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  CompressedImageBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$CompressedImage.fromJson(json);
    replace(v);
  }

  @override
  CompressedImageBuilder fromJson(core.Map<String, dynamic> json) =>
      CompressedImageBuilder.fromJson(json);

  @override
  CompressedImageBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      CompressedImageBuilder()..copyFromHeader(headerFrom);

  CompressedImageBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _frameid = _$v!.frameid;
      _data = _$v!.data;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(CompressedImage other) {
    _$v = other as _$CompressedImage;
  }

  @override
  void update(void Function(CompressedImageBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  CompressedImage build() {
    final result = _$v ??
        _$CompressedImage._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            frameid: frameid,
            data: data);
    replace(result);
    return result;
  }
}

/// Image Transmission Settings immutable class
///
class _$ImageTxSettings extends ImageTxSettings {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int fps;
  @override
  final int quality;
  @override
  final int reps;
  @override
  final int tsize;

  factory _$ImageTxSettings(
          [void Function(ImageTxSettingsBuilder b)? updates]) =>
      (ImageTxSettingsBuilder()..update(updates)).build() as _$ImageTxSettings;

  factory _$ImageTxSettings.fromJson(core.Map<String, dynamic> json) {
    var val = ImageTxSettingsBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.fps = json.containsKey('fps') ? json['fps'] as int : 0;
    val.quality = json.containsKey('quality') ? json['quality'] as int : 0;
    val.reps = json.containsKey('reps') ? json['reps'] as int : 0;
    val.tsize = json.containsKey('tsize') ? json['tsize'] as int : 0;

    return val.build() as _$ImageTxSettings;
  }

  _$ImageTxSettings._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.fps,
      required this.quality,
      required this.reps,
      required this.tsize})
      : super._();

  @override
  ImageTxSettings rebuild(void Function(ImageTxSettingsBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  ImageTxSettingsBuilder toBuilder() => ImageTxSettingsBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is ImageTxSettings &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        fps == other.fps &&
        quality == other.quality &&
        reps == other.reps &&
        tsize == other.tsize;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    fps.hashCode),
                quality.hashCode),
            reps.hashCode),
        tsize.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('ImageTxSettings')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('fps', '$fps')
          ..add('quality', '$quality')
          ..add('reps', '$reps')
          ..add('tsize', '$tsize'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'ImageTxSettings',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'fps': fps,
        'quality': quality,
        'reps': reps,
        'tsize': tsize,
      };
}

/// Image Transmission Settings builder class
///
class ImageTxSettingsBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<ImageTxSettings, ImageTxSettingsBuilder> {
  _$ImageTxSettings? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _fps = 0;
  int get fps => _$this._fps;
  set fps(int fps) => _$this._fps = fps;

  int _quality = 0;
  int get quality => _$this._quality;
  set quality(int quality) => _$this._quality = quality;

  int _reps = 0;
  int get reps => _$this._reps;
  set reps(int reps) => _$this._reps = reps;

  int _tsize = 0;
  int get tsize => _$this._tsize;
  set tsize(int tsize) => _$this._tsize = tsize;

  ImageTxSettingsBuilder();

  ImageTxSettingsBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  ImageTxSettingsBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$ImageTxSettings.fromJson(json);
    replace(v);
  }

  @override
  ImageTxSettingsBuilder fromJson(core.Map<String, dynamic> json) =>
      ImageTxSettingsBuilder.fromJson(json);

  @override
  ImageTxSettingsBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      ImageTxSettingsBuilder()..copyFromHeader(headerFrom);

  ImageTxSettingsBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _fps = _$v!.fps;
      _quality = _$v!.quality;
      _reps = _$v!.reps;
      _tsize = _$v!.tsize;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(ImageTxSettings other) {
    _$v = other as _$ImageTxSettings;
  }

  @override
  void update(void Function(ImageTxSettingsBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  ImageTxSettings build() {
    final result = _$v ??
        _$ImageTxSettings._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            fps: fps,
            quality: quality,
            reps: reps,
            tsize: tsize);
    replace(result);
    return result;
  }
}

/// Remote State immutable class
///
class _$RemoteState extends RemoteState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double lat;
  @override
  final double lon;
  @override
  final int depth;
  @override
  final double speed;
  @override
  final double psi;

  factory _$RemoteState([void Function(RemoteStateBuilder b)? updates]) =>
      (RemoteStateBuilder()..update(updates)).build() as _$RemoteState;

  factory _$RemoteState.fromJson(core.Map<String, dynamic> json) {
    var val = RemoteStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.depth = json.containsKey('depth') ? json['depth'] as int : 0;
    val.speed = json.containsKey('speed') ? json['speed'] as double : 0;
    val.psi = json.containsKey('psi') ? json['psi'] as double : 0;

    return val.build() as _$RemoteState;
  }

  _$RemoteState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.lat,
      required this.lon,
      required this.depth,
      required this.speed,
      required this.psi})
      : super._();

  @override
  RemoteState rebuild(void Function(RemoteStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  RemoteStateBuilder toBuilder() => RemoteStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is RemoteState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        depth == other.depth &&
        (speed == other.speed || speed - other.speed <= 1E-7) &&
        (psi == other.psi || psi - other.psi <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            0,
                                            timestamp?.hashCode ??
                                                null.hashCode),
                                        src.hashCode),
                                    srcEnt.hashCode),
                                dst.hashCode),
                            dstEnt.hashCode),
                        lat.hashCode),
                    lon.hashCode),
                depth.hashCode),
            speed.hashCode),
        psi.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('RemoteState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('depth', '$depth (m)')
          ..add('speed', '$speed (m/s)')
          ..add('psi', '$psi (rad) [${psi * 180.0 / math.pi} (deg)]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'RemoteState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'lat': lat,
        'lon': lon,
        'depth': depth,
        'speed': speed,
        'psi': psi,
      };
}

/// Remote State builder class
///
class RemoteStateBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<RemoteState, RemoteStateBuilder> {
  _$RemoteState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  int _depth = 0;
  int get depth => _$this._depth;
  set depth(int depth) => _$this._depth = depth;

  double _speed = 0;
  double get speed => _$this._speed;
  set speed(double speed) => _$this._speed = speed;

  double _psi = 0;
  double get psi => _$this._psi;
  set psi(double psi) => _$this._psi = psi;

  RemoteStateBuilder();

  RemoteStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  RemoteStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$RemoteState.fromJson(json);
    replace(v);
  }

  @override
  RemoteStateBuilder fromJson(core.Map<String, dynamic> json) =>
      RemoteStateBuilder.fromJson(json);

  @override
  RemoteStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      RemoteStateBuilder()..copyFromHeader(headerFrom);

  RemoteStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _depth = _$v!.depth;
      _speed = _$v!.speed;
      _psi = _$v!.psi;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(RemoteState other) {
    _$v = other as _$RemoteState;
  }

  @override
  void update(void Function(RemoteStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  RemoteState build() {
    final result = _$v ??
        _$RemoteState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            lat: lat,
            lon: lon,
            depth: depth,
            speed: speed,
            psi: psi);
    replace(result);
    return result;
  }
}

/// Target immutable class
///
class _$Target extends Target {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String label;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double z;
  @override
  final ZUnitsEnum zUnits;
  @override
  final double cog;
  @override
  final double sog;

  factory _$Target([void Function(TargetBuilder b)? updates]) =>
      (TargetBuilder()..update(updates)).build() as _$Target;

  factory _$Target.fromJson(core.Map<String, dynamic> json) {
    var val = TargetBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.label = json.containsKey('label') && json['label'] != null
        ? json['label'] as String
        : '';
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.zUnits = json.containsKey('z_units') && json['z_units'] != null
        ? ZUnitsEnum(json['z_units'] as int)
        : ZUnitsEnum(0);
    val.cog = json.containsKey('cog') ? json['cog'] as double : 0;
    val.sog = json.containsKey('sog') ? json['sog'] as double : 0;

    return val.build() as _$Target;
  }

  _$Target._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.label,
      required this.lat,
      required this.lon,
      required this.z,
      required this.zUnits,
      required this.cog,
      required this.sog})
      : super._();

  @override
  Target rebuild(void Function(TargetBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  TargetBuilder toBuilder() => TargetBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Target &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        label == other.label &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        zUnits == other.zUnits &&
        (cog == other.cog || cog - other.cog <= 1E-7) &&
        (sog == other.sog || sog - other.sog <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    0,
                                                    timestamp?.hashCode ??
                                                        null.hashCode),
                                                src.hashCode),
                                            srcEnt.hashCode),
                                        dst.hashCode),
                                    dstEnt.hashCode),
                                label.hashCode),
                            lat.hashCode),
                        lon.hashCode),
                    z.hashCode),
                zUnits.hashCode),
            cog.hashCode),
        sog.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Target')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('label', label)
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('z', '$z (m)')
          ..add('zUnits', '$zUnits (Enumerated) [${zUnits.toPrettyString()}]')
          ..add('cog', '$cog (rad) [${cog * 180.0 / math.pi} (deg)]')
          ..add('sog', '$sog (m/s)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Target',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'label': label,
        'lat': lat,
        'lon': lon,
        'z': z,
        'z_units': zUnits.value,
        'cog': cog,
        'sog': sog,
      };
}

/// Target builder class
///
class TargetBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Target, TargetBuilder> {
  _$Target? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _label = '';
  String get label => _$this._label;
  set label(String label) => _$this._label = label;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  ZUnitsEnum _zUnits = ZUnitsEnum(0);
  ZUnitsEnum get zUnits => _$this._zUnits;
  set zUnits(ZUnitsEnum zUnits) => _$this._zUnits = zUnits;

  double _cog = 0;
  double get cog => _$this._cog;
  set cog(double cog) => _$this._cog = cog;

  double _sog = 0;
  double get sog => _$this._sog;
  set sog(double sog) => _$this._sog = sog;

  TargetBuilder();

  TargetBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  TargetBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Target.fromJson(json);
    replace(v);
  }

  @override
  TargetBuilder fromJson(core.Map<String, dynamic> json) =>
      TargetBuilder.fromJson(json);

  @override
  TargetBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      TargetBuilder()..copyFromHeader(headerFrom);

  TargetBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _label = _$v!.label;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _z = _$v!.z;
      _zUnits = _$v!.zUnits;
      _cog = _$v!.cog;
      _sog = _$v!.sog;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Target other) {
    _$v = other as _$Target;
  }

  @override
  void update(void Function(TargetBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Target build() {
    final result = _$v ??
        _$Target._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            label: label,
            lat: lat,
            lon: lon,
            z: z,
            zUnits: zUnits,
            cog: cog,
            sog: sog);
    replace(result);
    return result;
  }
}

/// EntityParameter immutable class
///
class _$EntityParameter extends EntityParameter {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String name;
  @override
  final String value;

  factory _$EntityParameter(
          [void Function(EntityParameterBuilder b)? updates]) =>
      (EntityParameterBuilder()..update(updates)).build() as _$EntityParameter;

  factory _$EntityParameter.fromJson(core.Map<String, dynamic> json) {
    var val = EntityParameterBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.name = json.containsKey('name') && json['name'] != null
        ? json['name'] as String
        : '';
    val.value = json.containsKey('value') && json['value'] != null
        ? json['value'] as String
        : '';

    return val.build() as _$EntityParameter;
  }

  _$EntityParameter._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.name,
      required this.value})
      : super._();

  @override
  EntityParameter rebuild(void Function(EntityParameterBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  EntityParameterBuilder toBuilder() => EntityParameterBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is EntityParameter &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        name == other.name &&
        value == other.value;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            name.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('EntityParameter')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('name', name)
          ..add('value', value))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'EntityParameter',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'name': name,
        'value': value,
      };
}

/// EntityParameter builder class
///
class EntityParameterBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<EntityParameter, EntityParameterBuilder> {
  _$EntityParameter? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _name = '';
  String get name => _$this._name;
  set name(String name) => _$this._name = name;

  String _value = '';
  String get value => _$this._value;
  set value(String value) => _$this._value = value;

  EntityParameterBuilder();

  EntityParameterBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  EntityParameterBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$EntityParameter.fromJson(json);
    replace(v);
  }

  @override
  EntityParameterBuilder fromJson(core.Map<String, dynamic> json) =>
      EntityParameterBuilder.fromJson(json);

  @override
  EntityParameterBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      EntityParameterBuilder()..copyFromHeader(headerFrom);

  EntityParameterBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _name = _$v!.name;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(EntityParameter other) {
    _$v = other as _$EntityParameter;
  }

  @override
  void update(void Function(EntityParameterBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  EntityParameter build() {
    final result = _$v ??
        _$EntityParameter._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            name: name,
            value: value);
    replace(result);
    return result;
  }
}

/// EntityParameters immutable class
///
class _$EntityParameters extends EntityParameters {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String name;
  @override
  final List<EntityParameter> params;

  factory _$EntityParameters(
          [void Function(EntityParametersBuilder b)? updates]) =>
      (EntityParametersBuilder()..update(updates)).build()
          as _$EntityParameters;

  factory _$EntityParameters.fromJson(core.Map<String, dynamic> json) {
    var val = EntityParametersBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.name = json.containsKey('name') && json['name'] != null
        ? json['name'] as String
        : '';
    var params = <EntityParameter>[];
    if (json.containsKey('params') && json['params'] != null) {
      var listJson = json['params'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as EntityParameter?;
          if (m != null) params.add(m);
        }
      }
    }
    val.params = params;

    return val.build() as _$EntityParameters;
  }

  _$EntityParameters._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.name,
      required this.params})
      : super._();

  @override
  EntityParameters rebuild(void Function(EntityParametersBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  EntityParametersBuilder toBuilder() =>
      EntityParametersBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is EntityParameters &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        name == other.name &&
        DeepCollectionEquality().equals(params, other.params);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            name.hashCode),
        params.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('EntityParameters')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('name', name)
          ..add('params', '$params'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'EntityParameters',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'name': name,
        'params': [
          ...params.map((m) => m.toJson(false)),
        ],
      };
}

/// EntityParameters builder class
///
class EntityParametersBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<EntityParameters, EntityParametersBuilder> {
  _$EntityParameters? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _name = '';
  String get name => _$this._name;
  set name(String name) => _$this._name = name;

  List<EntityParameter> _params = <EntityParameter>[];
  List<EntityParameter> get params => _$this._params;
  set params(List<EntityParameter> params) => _$this._params = params;

  EntityParametersBuilder();

  EntityParametersBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  EntityParametersBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$EntityParameters.fromJson(json);
    replace(v);
  }

  @override
  EntityParametersBuilder fromJson(core.Map<String, dynamic> json) =>
      EntityParametersBuilder.fromJson(json);

  @override
  EntityParametersBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      EntityParametersBuilder()..copyFromHeader(headerFrom);

  EntityParametersBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _name = _$v!.name;
      _params = _$v!.params;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(EntityParameters other) {
    _$v = other as _$EntityParameters;
  }

  @override
  void update(void Function(EntityParametersBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  EntityParameters build() {
    final result = _$v ??
        _$EntityParameters._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            name: name,
            params: params);
    replace(result);
    return result;
  }
}

/// QueryEntityParameters immutable class
///
class _$QueryEntityParameters extends QueryEntityParameters {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String name;
  @override
  final String visibility;
  @override
  final String scope;

  factory _$QueryEntityParameters(
          [void Function(QueryEntityParametersBuilder b)? updates]) =>
      (QueryEntityParametersBuilder()..update(updates)).build()
          as _$QueryEntityParameters;

  factory _$QueryEntityParameters.fromJson(core.Map<String, dynamic> json) {
    var val = QueryEntityParametersBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.name = json.containsKey('name') && json['name'] != null
        ? json['name'] as String
        : '';
    val.visibility =
        json.containsKey('visibility') && json['visibility'] != null
            ? json['visibility'] as String
            : '';
    val.scope = json.containsKey('scope') && json['scope'] != null
        ? json['scope'] as String
        : '';

    return val.build() as _$QueryEntityParameters;
  }

  _$QueryEntityParameters._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.name,
      required this.visibility,
      required this.scope})
      : super._();

  @override
  QueryEntityParameters rebuild(
          void Function(QueryEntityParametersBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  QueryEntityParametersBuilder toBuilder() =>
      QueryEntityParametersBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is QueryEntityParameters &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        name == other.name &&
        visibility == other.visibility &&
        scope == other.scope;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                name.hashCode),
            visibility.hashCode),
        scope.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('QueryEntityParameters')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('name', name)
          ..add('visibility', visibility)
          ..add('scope', scope))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'QueryEntityParameters',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'name': name,
        'visibility': visibility,
        'scope': scope,
      };
}

/// QueryEntityParameters builder class
///
class QueryEntityParametersBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<QueryEntityParameters,
            QueryEntityParametersBuilder> {
  _$QueryEntityParameters? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _name = '';
  String get name => _$this._name;
  set name(String name) => _$this._name = name;

  String _visibility = '';
  String get visibility => _$this._visibility;
  set visibility(String visibility) => _$this._visibility = visibility;

  String _scope = '';
  String get scope => _$this._scope;
  set scope(String scope) => _$this._scope = scope;

  QueryEntityParametersBuilder();

  QueryEntityParametersBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  QueryEntityParametersBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$QueryEntityParameters.fromJson(json);
    replace(v);
  }

  @override
  QueryEntityParametersBuilder fromJson(core.Map<String, dynamic> json) =>
      QueryEntityParametersBuilder.fromJson(json);

  @override
  QueryEntityParametersBuilder newInstance(
          [ImcBuilderHeaderPart? headerFrom]) =>
      QueryEntityParametersBuilder()..copyFromHeader(headerFrom);

  QueryEntityParametersBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _name = _$v!.name;
      _visibility = _$v!.visibility;
      _scope = _$v!.scope;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(QueryEntityParameters other) {
    _$v = other as _$QueryEntityParameters;
  }

  @override
  void update(void Function(QueryEntityParametersBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  QueryEntityParameters build() {
    final result = _$v ??
        _$QueryEntityParameters._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            name: name,
            visibility: visibility,
            scope: scope);
    replace(result);
    return result;
  }
}

/// SetEntityParameters immutable class
///
class _$SetEntityParameters extends SetEntityParameters {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String name;
  @override
  final List<EntityParameter> params;

  factory _$SetEntityParameters(
          [void Function(SetEntityParametersBuilder b)? updates]) =>
      (SetEntityParametersBuilder()..update(updates)).build()
          as _$SetEntityParameters;

  factory _$SetEntityParameters.fromJson(core.Map<String, dynamic> json) {
    var val = SetEntityParametersBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.name = json.containsKey('name') && json['name'] != null
        ? json['name'] as String
        : '';
    var params = <EntityParameter>[];
    if (json.containsKey('params') && json['params'] != null) {
      var listJson = json['params'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as EntityParameter?;
          if (m != null) params.add(m);
        }
      }
    }
    val.params = params;

    return val.build() as _$SetEntityParameters;
  }

  _$SetEntityParameters._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.name,
      required this.params})
      : super._();

  @override
  SetEntityParameters rebuild(
          void Function(SetEntityParametersBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SetEntityParametersBuilder toBuilder() =>
      SetEntityParametersBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is SetEntityParameters &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        name == other.name &&
        DeepCollectionEquality().equals(params, other.params);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            name.hashCode),
        params.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('SetEntityParameters')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('name', name)
          ..add('params', '$params'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'SetEntityParameters',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'name': name,
        'params': [
          ...params.map((m) => m.toJson(false)),
        ],
      };
}

/// SetEntityParameters builder class
///
class SetEntityParametersBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<SetEntityParameters,
            SetEntityParametersBuilder> {
  _$SetEntityParameters? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _name = '';
  String get name => _$this._name;
  set name(String name) => _$this._name = name;

  List<EntityParameter> _params = <EntityParameter>[];
  List<EntityParameter> get params => _$this._params;
  set params(List<EntityParameter> params) => _$this._params = params;

  SetEntityParametersBuilder();

  SetEntityParametersBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SetEntityParametersBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$SetEntityParameters.fromJson(json);
    replace(v);
  }

  @override
  SetEntityParametersBuilder fromJson(core.Map<String, dynamic> json) =>
      SetEntityParametersBuilder.fromJson(json);

  @override
  SetEntityParametersBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SetEntityParametersBuilder()..copyFromHeader(headerFrom);

  SetEntityParametersBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _name = _$v!.name;
      _params = _$v!.params;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(SetEntityParameters other) {
    _$v = other as _$SetEntityParameters;
  }

  @override
  void update(void Function(SetEntityParametersBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  SetEntityParameters build() {
    final result = _$v ??
        _$SetEntityParameters._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            name: name,
            params: params);
    replace(result);
    return result;
  }
}

/// SaveEntityParameters immutable class
///
class _$SaveEntityParameters extends SaveEntityParameters {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String name;

  factory _$SaveEntityParameters(
          [void Function(SaveEntityParametersBuilder b)? updates]) =>
      (SaveEntityParametersBuilder()..update(updates)).build()
          as _$SaveEntityParameters;

  factory _$SaveEntityParameters.fromJson(core.Map<String, dynamic> json) {
    var val = SaveEntityParametersBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.name = json.containsKey('name') && json['name'] != null
        ? json['name'] as String
        : '';

    return val.build() as _$SaveEntityParameters;
  }

  _$SaveEntityParameters._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.name})
      : super._();

  @override
  SaveEntityParameters rebuild(
          void Function(SaveEntityParametersBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SaveEntityParametersBuilder toBuilder() =>
      SaveEntityParametersBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is SaveEntityParameters &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        name == other.name;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        name.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('SaveEntityParameters')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('name', name))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'SaveEntityParameters',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'name': name,
      };
}

/// SaveEntityParameters builder class
///
class SaveEntityParametersBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<SaveEntityParameters,
            SaveEntityParametersBuilder> {
  _$SaveEntityParameters? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _name = '';
  String get name => _$this._name;
  set name(String name) => _$this._name = name;

  SaveEntityParametersBuilder();

  SaveEntityParametersBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SaveEntityParametersBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$SaveEntityParameters.fromJson(json);
    replace(v);
  }

  @override
  SaveEntityParametersBuilder fromJson(core.Map<String, dynamic> json) =>
      SaveEntityParametersBuilder.fromJson(json);

  @override
  SaveEntityParametersBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SaveEntityParametersBuilder()..copyFromHeader(headerFrom);

  SaveEntityParametersBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _name = _$v!.name;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(SaveEntityParameters other) {
    _$v = other as _$SaveEntityParameters;
  }

  @override
  void update(void Function(SaveEntityParametersBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  SaveEntityParameters build() {
    final result = _$v ??
        _$SaveEntityParameters._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            name: name);
    replace(result);
    return result;
  }
}

/// Create Session immutable class
///
class _$CreateSession extends CreateSession {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int timeout;

  factory _$CreateSession([void Function(CreateSessionBuilder b)? updates]) =>
      (CreateSessionBuilder()..update(updates)).build() as _$CreateSession;

  factory _$CreateSession.fromJson(core.Map<String, dynamic> json) {
    var val = CreateSessionBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.timeout = json.containsKey('timeout') ? json['timeout'] as int : 0;

    return val.build() as _$CreateSession;
  }

  _$CreateSession._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.timeout})
      : super._();

  @override
  CreateSession rebuild(void Function(CreateSessionBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  CreateSessionBuilder toBuilder() => CreateSessionBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is CreateSession &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        timeout == other.timeout;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        timeout.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('CreateSession')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('timeout', '$timeout'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'CreateSession',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'timeout': timeout,
      };
}

/// Create Session builder class
///
class CreateSessionBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<CreateSession, CreateSessionBuilder> {
  _$CreateSession? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _timeout = 0;
  int get timeout => _$this._timeout;
  set timeout(int timeout) => _$this._timeout = timeout;

  CreateSessionBuilder();

  CreateSessionBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  CreateSessionBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$CreateSession.fromJson(json);
    replace(v);
  }

  @override
  CreateSessionBuilder fromJson(core.Map<String, dynamic> json) =>
      CreateSessionBuilder.fromJson(json);

  @override
  CreateSessionBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      CreateSessionBuilder()..copyFromHeader(headerFrom);

  CreateSessionBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _timeout = _$v!.timeout;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(CreateSession other) {
    _$v = other as _$CreateSession;
  }

  @override
  void update(void Function(CreateSessionBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  CreateSession build() {
    final result = _$v ??
        _$CreateSession._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            timeout: timeout);
    replace(result);
    return result;
  }
}

/// Close Session immutable class
///
class _$CloseSession extends CloseSession {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int sessid;

  factory _$CloseSession([void Function(CloseSessionBuilder b)? updates]) =>
      (CloseSessionBuilder()..update(updates)).build() as _$CloseSession;

  factory _$CloseSession.fromJson(core.Map<String, dynamic> json) {
    var val = CloseSessionBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.sessid = json.containsKey('sessid') ? json['sessid'] as int : 0;

    return val.build() as _$CloseSession;
  }

  _$CloseSession._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.sessid})
      : super._();

  @override
  CloseSession rebuild(void Function(CloseSessionBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  CloseSessionBuilder toBuilder() => CloseSessionBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is CloseSession &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        sessid == other.sessid;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        sessid.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('CloseSession')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('sessid', '$sessid'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'CloseSession',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'sessid': sessid,
      };
}

/// Close Session builder class
///
class CloseSessionBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<CloseSession, CloseSessionBuilder> {
  _$CloseSession? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _sessid = 0;
  int get sessid => _$this._sessid;
  set sessid(int sessid) => _$this._sessid = sessid;

  CloseSessionBuilder();

  CloseSessionBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  CloseSessionBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$CloseSession.fromJson(json);
    replace(v);
  }

  @override
  CloseSessionBuilder fromJson(core.Map<String, dynamic> json) =>
      CloseSessionBuilder.fromJson(json);

  @override
  CloseSessionBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      CloseSessionBuilder()..copyFromHeader(headerFrom);

  CloseSessionBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _sessid = _$v!.sessid;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(CloseSession other) {
    _$v = other as _$CloseSession;
  }

  @override
  void update(void Function(CloseSessionBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  CloseSession build() {
    final result = _$v ??
        _$CloseSession._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            sessid: sessid);
    replace(result);
    return result;
  }
}

/// Session Subscription immutable class
///
class _$SessionSubscription extends SessionSubscription {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int sessid;
  @override
  final String messages;

  factory _$SessionSubscription(
          [void Function(SessionSubscriptionBuilder b)? updates]) =>
      (SessionSubscriptionBuilder()..update(updates)).build()
          as _$SessionSubscription;

  factory _$SessionSubscription.fromJson(core.Map<String, dynamic> json) {
    var val = SessionSubscriptionBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.sessid = json.containsKey('sessid') ? json['sessid'] as int : 0;
    val.messages = json.containsKey('messages') && json['messages'] != null
        ? json['messages'] as String
        : '';

    return val.build() as _$SessionSubscription;
  }

  _$SessionSubscription._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.sessid,
      required this.messages})
      : super._();

  @override
  SessionSubscription rebuild(
          void Function(SessionSubscriptionBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SessionSubscriptionBuilder toBuilder() =>
      SessionSubscriptionBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is SessionSubscription &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        sessid == other.sessid &&
        messages == other.messages;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            sessid.hashCode),
        messages.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('SessionSubscription')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('sessid', '$sessid')
          ..add('messages', messages))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'SessionSubscription',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'sessid': sessid,
        'messages': messages,
      };
}

/// Session Subscription builder class
///
class SessionSubscriptionBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<SessionSubscription,
            SessionSubscriptionBuilder> {
  _$SessionSubscription? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _sessid = 0;
  int get sessid => _$this._sessid;
  set sessid(int sessid) => _$this._sessid = sessid;

  String _messages = '';
  String get messages => _$this._messages;
  set messages(String messages) => _$this._messages = messages;

  SessionSubscriptionBuilder();

  SessionSubscriptionBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SessionSubscriptionBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$SessionSubscription.fromJson(json);
    replace(v);
  }

  @override
  SessionSubscriptionBuilder fromJson(core.Map<String, dynamic> json) =>
      SessionSubscriptionBuilder.fromJson(json);

  @override
  SessionSubscriptionBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SessionSubscriptionBuilder()..copyFromHeader(headerFrom);

  SessionSubscriptionBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _sessid = _$v!.sessid;
      _messages = _$v!.messages;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(SessionSubscription other) {
    _$v = other as _$SessionSubscription;
  }

  @override
  void update(void Function(SessionSubscriptionBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  SessionSubscription build() {
    final result = _$v ??
        _$SessionSubscription._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            sessid: sessid,
            messages: messages);
    replace(result);
    return result;
  }
}

/// Session Keep-Alive immutable class
///
class _$SessionKeepAlive extends SessionKeepAlive {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int sessid;

  factory _$SessionKeepAlive(
          [void Function(SessionKeepAliveBuilder b)? updates]) =>
      (SessionKeepAliveBuilder()..update(updates)).build()
          as _$SessionKeepAlive;

  factory _$SessionKeepAlive.fromJson(core.Map<String, dynamic> json) {
    var val = SessionKeepAliveBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.sessid = json.containsKey('sessid') ? json['sessid'] as int : 0;

    return val.build() as _$SessionKeepAlive;
  }

  _$SessionKeepAlive._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.sessid})
      : super._();

  @override
  SessionKeepAlive rebuild(void Function(SessionKeepAliveBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SessionKeepAliveBuilder toBuilder() =>
      SessionKeepAliveBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is SessionKeepAlive &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        sessid == other.sessid;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        sessid.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('SessionKeepAlive')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('sessid', '$sessid'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'SessionKeepAlive',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'sessid': sessid,
      };
}

/// Session Keep-Alive builder class
///
class SessionKeepAliveBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<SessionKeepAlive, SessionKeepAliveBuilder> {
  _$SessionKeepAlive? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _sessid = 0;
  int get sessid => _$this._sessid;
  set sessid(int sessid) => _$this._sessid = sessid;

  SessionKeepAliveBuilder();

  SessionKeepAliveBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SessionKeepAliveBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$SessionKeepAlive.fromJson(json);
    replace(v);
  }

  @override
  SessionKeepAliveBuilder fromJson(core.Map<String, dynamic> json) =>
      SessionKeepAliveBuilder.fromJson(json);

  @override
  SessionKeepAliveBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SessionKeepAliveBuilder()..copyFromHeader(headerFrom);

  SessionKeepAliveBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _sessid = _$v!.sessid;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(SessionKeepAlive other) {
    _$v = other as _$SessionKeepAlive;
  }

  @override
  void update(void Function(SessionKeepAliveBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  SessionKeepAlive build() {
    final result = _$v ??
        _$SessionKeepAlive._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            sessid: sessid);
    replace(result);
    return result;
  }
}

/// Session Status immutable class
///
class _$SessionStatus extends SessionStatus {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int sessid;
  @override
  final SessionStatusEnumStatus status;

  factory _$SessionStatus([void Function(SessionStatusBuilder b)? updates]) =>
      (SessionStatusBuilder()..update(updates)).build() as _$SessionStatus;

  factory _$SessionStatus.fromJson(core.Map<String, dynamic> json) {
    var val = SessionStatusBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.sessid = json.containsKey('sessid') ? json['sessid'] as int : 0;
    val.status = json.containsKey('status') && json['status'] != null
        ? SessionStatusEnumStatus(json['status'] as int)
        : SessionStatusEnumStatus(0);

    return val.build() as _$SessionStatus;
  }

  _$SessionStatus._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.sessid,
      required this.status})
      : super._();

  @override
  SessionStatus rebuild(void Function(SessionStatusBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SessionStatusBuilder toBuilder() => SessionStatusBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is SessionStatus &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        sessid == other.sessid &&
        status == other.status;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            sessid.hashCode),
        status.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('SessionStatus')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('sessid', '$sessid')
          ..add('status', '$status (Enumerated) [${status.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'SessionStatus',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'sessid': sessid,
        'status': status.value,
      };
}

/// Session Status builder class
///
class SessionStatusBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<SessionStatus, SessionStatusBuilder> {
  _$SessionStatus? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _sessid = 0;
  int get sessid => _$this._sessid;
  set sessid(int sessid) => _$this._sessid = sessid;

  SessionStatusEnumStatus _status = SessionStatusEnumStatus(0);
  SessionStatusEnumStatus get status => _$this._status;
  set status(SessionStatusEnumStatus status) => _$this._status = status;

  SessionStatusBuilder();

  SessionStatusBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SessionStatusBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$SessionStatus.fromJson(json);
    replace(v);
  }

  @override
  SessionStatusBuilder fromJson(core.Map<String, dynamic> json) =>
      SessionStatusBuilder.fromJson(json);

  @override
  SessionStatusBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SessionStatusBuilder()..copyFromHeader(headerFrom);

  SessionStatusBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _sessid = _$v!.sessid;
      _status = _$v!.status;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(SessionStatus other) {
    _$v = other as _$SessionStatus;
  }

  @override
  void update(void Function(SessionStatusBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  SessionStatus build() {
    final result = _$v ??
        _$SessionStatus._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            sessid: sessid,
            status: status);
    replace(result);
    return result;
  }
}

/// Push Entity Parameters immutable class
///
class _$PushEntityParameters extends PushEntityParameters {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String name;

  factory _$PushEntityParameters(
          [void Function(PushEntityParametersBuilder b)? updates]) =>
      (PushEntityParametersBuilder()..update(updates)).build()
          as _$PushEntityParameters;

  factory _$PushEntityParameters.fromJson(core.Map<String, dynamic> json) {
    var val = PushEntityParametersBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.name = json.containsKey('name') && json['name'] != null
        ? json['name'] as String
        : '';

    return val.build() as _$PushEntityParameters;
  }

  _$PushEntityParameters._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.name})
      : super._();

  @override
  PushEntityParameters rebuild(
          void Function(PushEntityParametersBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  PushEntityParametersBuilder toBuilder() =>
      PushEntityParametersBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is PushEntityParameters &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        name == other.name;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        name.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('PushEntityParameters')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('name', name))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'PushEntityParameters',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'name': name,
      };
}

/// Push Entity Parameters builder class
///
class PushEntityParametersBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<PushEntityParameters,
            PushEntityParametersBuilder> {
  _$PushEntityParameters? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _name = '';
  String get name => _$this._name;
  set name(String name) => _$this._name = name;

  PushEntityParametersBuilder();

  PushEntityParametersBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  PushEntityParametersBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$PushEntityParameters.fromJson(json);
    replace(v);
  }

  @override
  PushEntityParametersBuilder fromJson(core.Map<String, dynamic> json) =>
      PushEntityParametersBuilder.fromJson(json);

  @override
  PushEntityParametersBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      PushEntityParametersBuilder()..copyFromHeader(headerFrom);

  PushEntityParametersBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _name = _$v!.name;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(PushEntityParameters other) {
    _$v = other as _$PushEntityParameters;
  }

  @override
  void update(void Function(PushEntityParametersBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  PushEntityParameters build() {
    final result = _$v ??
        _$PushEntityParameters._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            name: name);
    replace(result);
    return result;
  }
}

/// Pop Entity Parameters immutable class
///
class _$PopEntityParameters extends PopEntityParameters {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String name;

  factory _$PopEntityParameters(
          [void Function(PopEntityParametersBuilder b)? updates]) =>
      (PopEntityParametersBuilder()..update(updates)).build()
          as _$PopEntityParameters;

  factory _$PopEntityParameters.fromJson(core.Map<String, dynamic> json) {
    var val = PopEntityParametersBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.name = json.containsKey('name') && json['name'] != null
        ? json['name'] as String
        : '';

    return val.build() as _$PopEntityParameters;
  }

  _$PopEntityParameters._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.name})
      : super._();

  @override
  PopEntityParameters rebuild(
          void Function(PopEntityParametersBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  PopEntityParametersBuilder toBuilder() =>
      PopEntityParametersBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is PopEntityParameters &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        name == other.name;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        name.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('PopEntityParameters')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('name', name))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'PopEntityParameters',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'name': name,
      };
}

/// Pop Entity Parameters builder class
///
class PopEntityParametersBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<PopEntityParameters,
            PopEntityParametersBuilder> {
  _$PopEntityParameters? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _name = '';
  String get name => _$this._name;
  set name(String name) => _$this._name = name;

  PopEntityParametersBuilder();

  PopEntityParametersBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  PopEntityParametersBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$PopEntityParameters.fromJson(json);
    replace(v);
  }

  @override
  PopEntityParametersBuilder fromJson(core.Map<String, dynamic> json) =>
      PopEntityParametersBuilder.fromJson(json);

  @override
  PopEntityParametersBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      PopEntityParametersBuilder()..copyFromHeader(headerFrom);

  PopEntityParametersBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _name = _$v!.name;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(PopEntityParameters other) {
    _$v = other as _$PopEntityParameters;
  }

  @override
  void update(void Function(PopEntityParametersBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  PopEntityParameters build() {
    final result = _$v ??
        _$PopEntityParameters._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            name: name);
    replace(result);
    return result;
  }
}

/// I/O Event immutable class
///
class _$IoEvent extends IoEvent {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final IoEventEnumType type;
  @override
  final String error;

  factory _$IoEvent([void Function(IoEventBuilder b)? updates]) =>
      (IoEventBuilder()..update(updates)).build() as _$IoEvent;

  factory _$IoEvent.fromJson(core.Map<String, dynamic> json) {
    var val = IoEventBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.type = json.containsKey('type') && json['type'] != null
        ? IoEventEnumType(json['type'] as int)
        : IoEventEnumType(0);
    val.error = json.containsKey('error') && json['error'] != null
        ? json['error'] as String
        : '';

    return val.build() as _$IoEvent;
  }

  _$IoEvent._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.type,
      required this.error})
      : super._();

  @override
  IoEvent rebuild(void Function(IoEventBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  IoEventBuilder toBuilder() => IoEventBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is IoEvent &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        type == other.type &&
        error == other.error;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            type.hashCode),
        error.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('IoEvent')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('type', '$type (Enumerated) [${type.toPrettyString()}]')
          ..add('error', error))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'IoEvent',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'type': type.value,
        'error': error,
      };
}

/// I/O Event builder class
///
class IoEventBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<IoEvent, IoEventBuilder> {
  _$IoEvent? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  IoEventEnumType _type = IoEventEnumType(0);
  IoEventEnumType get type => _$this._type;
  set type(IoEventEnumType type) => _$this._type = type;

  String _error = '';
  String get error => _$this._error;
  set error(String error) => _$this._error = error;

  IoEventBuilder();

  IoEventBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  IoEventBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$IoEvent.fromJson(json);
    replace(v);
  }

  @override
  IoEventBuilder fromJson(core.Map<String, dynamic> json) =>
      IoEventBuilder.fromJson(json);

  @override
  IoEventBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      IoEventBuilder()..copyFromHeader(headerFrom);

  IoEventBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _type = _$v!.type;
      _error = _$v!.error;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(IoEvent other) {
    _$v = other as _$IoEvent;
  }

  @override
  void update(void Function(IoEventBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  IoEvent build() {
    final result = _$v ??
        _$IoEvent._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            type: type,
            error: error);
    replace(result);
    return result;
  }
}

/// UamTxFrame immutable class
///
class _$UamTxFrame extends UamTxFrame {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int seq;
  @override
  final String sysDst;
  @override
  final UamTxFrameBitfieldFlags flags;
  @override
  final List<int> data;

  factory _$UamTxFrame([void Function(UamTxFrameBuilder b)? updates]) =>
      (UamTxFrameBuilder()..update(updates)).build() as _$UamTxFrame;

  factory _$UamTxFrame.fromJson(core.Map<String, dynamic> json) {
    var val = UamTxFrameBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.seq = json.containsKey('seq') ? json['seq'] as int : 0;
    val.sysDst = json.containsKey('sys_dst') && json['sys_dst'] != null
        ? json['sys_dst'] as String
        : '';
    val.flags = json.containsKey('flags') && json['flags'] != null
        ? UamTxFrameBitfieldFlags(json['flags'] as int)
        : UamTxFrameBitfieldFlags(0);
    val.data = json.containsKey('data')
        ? base64.decode(json['data'] as String)
        : <int>[];

    return val.build() as _$UamTxFrame;
  }

  _$UamTxFrame._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.seq,
      required this.sysDst,
      required this.flags,
      required this.data})
      : super._();

  @override
  UamTxFrame rebuild(void Function(UamTxFrameBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  UamTxFrameBuilder toBuilder() => UamTxFrameBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is UamTxFrame &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        seq == other.seq &&
        sysDst == other.sysDst &&
        flags == other.flags &&
        ListEquality().equals(data, other.data);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    seq.hashCode),
                sysDst.hashCode),
            flags.hashCode),
        data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('UamTxFrame')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('seq', '$seq')
          ..add('sysDst', sysDst)
          ..add('flags', '$flags (Bitfield) [${flags.toPrettyString()}]')
          ..add('data', '$data'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'UamTxFrame',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'seq': seq,
        'sys_dst': sysDst,
        'flags': flags.value,
        'data': base64.encode(data),
      };
}

/// UamTxFrame builder class
///
class UamTxFrameBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<UamTxFrame, UamTxFrameBuilder> {
  _$UamTxFrame? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _seq = 0;
  int get seq => _$this._seq;
  set seq(int seq) => _$this._seq = seq;

  String _sysDst = '';
  String get sysDst => _$this._sysDst;
  set sysDst(String sysDst) => _$this._sysDst = sysDst;

  UamTxFrameBitfieldFlags _flags = UamTxFrameBitfieldFlags(0);
  UamTxFrameBitfieldFlags get flags => _$this._flags;
  set flags(UamTxFrameBitfieldFlags flags) => _$this._flags = flags;

  List<int> _data = <int>[];
  List<int> get data => _$this._data;
  set data(List<int> data) => _$this._data = data;

  UamTxFrameBuilder();

  UamTxFrameBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  UamTxFrameBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$UamTxFrame.fromJson(json);
    replace(v);
  }

  @override
  UamTxFrameBuilder fromJson(core.Map<String, dynamic> json) =>
      UamTxFrameBuilder.fromJson(json);

  @override
  UamTxFrameBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      UamTxFrameBuilder()..copyFromHeader(headerFrom);

  UamTxFrameBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _seq = _$v!.seq;
      _sysDst = _$v!.sysDst;
      _flags = _$v!.flags;
      _data = _$v!.data;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(UamTxFrame other) {
    _$v = other as _$UamTxFrame;
  }

  @override
  void update(void Function(UamTxFrameBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  UamTxFrame build() {
    final result = _$v ??
        _$UamTxFrame._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            seq: seq,
            sysDst: sysDst,
            flags: flags,
            data: data);
    replace(result);
    return result;
  }
}

/// UamRxFrame immutable class
///
class _$UamRxFrame extends UamRxFrame {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String sysSrc;
  @override
  final String sysDst;
  @override
  final UamRxFrameBitfieldFlags flags;
  @override
  final List<int> data;

  factory _$UamRxFrame([void Function(UamRxFrameBuilder b)? updates]) =>
      (UamRxFrameBuilder()..update(updates)).build() as _$UamRxFrame;

  factory _$UamRxFrame.fromJson(core.Map<String, dynamic> json) {
    var val = UamRxFrameBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.sysSrc = json.containsKey('sys_src') && json['sys_src'] != null
        ? json['sys_src'] as String
        : '';
    val.sysDst = json.containsKey('sys_dst') && json['sys_dst'] != null
        ? json['sys_dst'] as String
        : '';
    val.flags = json.containsKey('flags') && json['flags'] != null
        ? UamRxFrameBitfieldFlags(json['flags'] as int)
        : UamRxFrameBitfieldFlags(0);
    val.data = json.containsKey('data')
        ? base64.decode(json['data'] as String)
        : <int>[];

    return val.build() as _$UamRxFrame;
  }

  _$UamRxFrame._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.sysSrc,
      required this.sysDst,
      required this.flags,
      required this.data})
      : super._();

  @override
  UamRxFrame rebuild(void Function(UamRxFrameBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  UamRxFrameBuilder toBuilder() => UamRxFrameBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is UamRxFrame &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        sysSrc == other.sysSrc &&
        sysDst == other.sysDst &&
        flags == other.flags &&
        ListEquality().equals(data, other.data);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    sysSrc.hashCode),
                sysDst.hashCode),
            flags.hashCode),
        data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('UamRxFrame')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('sysSrc', sysSrc)
          ..add('sysDst', sysDst)
          ..add('flags', '$flags (Bitfield) [${flags.toPrettyString()}]')
          ..add('data', '$data'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'UamRxFrame',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'sys_src': sysSrc,
        'sys_dst': sysDst,
        'flags': flags.value,
        'data': base64.encode(data),
      };
}

/// UamRxFrame builder class
///
class UamRxFrameBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<UamRxFrame, UamRxFrameBuilder> {
  _$UamRxFrame? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _sysSrc = '';
  String get sysSrc => _$this._sysSrc;
  set sysSrc(String sysSrc) => _$this._sysSrc = sysSrc;

  String _sysDst = '';
  String get sysDst => _$this._sysDst;
  set sysDst(String sysDst) => _$this._sysDst = sysDst;

  UamRxFrameBitfieldFlags _flags = UamRxFrameBitfieldFlags(0);
  UamRxFrameBitfieldFlags get flags => _$this._flags;
  set flags(UamRxFrameBitfieldFlags flags) => _$this._flags = flags;

  List<int> _data = <int>[];
  List<int> get data => _$this._data;
  set data(List<int> data) => _$this._data = data;

  UamRxFrameBuilder();

  UamRxFrameBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  UamRxFrameBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$UamRxFrame.fromJson(json);
    replace(v);
  }

  @override
  UamRxFrameBuilder fromJson(core.Map<String, dynamic> json) =>
      UamRxFrameBuilder.fromJson(json);

  @override
  UamRxFrameBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      UamRxFrameBuilder()..copyFromHeader(headerFrom);

  UamRxFrameBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _sysSrc = _$v!.sysSrc;
      _sysDst = _$v!.sysDst;
      _flags = _$v!.flags;
      _data = _$v!.data;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(UamRxFrame other) {
    _$v = other as _$UamRxFrame;
  }

  @override
  void update(void Function(UamRxFrameBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  UamRxFrame build() {
    final result = _$v ??
        _$UamRxFrame._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            sysSrc: sysSrc,
            sysDst: sysDst,
            flags: flags,
            data: data);
    replace(result);
    return result;
  }
}

/// UamTxStatus immutable class
///
class _$UamTxStatus extends UamTxStatus {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int seq;
  @override
  final UamTxStatusEnumValue value;
  @override
  final String error;

  factory _$UamTxStatus([void Function(UamTxStatusBuilder b)? updates]) =>
      (UamTxStatusBuilder()..update(updates)).build() as _$UamTxStatus;

  factory _$UamTxStatus.fromJson(core.Map<String, dynamic> json) {
    var val = UamTxStatusBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.seq = json.containsKey('seq') ? json['seq'] as int : 0;
    val.value = json.containsKey('value') && json['value'] != null
        ? UamTxStatusEnumValue(json['value'] as int)
        : UamTxStatusEnumValue(0);
    val.error = json.containsKey('error') && json['error'] != null
        ? json['error'] as String
        : '';

    return val.build() as _$UamTxStatus;
  }

  _$UamTxStatus._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.seq,
      required this.value,
      required this.error})
      : super._();

  @override
  UamTxStatus rebuild(void Function(UamTxStatusBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  UamTxStatusBuilder toBuilder() => UamTxStatusBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is UamTxStatus &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        seq == other.seq &&
        value == other.value &&
        error == other.error;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                seq.hashCode),
            value.hashCode),
        error.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('UamTxStatus')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('seq', '$seq')
          ..add('value', '$value (Enumerated) [${value.toPrettyString()}]')
          ..add('error', error))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'UamTxStatus',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'seq': seq,
        'value': value.value,
        'error': error,
      };
}

/// UamTxStatus builder class
///
class UamTxStatusBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<UamTxStatus, UamTxStatusBuilder> {
  _$UamTxStatus? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _seq = 0;
  int get seq => _$this._seq;
  set seq(int seq) => _$this._seq = seq;

  UamTxStatusEnumValue _value = UamTxStatusEnumValue(0);
  UamTxStatusEnumValue get value => _$this._value;
  set value(UamTxStatusEnumValue value) => _$this._value = value;

  String _error = '';
  String get error => _$this._error;
  set error(String error) => _$this._error = error;

  UamTxStatusBuilder();

  UamTxStatusBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  UamTxStatusBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$UamTxStatus.fromJson(json);
    replace(v);
  }

  @override
  UamTxStatusBuilder fromJson(core.Map<String, dynamic> json) =>
      UamTxStatusBuilder.fromJson(json);

  @override
  UamTxStatusBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      UamTxStatusBuilder()..copyFromHeader(headerFrom);

  UamTxStatusBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _seq = _$v!.seq;
      _value = _$v!.value;
      _error = _$v!.error;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(UamTxStatus other) {
    _$v = other as _$UamTxStatus;
  }

  @override
  void update(void Function(UamTxStatusBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  UamTxStatus build() {
    final result = _$v ??
        _$UamTxStatus._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            seq: seq,
            value: value,
            error: error);
    replace(result);
    return result;
  }
}

/// UamRxRange immutable class
///
class _$UamRxRange extends UamRxRange {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int seq;
  @override
  final String sys;
  @override
  final double value;

  factory _$UamRxRange([void Function(UamRxRangeBuilder b)? updates]) =>
      (UamRxRangeBuilder()..update(updates)).build() as _$UamRxRange;

  factory _$UamRxRange.fromJson(core.Map<String, dynamic> json) {
    var val = UamRxRangeBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.seq = json.containsKey('seq') ? json['seq'] as int : 0;
    val.sys = json.containsKey('sys') && json['sys'] != null
        ? json['sys'] as String
        : '';
    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$UamRxRange;
  }

  _$UamRxRange._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.seq,
      required this.sys,
      required this.value})
      : super._();

  @override
  UamRxRange rebuild(void Function(UamRxRangeBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  UamRxRangeBuilder toBuilder() => UamRxRangeBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is UamRxRange &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        seq == other.seq &&
        sys == other.sys &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                seq.hashCode),
            sys.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('UamRxRange')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('seq', '$seq')
          ..add('sys', sys)
          ..add('value', '$value (m)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'UamRxRange',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'seq': seq,
        'sys': sys,
        'value': value,
      };
}

/// UamRxRange builder class
///
class UamRxRangeBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<UamRxRange, UamRxRangeBuilder> {
  _$UamRxRange? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _seq = 0;
  int get seq => _$this._seq;
  set seq(int seq) => _$this._seq = seq;

  String _sys = '';
  String get sys => _$this._sys;
  set sys(String sys) => _$this._sys = sys;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  UamRxRangeBuilder();

  UamRxRangeBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  UamRxRangeBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$UamRxRange.fromJson(json);
    replace(v);
  }

  @override
  UamRxRangeBuilder fromJson(core.Map<String, dynamic> json) =>
      UamRxRangeBuilder.fromJson(json);

  @override
  UamRxRangeBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      UamRxRangeBuilder()..copyFromHeader(headerFrom);

  UamRxRangeBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _seq = _$v!.seq;
      _sys = _$v!.sys;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(UamRxRange other) {
    _$v = other as _$UamRxRange;
  }

  @override
  void update(void Function(UamRxRangeBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  UamRxRange build() {
    final result = _$v ??
        _$UamRxRange._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            seq: seq,
            sys: sys,
            value: value);
    replace(result);
    return result;
  }
}

/// UamTxRange immutable class
///
class _$UamTxRange extends UamTxRange {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int seq;
  @override
  final String sysDst;
  @override
  final double timeout;

  factory _$UamTxRange([void Function(UamTxRangeBuilder b)? updates]) =>
      (UamTxRangeBuilder()..update(updates)).build() as _$UamTxRange;

  factory _$UamTxRange.fromJson(core.Map<String, dynamic> json) {
    var val = UamTxRangeBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.seq = json.containsKey('seq') ? json['seq'] as int : 0;
    val.sysDst = json.containsKey('sys_dst') && json['sys_dst'] != null
        ? json['sys_dst'] as String
        : '';
    val.timeout = json.containsKey('timeout') ? json['timeout'] as double : 0;

    return val.build() as _$UamTxRange;
  }

  _$UamTxRange._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.seq,
      required this.sysDst,
      required this.timeout})
      : super._();

  @override
  UamTxRange rebuild(void Function(UamTxRangeBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  UamTxRangeBuilder toBuilder() => UamTxRangeBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is UamTxRange &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        seq == other.seq &&
        sysDst == other.sysDst &&
        (timeout == other.timeout || timeout - other.timeout <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                seq.hashCode),
            sysDst.hashCode),
        timeout.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('UamTxRange')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('seq', '$seq')
          ..add('sysDst', sysDst)
          ..add('timeout', '$timeout (s)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'UamTxRange',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'seq': seq,
        'sys_dst': sysDst,
        'timeout': timeout,
      };
}

/// UamTxRange builder class
///
class UamTxRangeBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<UamTxRange, UamTxRangeBuilder> {
  _$UamTxRange? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _seq = 0;
  int get seq => _$this._seq;
  set seq(int seq) => _$this._seq = seq;

  String _sysDst = '';
  String get sysDst => _$this._sysDst;
  set sysDst(String sysDst) => _$this._sysDst = sysDst;

  double _timeout = 0;
  double get timeout => _$this._timeout;
  set timeout(double timeout) => _$this._timeout = timeout;

  UamTxRangeBuilder();

  UamTxRangeBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  UamTxRangeBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$UamTxRange.fromJson(json);
    replace(v);
  }

  @override
  UamTxRangeBuilder fromJson(core.Map<String, dynamic> json) =>
      UamTxRangeBuilder.fromJson(json);

  @override
  UamTxRangeBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      UamTxRangeBuilder()..copyFromHeader(headerFrom);

  UamTxRangeBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _seq = _$v!.seq;
      _sysDst = _$v!.sysDst;
      _timeout = _$v!.timeout;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(UamTxRange other) {
    _$v = other as _$UamTxRange;
  }

  @override
  void update(void Function(UamTxRangeBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  UamTxRange build() {
    final result = _$v ??
        _$UamTxRange._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            seq: seq,
            sysDst: sysDst,
            timeout: timeout);
    replace(result);
    return result;
  }
}

/// Formation Control Parameters immutable class
///
class _$FormCtrlParam extends FormCtrlParam {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final FormCtrlParamEnumAction action;
  @override
  final double lonGain;
  @override
  final double latGain;
  @override
  final int bondThick;
  @override
  final double leadGain;
  @override
  final double deconflGain;

  factory _$FormCtrlParam([void Function(FormCtrlParamBuilder b)? updates]) =>
      (FormCtrlParamBuilder()..update(updates)).build() as _$FormCtrlParam;

  factory _$FormCtrlParam.fromJson(core.Map<String, dynamic> json) {
    var val = FormCtrlParamBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.action = json.containsKey('Action') && json['Action'] != null
        ? FormCtrlParamEnumAction(json['Action'] as int)
        : FormCtrlParamEnumAction(0);
    val.lonGain = json.containsKey('LonGain') ? json['LonGain'] as double : 0;
    val.latGain = json.containsKey('LatGain') ? json['LatGain'] as double : 0;
    val.bondThick =
        json.containsKey('BondThick') ? json['BondThick'] as int : 0;
    val.leadGain =
        json.containsKey('LeadGain') ? json['LeadGain'] as double : 0;
    val.deconflGain =
        json.containsKey('DeconflGain') ? json['DeconflGain'] as double : 0;

    return val.build() as _$FormCtrlParam;
  }

  _$FormCtrlParam._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.action,
      required this.lonGain,
      required this.latGain,
      required this.bondThick,
      required this.leadGain,
      required this.deconflGain})
      : super._();

  @override
  FormCtrlParam rebuild(void Function(FormCtrlParamBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  FormCtrlParamBuilder toBuilder() => FormCtrlParamBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is FormCtrlParam &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        action == other.action &&
        (lonGain == other.lonGain || lonGain - other.lonGain <= 1E-7) &&
        (latGain == other.latGain || latGain - other.latGain <= 1E-7) &&
        bondThick == other.bondThick &&
        (leadGain == other.leadGain || leadGain - other.leadGain <= 1E-7) &&
        (deconflGain == other.deconflGain ||
            deconflGain - other.deconflGain <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                0,
                                                timestamp?.hashCode ??
                                                    null.hashCode),
                                            src.hashCode),
                                        srcEnt.hashCode),
                                    dst.hashCode),
                                dstEnt.hashCode),
                            action.hashCode),
                        lonGain.hashCode),
                    latGain.hashCode),
                bondThick.hashCode),
            leadGain.hashCode),
        deconflGain.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('FormCtrlParam')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('action', '$action (Enumerated) [${action.toPrettyString()}]')
          ..add('lonGain', '$lonGain')
          ..add('latGain', '$latGain')
          ..add('bondThick', '$bondThick')
          ..add('leadGain', '$leadGain')
          ..add('deconflGain', '$deconflGain'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'FormCtrlParam',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'Action': action.value,
        'LonGain': lonGain,
        'LatGain': latGain,
        'BondThick': bondThick,
        'LeadGain': leadGain,
        'DeconflGain': deconflGain,
      };
}

/// Formation Control Parameters builder class
///
class FormCtrlParamBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<FormCtrlParam, FormCtrlParamBuilder> {
  _$FormCtrlParam? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  FormCtrlParamEnumAction _action = FormCtrlParamEnumAction(0);
  FormCtrlParamEnumAction get action => _$this._action;
  set action(FormCtrlParamEnumAction action) => _$this._action = action;

  double _lonGain = 0;
  double get lonGain => _$this._lonGain;
  set lonGain(double lonGain) => _$this._lonGain = lonGain;

  double _latGain = 0;
  double get latGain => _$this._latGain;
  set latGain(double latGain) => _$this._latGain = latGain;

  int _bondThick = 0;
  int get bondThick => _$this._bondThick;
  set bondThick(int bondThick) => _$this._bondThick = bondThick;

  double _leadGain = 0;
  double get leadGain => _$this._leadGain;
  set leadGain(double leadGain) => _$this._leadGain = leadGain;

  double _deconflGain = 0;
  double get deconflGain => _$this._deconflGain;
  set deconflGain(double deconflGain) => _$this._deconflGain = deconflGain;

  FormCtrlParamBuilder();

  FormCtrlParamBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  FormCtrlParamBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$FormCtrlParam.fromJson(json);
    replace(v);
  }

  @override
  FormCtrlParamBuilder fromJson(core.Map<String, dynamic> json) =>
      FormCtrlParamBuilder.fromJson(json);

  @override
  FormCtrlParamBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      FormCtrlParamBuilder()..copyFromHeader(headerFrom);

  FormCtrlParamBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _action = _$v!.action;
      _lonGain = _$v!.lonGain;
      _latGain = _$v!.latGain;
      _bondThick = _$v!.bondThick;
      _leadGain = _$v!.leadGain;
      _deconflGain = _$v!.deconflGain;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(FormCtrlParam other) {
    _$v = other as _$FormCtrlParam;
  }

  @override
  void update(void Function(FormCtrlParamBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  FormCtrlParam build() {
    final result = _$v ??
        _$FormCtrlParam._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            action: action,
            lonGain: lonGain,
            latGain: latGain,
            bondThick: bondThick,
            leadGain: leadGain,
            deconflGain: deconflGain);
    replace(result);
    return result;
  }
}

/// Formation Evaluation Data immutable class
///
class _$FormationEval extends FormationEval {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double errMean;
  @override
  final double distMinAbs;
  @override
  final double distMinMean;

  factory _$FormationEval([void Function(FormationEvalBuilder b)? updates]) =>
      (FormationEvalBuilder()..update(updates)).build() as _$FormationEval;

  factory _$FormationEval.fromJson(core.Map<String, dynamic> json) {
    var val = FormationEvalBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.errMean = json.containsKey('err_mean') ? json['err_mean'] as double : 0;
    val.distMinAbs =
        json.containsKey('dist_min_abs') ? json['dist_min_abs'] as double : 0;
    val.distMinMean =
        json.containsKey('dist_min_mean') ? json['dist_min_mean'] as double : 0;

    return val.build() as _$FormationEval;
  }

  _$FormationEval._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.errMean,
      required this.distMinAbs,
      required this.distMinMean})
      : super._();

  @override
  FormationEval rebuild(void Function(FormationEvalBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  FormationEvalBuilder toBuilder() => FormationEvalBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is FormationEval &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (errMean == other.errMean || errMean - other.errMean <= 1E-7) &&
        (distMinAbs == other.distMinAbs ||
            distMinAbs - other.distMinAbs <= 1E-7) &&
        (distMinMean == other.distMinMean ||
            distMinMean - other.distMinMean <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                errMean.hashCode),
            distMinAbs.hashCode),
        distMinMean.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('FormationEval')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('errMean', '$errMean')
          ..add('distMinAbs', '$distMinAbs')
          ..add('distMinMean', '$distMinMean'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'FormationEval',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'err_mean': errMean,
        'dist_min_abs': distMinAbs,
        'dist_min_mean': distMinMean,
      };
}

/// Formation Evaluation Data builder class
///
class FormationEvalBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<FormationEval, FormationEvalBuilder> {
  _$FormationEval? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _errMean = 0;
  double get errMean => _$this._errMean;
  set errMean(double errMean) => _$this._errMean = errMean;

  double _distMinAbs = 0;
  double get distMinAbs => _$this._distMinAbs;
  set distMinAbs(double distMinAbs) => _$this._distMinAbs = distMinAbs;

  double _distMinMean = 0;
  double get distMinMean => _$this._distMinMean;
  set distMinMean(double distMinMean) => _$this._distMinMean = distMinMean;

  FormationEvalBuilder();

  FormationEvalBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  FormationEvalBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$FormationEval.fromJson(json);
    replace(v);
  }

  @override
  FormationEvalBuilder fromJson(core.Map<String, dynamic> json) =>
      FormationEvalBuilder.fromJson(json);

  @override
  FormationEvalBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      FormationEvalBuilder()..copyFromHeader(headerFrom);

  FormationEvalBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _errMean = _$v!.errMean;
      _distMinAbs = _$v!.distMinAbs;
      _distMinMean = _$v!.distMinMean;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(FormationEval other) {
    _$v = other as _$FormationEval;
  }

  @override
  void update(void Function(FormationEvalBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  FormationEval build() {
    final result = _$v ??
        _$FormationEval._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            errMean: errMean,
            distMinAbs: distMinAbs,
            distMinMean: distMinMean);
    replace(result);
    return result;
  }
}

/// Formation Control Parameters immutable class
///
class _$FormationControlParams extends FormationControlParams {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final FormationControlParamsEnumAction action;
  @override
  final double lonGain;
  @override
  final double latGain;
  @override
  final double bondThick;
  @override
  final double leadGain;
  @override
  final double deconflGain;
  @override
  final double accelSwitchGain;
  @override
  final double safeDist;
  @override
  final double deconflictOffset;
  @override
  final double accelSafeMargin;
  @override
  final double accelLimX;

  factory _$FormationControlParams(
          [void Function(FormationControlParamsBuilder b)? updates]) =>
      (FormationControlParamsBuilder()..update(updates)).build()
          as _$FormationControlParams;

  factory _$FormationControlParams.fromJson(core.Map<String, dynamic> json) {
    var val = FormationControlParamsBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.action = json.containsKey('Action') && json['Action'] != null
        ? FormationControlParamsEnumAction(json['Action'] as int)
        : FormationControlParamsEnumAction(0);
    val.lonGain = json.containsKey('lon_gain') ? json['lon_gain'] as double : 0;
    val.latGain = json.containsKey('lat_gain') ? json['lat_gain'] as double : 0;
    val.bondThick =
        json.containsKey('bond_thick') ? json['bond_thick'] as double : 0;
    val.leadGain =
        json.containsKey('lead_gain') ? json['lead_gain'] as double : 0;
    val.deconflGain =
        json.containsKey('deconfl_gain') ? json['deconfl_gain'] as double : 0;
    val.accelSwitchGain = json.containsKey('accel_switch_gain')
        ? json['accel_switch_gain'] as double
        : 0;
    val.safeDist =
        json.containsKey('safe_dist') ? json['safe_dist'] as double : 0;
    val.deconflictOffset = json.containsKey('deconflict_offset')
        ? json['deconflict_offset'] as double
        : 0;
    val.accelSafeMargin = json.containsKey('accel_safe_margin')
        ? json['accel_safe_margin'] as double
        : 0;
    val.accelLimX =
        json.containsKey('accel_lim_x') ? json['accel_lim_x'] as double : 0;

    return val.build() as _$FormationControlParams;
  }

  _$FormationControlParams._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.action,
      required this.lonGain,
      required this.latGain,
      required this.bondThick,
      required this.leadGain,
      required this.deconflGain,
      required this.accelSwitchGain,
      required this.safeDist,
      required this.deconflictOffset,
      required this.accelSafeMargin,
      required this.accelLimX})
      : super._();

  @override
  FormationControlParams rebuild(
          void Function(FormationControlParamsBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  FormationControlParamsBuilder toBuilder() =>
      FormationControlParamsBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is FormationControlParams &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        action == other.action &&
        (lonGain == other.lonGain || lonGain - other.lonGain <= 1E-7) &&
        (latGain == other.latGain || latGain - other.latGain <= 1E-7) &&
        (bondThick == other.bondThick || bondThick - other.bondThick <= 1E-7) &&
        (leadGain == other.leadGain || leadGain - other.leadGain <= 1E-7) &&
        (deconflGain == other.deconflGain ||
            deconflGain - other.deconflGain <= 1E-7) &&
        (accelSwitchGain == other.accelSwitchGain ||
            accelSwitchGain - other.accelSwitchGain <= 1E-7) &&
        (safeDist == other.safeDist || safeDist - other.safeDist <= 1E-7) &&
        (deconflictOffset == other.deconflictOffset ||
            deconflictOffset - other.deconflictOffset <= 1E-7) &&
        (accelSafeMargin == other.accelSafeMargin ||
            accelSafeMargin - other.accelSafeMargin <= 1E-7) &&
        (accelLimX == other.accelLimX || accelLimX - other.accelLimX <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    0,
                                                                    timestamp
                                                                            ?.hashCode ??
                                                                        null.hashCode),
                                                                src.hashCode),
                                                            srcEnt.hashCode),
                                                        dst.hashCode),
                                                    dstEnt.hashCode),
                                                action.hashCode),
                                            lonGain.hashCode),
                                        latGain.hashCode),
                                    bondThick.hashCode),
                                leadGain.hashCode),
                            deconflGain.hashCode),
                        accelSwitchGain.hashCode),
                    safeDist.hashCode),
                deconflictOffset.hashCode),
            accelSafeMargin.hashCode),
        accelLimX.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('FormationControlParams')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('action', '$action (Enumerated) [${action.toPrettyString()}]')
          ..add('lonGain', '$lonGain')
          ..add('latGain', '$latGain')
          ..add('bondThick', '$bondThick')
          ..add('leadGain', '$leadGain')
          ..add('deconflGain', '$deconflGain')
          ..add('accelSwitchGain', '$accelSwitchGain')
          ..add('safeDist', '$safeDist')
          ..add('deconflictOffset', '$deconflictOffset')
          ..add('accelSafeMargin', '$accelSafeMargin')
          ..add('accelLimX', '$accelLimX'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'FormationControlParams',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'Action': action.value,
        'lon_gain': lonGain,
        'lat_gain': latGain,
        'bond_thick': bondThick,
        'lead_gain': leadGain,
        'deconfl_gain': deconflGain,
        'accel_switch_gain': accelSwitchGain,
        'safe_dist': safeDist,
        'deconflict_offset': deconflictOffset,
        'accel_safe_margin': accelSafeMargin,
        'accel_lim_x': accelLimX,
      };
}

/// Formation Control Parameters builder class
///
class FormationControlParamsBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<FormationControlParams,
            FormationControlParamsBuilder> {
  _$FormationControlParams? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  FormationControlParamsEnumAction _action =
      FormationControlParamsEnumAction(0);
  FormationControlParamsEnumAction get action => _$this._action;
  set action(FormationControlParamsEnumAction action) =>
      _$this._action = action;

  double _lonGain = 0;
  double get lonGain => _$this._lonGain;
  set lonGain(double lonGain) => _$this._lonGain = lonGain;

  double _latGain = 0;
  double get latGain => _$this._latGain;
  set latGain(double latGain) => _$this._latGain = latGain;

  double _bondThick = 0;
  double get bondThick => _$this._bondThick;
  set bondThick(double bondThick) => _$this._bondThick = bondThick;

  double _leadGain = 0;
  double get leadGain => _$this._leadGain;
  set leadGain(double leadGain) => _$this._leadGain = leadGain;

  double _deconflGain = 0;
  double get deconflGain => _$this._deconflGain;
  set deconflGain(double deconflGain) => _$this._deconflGain = deconflGain;

  double _accelSwitchGain = 0;
  double get accelSwitchGain => _$this._accelSwitchGain;
  set accelSwitchGain(double accelSwitchGain) =>
      _$this._accelSwitchGain = accelSwitchGain;

  double _safeDist = 0;
  double get safeDist => _$this._safeDist;
  set safeDist(double safeDist) => _$this._safeDist = safeDist;

  double _deconflictOffset = 0;
  double get deconflictOffset => _$this._deconflictOffset;
  set deconflictOffset(double deconflictOffset) =>
      _$this._deconflictOffset = deconflictOffset;

  double _accelSafeMargin = 0;
  double get accelSafeMargin => _$this._accelSafeMargin;
  set accelSafeMargin(double accelSafeMargin) =>
      _$this._accelSafeMargin = accelSafeMargin;

  double _accelLimX = 0;
  double get accelLimX => _$this._accelLimX;
  set accelLimX(double accelLimX) => _$this._accelLimX = accelLimX;

  FormationControlParamsBuilder();

  FormationControlParamsBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  FormationControlParamsBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$FormationControlParams.fromJson(json);
    replace(v);
  }

  @override
  FormationControlParamsBuilder fromJson(core.Map<String, dynamic> json) =>
      FormationControlParamsBuilder.fromJson(json);

  @override
  FormationControlParamsBuilder newInstance(
          [ImcBuilderHeaderPart? headerFrom]) =>
      FormationControlParamsBuilder()..copyFromHeader(headerFrom);

  FormationControlParamsBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _action = _$v!.action;
      _lonGain = _$v!.lonGain;
      _latGain = _$v!.latGain;
      _bondThick = _$v!.bondThick;
      _leadGain = _$v!.leadGain;
      _deconflGain = _$v!.deconflGain;
      _accelSwitchGain = _$v!.accelSwitchGain;
      _safeDist = _$v!.safeDist;
      _deconflictOffset = _$v!.deconflictOffset;
      _accelSafeMargin = _$v!.accelSafeMargin;
      _accelLimX = _$v!.accelLimX;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(FormationControlParams other) {
    _$v = other as _$FormationControlParams;
  }

  @override
  void update(void Function(FormationControlParamsBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  FormationControlParams build() {
    final result = _$v ??
        _$FormationControlParams._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            action: action,
            lonGain: lonGain,
            latGain: latGain,
            bondThick: bondThick,
            leadGain: leadGain,
            deconflGain: deconflGain,
            accelSwitchGain: accelSwitchGain,
            safeDist: safeDist,
            deconflictOffset: deconflictOffset,
            accelSafeMargin: accelSafeMargin,
            accelLimX: accelLimX);
    replace(result);
    return result;
  }
}

/// Formation Evaluation Data immutable class
///
class _$FormationEvaluation extends FormationEvaluation {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final FormationEvaluationEnumType type;
  @override
  final FormationEvaluationEnumOp op;
  @override
  final double errMean;
  @override
  final double distMinAbs;
  @override
  final double distMinMean;
  @override
  final double rollRateMean;
  @override
  final double time;
  @override
  final FormationControlParams? controlParams;

  factory _$FormationEvaluation(
          [void Function(FormationEvaluationBuilder b)? updates]) =>
      (FormationEvaluationBuilder()..update(updates)).build()
          as _$FormationEvaluation;

  factory _$FormationEvaluation.fromJson(core.Map<String, dynamic> json) {
    var val = FormationEvaluationBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.type = json.containsKey('type') && json['type'] != null
        ? FormationEvaluationEnumType(json['type'] as int)
        : FormationEvaluationEnumType(0);
    val.op = json.containsKey('op') && json['op'] != null
        ? FormationEvaluationEnumOp(json['op'] as int)
        : FormationEvaluationEnumOp(0);
    val.errMean = json.containsKey('err_mean') ? json['err_mean'] as double : 0;
    val.distMinAbs =
        json.containsKey('dist_min_abs') ? json['dist_min_abs'] as double : 0;
    val.distMinMean =
        json.containsKey('dist_min_mean') ? json['dist_min_mean'] as double : 0;
    val.rollRateMean = json.containsKey('roll_rate_mean')
        ? json['roll_rate_mean'] as double
        : 0;
    val.time = json.containsKey('time') ? json['time'] as double : 0;

    FormationControlParams? controlParams;
    if (json.containsKey('ControlParams') && json['ControlParams'] != null) {
      var msgJson = json['ControlParams'] as core.Map<String, dynamic>;
      if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
        var msgType = msgJson['abbrev'] as String;
        var builder = messagesBuilders[msgType]?.call();
        builder = builder?.fromJson(msgJson);
        controlParams = builder?.build() as FormationControlParams?;
      }
    }
    val.controlParams = controlParams;

    return val.build() as _$FormationEvaluation;
  }

  _$FormationEvaluation._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.type,
      required this.op,
      required this.errMean,
      required this.distMinAbs,
      required this.distMinMean,
      required this.rollRateMean,
      required this.time,
      this.controlParams})
      : super._();

  @override
  FormationEvaluation rebuild(
          void Function(FormationEvaluationBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  FormationEvaluationBuilder toBuilder() =>
      FormationEvaluationBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is FormationEvaluation &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        type == other.type &&
        op == other.op &&
        (errMean == other.errMean || errMean - other.errMean <= 1E-7) &&
        (distMinAbs == other.distMinAbs ||
            distMinAbs - other.distMinAbs <= 1E-7) &&
        (distMinMean == other.distMinMean ||
            distMinMean - other.distMinMean <= 1E-7) &&
        (rollRateMean == other.rollRateMean ||
            rollRateMean - other.rollRateMean <= 1E-7) &&
        (time == other.time || time - other.time <= 1E-7) &&
        controlParams == other.controlParams;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        0,
                                                        timestamp?.hashCode ??
                                                            null.hashCode),
                                                    src.hashCode),
                                                srcEnt.hashCode),
                                            dst.hashCode),
                                        dstEnt.hashCode),
                                    type.hashCode),
                                op.hashCode),
                            errMean.hashCode),
                        distMinAbs.hashCode),
                    distMinMean.hashCode),
                rollRateMean.hashCode),
            time.hashCode),
        controlParams?.hashCode ?? null.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('FormationEvaluation')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('type', '$type (Enumerated) [${type.toPrettyString()}]')
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]')
          ..add('errMean', '$errMean')
          ..add('distMinAbs', '$distMinAbs')
          ..add('distMinMean', '$distMinMean')
          ..add('rollRateMean', '$rollRateMean')
          ..add('time', '$time')
          ..add('controlParams', '$controlParams'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'FormationEvaluation',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'type': type.value,
        'op': op.value,
        'err_mean': errMean,
        'dist_min_abs': distMinAbs,
        'dist_min_mean': distMinMean,
        'roll_rate_mean': rollRateMean,
        'time': time,
        'ControlParams': controlParams?.toJson(false),
      };
}

/// Formation Evaluation Data builder class
///
class FormationEvaluationBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<FormationEvaluation,
            FormationEvaluationBuilder> {
  _$FormationEvaluation? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  FormationEvaluationEnumType _type = FormationEvaluationEnumType(0);
  FormationEvaluationEnumType get type => _$this._type;
  set type(FormationEvaluationEnumType type) => _$this._type = type;

  FormationEvaluationEnumOp _op = FormationEvaluationEnumOp(0);
  FormationEvaluationEnumOp get op => _$this._op;
  set op(FormationEvaluationEnumOp op) => _$this._op = op;

  double _errMean = 0;
  double get errMean => _$this._errMean;
  set errMean(double errMean) => _$this._errMean = errMean;

  double _distMinAbs = 0;
  double get distMinAbs => _$this._distMinAbs;
  set distMinAbs(double distMinAbs) => _$this._distMinAbs = distMinAbs;

  double _distMinMean = 0;
  double get distMinMean => _$this._distMinMean;
  set distMinMean(double distMinMean) => _$this._distMinMean = distMinMean;

  double _rollRateMean = 0;
  double get rollRateMean => _$this._rollRateMean;
  set rollRateMean(double rollRateMean) => _$this._rollRateMean = rollRateMean;

  double _time = 0;
  double get time => _$this._time;
  set time(double time) => _$this._time = time;

  FormationControlParams? _controlParams;
  FormationControlParams? get controlParams => _$this._controlParams;
  set controlParams(FormationControlParams? controlParams) =>
      _$this._controlParams = controlParams;

  FormationEvaluationBuilder();

  FormationEvaluationBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  FormationEvaluationBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$FormationEvaluation.fromJson(json);
    replace(v);
  }

  @override
  FormationEvaluationBuilder fromJson(core.Map<String, dynamic> json) =>
      FormationEvaluationBuilder.fromJson(json);

  @override
  FormationEvaluationBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      FormationEvaluationBuilder()..copyFromHeader(headerFrom);

  FormationEvaluationBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _type = _$v!.type;
      _op = _$v!.op;
      _errMean = _$v!.errMean;
      _distMinAbs = _$v!.distMinAbs;
      _distMinMean = _$v!.distMinMean;
      _rollRateMean = _$v!.rollRateMean;
      _time = _$v!.time;
      _controlParams = _$v!.controlParams;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(FormationEvaluation other) {
    _$v = other as _$FormationEvaluation;
  }

  @override
  void update(void Function(FormationEvaluationBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  FormationEvaluation build() {
    final result = _$v ??
        _$FormationEvaluation._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            type: type,
            op: op,
            errMean: errMean,
            distMinAbs: distMinAbs,
            distMinMean: distMinMean,
            rollRateMean: rollRateMean,
            time: time,
            controlParams: controlParams);
    replace(result);
    return result;
  }
}

/// SOI Waypoint immutable class
///
class _$SoiWaypoint extends SoiWaypoint {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double lat;
  @override
  final double lon;
  @override
  final int eta;
  @override
  final int duration;

  factory _$SoiWaypoint([void Function(SoiWaypointBuilder b)? updates]) =>
      (SoiWaypointBuilder()..update(updates)).build() as _$SoiWaypoint;

  factory _$SoiWaypoint.fromJson(core.Map<String, dynamic> json) {
    var val = SoiWaypointBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.eta = json.containsKey('eta') ? json['eta'] as int : 0;
    val.duration = json.containsKey('duration') ? json['duration'] as int : 0;

    return val.build() as _$SoiWaypoint;
  }

  _$SoiWaypoint._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.lat,
      required this.lon,
      required this.eta,
      required this.duration})
      : super._();

  @override
  SoiWaypoint rebuild(void Function(SoiWaypointBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SoiWaypointBuilder toBuilder() => SoiWaypointBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is SoiWaypoint &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        eta == other.eta &&
        duration == other.duration;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    lat.hashCode),
                lon.hashCode),
            eta.hashCode),
        duration.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('SoiWaypoint')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('lat', '$lat (°)')
          ..add('lon', '$lon (°)')
          ..add('eta', '$eta')
          ..add('duration', '$duration (s)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'SoiWaypoint',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'lat': lat,
        'lon': lon,
        'eta': eta,
        'duration': duration,
      };
}

/// SOI Waypoint builder class
///
class SoiWaypointBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<SoiWaypoint, SoiWaypointBuilder> {
  _$SoiWaypoint? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  int _eta = 0;
  int get eta => _$this._eta;
  set eta(int eta) => _$this._eta = eta;

  int _duration = 0;
  int get duration => _$this._duration;
  set duration(int duration) => _$this._duration = duration;

  SoiWaypointBuilder();

  SoiWaypointBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SoiWaypointBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$SoiWaypoint.fromJson(json);
    replace(v);
  }

  @override
  SoiWaypointBuilder fromJson(core.Map<String, dynamic> json) =>
      SoiWaypointBuilder.fromJson(json);

  @override
  SoiWaypointBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SoiWaypointBuilder()..copyFromHeader(headerFrom);

  SoiWaypointBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _eta = _$v!.eta;
      _duration = _$v!.duration;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(SoiWaypoint other) {
    _$v = other as _$SoiWaypoint;
  }

  @override
  void update(void Function(SoiWaypointBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  SoiWaypoint build() {
    final result = _$v ??
        _$SoiWaypoint._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            lat: lat,
            lon: lon,
            eta: eta,
            duration: duration);
    replace(result);
    return result;
  }
}

/// SOI Plan immutable class
///
class _$SoiPlan extends SoiPlan {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int planId;
  @override
  final List<SoiWaypoint> waypoints;

  factory _$SoiPlan([void Function(SoiPlanBuilder b)? updates]) =>
      (SoiPlanBuilder()..update(updates)).build() as _$SoiPlan;

  factory _$SoiPlan.fromJson(core.Map<String, dynamic> json) {
    var val = SoiPlanBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.planId = json.containsKey('plan_id') ? json['plan_id'] as int : 0;
    var waypoints = <SoiWaypoint>[];
    if (json.containsKey('waypoints') && json['waypoints'] != null) {
      var listJson = json['waypoints'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as SoiWaypoint?;
          if (m != null) waypoints.add(m);
        }
      }
    }
    val.waypoints = waypoints;

    return val.build() as _$SoiPlan;
  }

  _$SoiPlan._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.planId,
      required this.waypoints})
      : super._();

  @override
  SoiPlan rebuild(void Function(SoiPlanBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SoiPlanBuilder toBuilder() => SoiPlanBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is SoiPlan &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        planId == other.planId &&
        DeepCollectionEquality().equals(waypoints, other.waypoints);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            planId.hashCode),
        waypoints.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('SoiPlan')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('planId', '$planId')
          ..add('waypoints', '$waypoints'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'SoiPlan',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'plan_id': planId,
        'waypoints': [
          ...waypoints.map((m) => m.toJson(false)),
        ],
      };
}

/// SOI Plan builder class
///
class SoiPlanBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<SoiPlan, SoiPlanBuilder> {
  _$SoiPlan? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _planId = 0;
  int get planId => _$this._planId;
  set planId(int planId) => _$this._planId = planId;

  List<SoiWaypoint> _waypoints = <SoiWaypoint>[];
  List<SoiWaypoint> get waypoints => _$this._waypoints;
  set waypoints(List<SoiWaypoint> waypoints) => _$this._waypoints = waypoints;

  SoiPlanBuilder();

  SoiPlanBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SoiPlanBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$SoiPlan.fromJson(json);
    replace(v);
  }

  @override
  SoiPlanBuilder fromJson(core.Map<String, dynamic> json) =>
      SoiPlanBuilder.fromJson(json);

  @override
  SoiPlanBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SoiPlanBuilder()..copyFromHeader(headerFrom);

  SoiPlanBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _planId = _$v!.planId;
      _waypoints = _$v!.waypoints;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(SoiPlan other) {
    _$v = other as _$SoiPlan;
  }

  @override
  void update(void Function(SoiPlanBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  SoiPlan build() {
    final result = _$v ??
        _$SoiPlan._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            planId: planId,
            waypoints: waypoints);
    replace(result);
    return result;
  }
}

/// SOI Command immutable class
///
class _$SoiCommand extends SoiCommand {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final SoiCommandEnumType type;
  @override
  final SoiCommandEnumCommand command;
  @override
  final String settings;
  @override
  final SoiPlan? plan;
  @override
  final String info;

  factory _$SoiCommand([void Function(SoiCommandBuilder b)? updates]) =>
      (SoiCommandBuilder()..update(updates)).build() as _$SoiCommand;

  factory _$SoiCommand.fromJson(core.Map<String, dynamic> json) {
    var val = SoiCommandBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.type = json.containsKey('type') && json['type'] != null
        ? SoiCommandEnumType(json['type'] as int)
        : SoiCommandEnumType(0);
    val.command = json.containsKey('command') && json['command'] != null
        ? SoiCommandEnumCommand(json['command'] as int)
        : SoiCommandEnumCommand(0);
    val.settings = json.containsKey('settings') && json['settings'] != null
        ? json['settings'] as String
        : '';

    SoiPlan? plan;
    if (json.containsKey('plan') && json['plan'] != null) {
      var msgJson = json['plan'] as core.Map<String, dynamic>;
      if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
        var msgType = msgJson['abbrev'] as String;
        var builder = messagesBuilders[msgType]?.call();
        builder = builder?.fromJson(msgJson);
        plan = builder?.build() as SoiPlan?;
      }
    }
    val.plan = plan;
    val.info = json.containsKey('info') && json['info'] != null
        ? json['info'] as String
        : '';

    return val.build() as _$SoiCommand;
  }

  _$SoiCommand._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.type,
      required this.command,
      required this.settings,
      this.plan,
      required this.info})
      : super._();

  @override
  SoiCommand rebuild(void Function(SoiCommandBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SoiCommandBuilder toBuilder() => SoiCommandBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is SoiCommand &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        type == other.type &&
        command == other.command &&
        settings == other.settings &&
        plan == other.plan &&
        info == other.info;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            0,
                                            timestamp?.hashCode ??
                                                null.hashCode),
                                        src.hashCode),
                                    srcEnt.hashCode),
                                dst.hashCode),
                            dstEnt.hashCode),
                        type.hashCode),
                    command.hashCode),
                settings.hashCode),
            plan?.hashCode ?? null.hashCode),
        info.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('SoiCommand')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('type', '$type (Enumerated) [${type.toPrettyString()}]')
          ..add(
              'command', '$command (Enumerated) [${command.toPrettyString()}]')
          ..add('settings', '$settings (TupleList)')
          ..add('plan', '$plan')
          ..add('info', info))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'SoiCommand',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'type': type.value,
        'command': command.value,
        'settings': settings,
        'plan': plan?.toJson(false),
        'info': info,
      };
}

/// SOI Command builder class
///
class SoiCommandBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<SoiCommand, SoiCommandBuilder> {
  _$SoiCommand? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  SoiCommandEnumType _type = SoiCommandEnumType(0);
  SoiCommandEnumType get type => _$this._type;
  set type(SoiCommandEnumType type) => _$this._type = type;

  SoiCommandEnumCommand _command = SoiCommandEnumCommand(0);
  SoiCommandEnumCommand get command => _$this._command;
  set command(SoiCommandEnumCommand command) => _$this._command = command;

  String _settings = '';
  String get settings => _$this._settings;
  set settings(String settings) => _$this._settings = settings;

  SoiPlan? _plan;
  SoiPlan? get plan => _$this._plan;
  set plan(SoiPlan? plan) => _$this._plan = plan;

  String _info = '';
  String get info => _$this._info;
  set info(String info) => _$this._info = info;

  SoiCommandBuilder();

  SoiCommandBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SoiCommandBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$SoiCommand.fromJson(json);
    replace(v);
  }

  @override
  SoiCommandBuilder fromJson(core.Map<String, dynamic> json) =>
      SoiCommandBuilder.fromJson(json);

  @override
  SoiCommandBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SoiCommandBuilder()..copyFromHeader(headerFrom);

  SoiCommandBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _type = _$v!.type;
      _command = _$v!.command;
      _settings = _$v!.settings;
      _plan = _$v!.plan;
      _info = _$v!.info;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(SoiCommand other) {
    _$v = other as _$SoiCommand;
  }

  @override
  void update(void Function(SoiCommandBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  SoiCommand build() {
    final result = _$v ??
        _$SoiCommand._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            type: type,
            command: command,
            settings: settings,
            plan: plan,
            info: info);
    replace(result);
    return result;
  }
}

/// SOI State immutable class
///
class _$SoiState extends SoiState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final SoiStateEnumState state;
  @override
  final int planId;
  @override
  final int wptId;
  @override
  final int settingsChk;

  factory _$SoiState([void Function(SoiStateBuilder b)? updates]) =>
      (SoiStateBuilder()..update(updates)).build() as _$SoiState;

  factory _$SoiState.fromJson(core.Map<String, dynamic> json) {
    var val = SoiStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.state = json.containsKey('state') && json['state'] != null
        ? SoiStateEnumState(json['state'] as int)
        : SoiStateEnumState(0);
    val.planId = json.containsKey('plan_id') ? json['plan_id'] as int : 0;
    val.wptId = json.containsKey('wpt_id') ? json['wpt_id'] as int : 0;
    val.settingsChk =
        json.containsKey('settings_chk') ? json['settings_chk'] as int : 0;

    return val.build() as _$SoiState;
  }

  _$SoiState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.state,
      required this.planId,
      required this.wptId,
      required this.settingsChk})
      : super._();

  @override
  SoiState rebuild(void Function(SoiStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SoiStateBuilder toBuilder() => SoiStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is SoiState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        state == other.state &&
        planId == other.planId &&
        wptId == other.wptId &&
        settingsChk == other.settingsChk;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    state.hashCode),
                planId.hashCode),
            wptId.hashCode),
        settingsChk.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('SoiState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('state', '$state (Enumerated) [${state.toPrettyString()}]')
          ..add('planId', '$planId')
          ..add('wptId', '$wptId')
          ..add('settingsChk', '$settingsChk'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'SoiState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'state': state.value,
        'plan_id': planId,
        'wpt_id': wptId,
        'settings_chk': settingsChk,
      };
}

/// SOI State builder class
///
class SoiStateBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<SoiState, SoiStateBuilder> {
  _$SoiState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  SoiStateEnumState _state = SoiStateEnumState(0);
  SoiStateEnumState get state => _$this._state;
  set state(SoiStateEnumState state) => _$this._state = state;

  int _planId = 0;
  int get planId => _$this._planId;
  set planId(int planId) => _$this._planId = planId;

  int _wptId = 0;
  int get wptId => _$this._wptId;
  set wptId(int wptId) => _$this._wptId = wptId;

  int _settingsChk = 0;
  int get settingsChk => _$this._settingsChk;
  set settingsChk(int settingsChk) => _$this._settingsChk = settingsChk;

  SoiStateBuilder();

  SoiStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SoiStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$SoiState.fromJson(json);
    replace(v);
  }

  @override
  SoiStateBuilder fromJson(core.Map<String, dynamic> json) =>
      SoiStateBuilder.fromJson(json);

  @override
  SoiStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SoiStateBuilder()..copyFromHeader(headerFrom);

  SoiStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _state = _$v!.state;
      _planId = _$v!.planId;
      _wptId = _$v!.wptId;
      _settingsChk = _$v!.settingsChk;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(SoiState other) {
    _$v = other as _$SoiState;
  }

  @override
  void update(void Function(SoiStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  SoiState build() {
    final result = _$v ??
        _$SoiState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            state: state,
            planId: planId,
            wptId: wptId,
            settingsChk: settingsChk);
    replace(result);
    return result;
  }
}

/// Message Fragment immutable class
///
class _$MessagePart extends MessagePart {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int uid;
  @override
  final int fragNumber;
  @override
  final int numFrags;
  @override
  final List<int> data;

  factory _$MessagePart([void Function(MessagePartBuilder b)? updates]) =>
      (MessagePartBuilder()..update(updates)).build() as _$MessagePart;

  factory _$MessagePart.fromJson(core.Map<String, dynamic> json) {
    var val = MessagePartBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.uid = json.containsKey('uid') ? json['uid'] as int : 0;
    val.fragNumber =
        json.containsKey('frag_number') ? json['frag_number'] as int : 0;
    val.numFrags = json.containsKey('num_frags') ? json['num_frags'] as int : 0;
    val.data = json.containsKey('data')
        ? base64.decode(json['data'] as String)
        : <int>[];

    return val.build() as _$MessagePart;
  }

  _$MessagePart._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.uid,
      required this.fragNumber,
      required this.numFrags,
      required this.data})
      : super._();

  @override
  MessagePart rebuild(void Function(MessagePartBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  MessagePartBuilder toBuilder() => MessagePartBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is MessagePart &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        uid == other.uid &&
        fragNumber == other.fragNumber &&
        numFrags == other.numFrags &&
        ListEquality().equals(data, other.data);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    uid.hashCode),
                fragNumber.hashCode),
            numFrags.hashCode),
        data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('MessagePart')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('uid', '$uid')
          ..add('fragNumber', '$fragNumber')
          ..add('numFrags', '$numFrags')
          ..add('data', '$data'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'MessagePart',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'uid': uid,
        'frag_number': fragNumber,
        'num_frags': numFrags,
        'data': base64.encode(data),
      };
}

/// Message Fragment builder class
///
class MessagePartBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<MessagePart, MessagePartBuilder> {
  _$MessagePart? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _uid = 0;
  int get uid => _$this._uid;
  set uid(int uid) => _$this._uid = uid;

  int _fragNumber = 0;
  int get fragNumber => _$this._fragNumber;
  set fragNumber(int fragNumber) => _$this._fragNumber = fragNumber;

  int _numFrags = 0;
  int get numFrags => _$this._numFrags;
  set numFrags(int numFrags) => _$this._numFrags = numFrags;

  List<int> _data = <int>[];
  List<int> get data => _$this._data;
  set data(List<int> data) => _$this._data = data;

  MessagePartBuilder();

  MessagePartBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  MessagePartBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$MessagePart.fromJson(json);
    replace(v);
  }

  @override
  MessagePartBuilder fromJson(core.Map<String, dynamic> json) =>
      MessagePartBuilder.fromJson(json);

  @override
  MessagePartBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      MessagePartBuilder()..copyFromHeader(headerFrom);

  MessagePartBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _uid = _$v!.uid;
      _fragNumber = _$v!.fragNumber;
      _numFrags = _$v!.numFrags;
      _data = _$v!.data;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(MessagePart other) {
    _$v = other as _$MessagePart;
  }

  @override
  void update(void Function(MessagePartBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  MessagePart build() {
    final result = _$v ??
        _$MessagePart._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            uid: uid,
            fragNumber: fragNumber,
            numFrags: numFrags,
            data: data);
    replace(result);
    return result;
  }
}

/// Neptus Blob immutable class
///
class _$NeptusBlob extends NeptusBlob {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String contentType;
  @override
  final List<int> content;

  factory _$NeptusBlob([void Function(NeptusBlobBuilder b)? updates]) =>
      (NeptusBlobBuilder()..update(updates)).build() as _$NeptusBlob;

  factory _$NeptusBlob.fromJson(core.Map<String, dynamic> json) {
    var val = NeptusBlobBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.contentType =
        json.containsKey('content_type') && json['content_type'] != null
            ? json['content_type'] as String
            : '';
    val.content = json.containsKey('content')
        ? base64.decode(json['content'] as String)
        : <int>[];

    return val.build() as _$NeptusBlob;
  }

  _$NeptusBlob._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.contentType,
      required this.content})
      : super._();

  @override
  NeptusBlob rebuild(void Function(NeptusBlobBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  NeptusBlobBuilder toBuilder() => NeptusBlobBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is NeptusBlob &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        contentType == other.contentType &&
        ListEquality().equals(content, other.content);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            contentType.hashCode),
        content.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('NeptusBlob')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('contentType', contentType)
          ..add('content', '$content'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'NeptusBlob',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'content_type': contentType,
        'content': base64.encode(content),
      };
}

/// Neptus Blob builder class
///
class NeptusBlobBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<NeptusBlob, NeptusBlobBuilder> {
  _$NeptusBlob? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _contentType = '';
  String get contentType => _$this._contentType;
  set contentType(String contentType) => _$this._contentType = contentType;

  List<int> _content = <int>[];
  List<int> get content => _$this._content;
  set content(List<int> content) => _$this._content = content;

  NeptusBlobBuilder();

  NeptusBlobBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  NeptusBlobBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$NeptusBlob.fromJson(json);
    replace(v);
  }

  @override
  NeptusBlobBuilder fromJson(core.Map<String, dynamic> json) =>
      NeptusBlobBuilder.fromJson(json);

  @override
  NeptusBlobBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      NeptusBlobBuilder()..copyFromHeader(headerFrom);

  NeptusBlobBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _contentType = _$v!.contentType;
      _content = _$v!.content;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(NeptusBlob other) {
    _$v = other as _$NeptusBlob;
  }

  @override
  void update(void Function(NeptusBlobBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  NeptusBlob build() {
    final result = _$v ??
        _$NeptusBlob._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            contentType: contentType,
            content: content);
    replace(result);
    return result;
  }
}

/// Aborted immutable class
///
class _$Aborted extends Aborted {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  factory _$Aborted([void Function(AbortedBuilder b)? updates]) =>
      (AbortedBuilder()..update(updates)).build() as _$Aborted;

  factory _$Aborted.fromJson(core.Map<String, dynamic> json) {
    var val = AbortedBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    return val.build() as _$Aborted;
  }

  _$Aborted._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId})
      : super._();

  @override
  Aborted rebuild(void Function(AbortedBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  AbortedBuilder toBuilder() => AbortedBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Aborted &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc($jc($jc(0, timestamp?.hashCode ?? null.hashCode), src.hashCode),
                srcEnt.hashCode),
            dst.hashCode),
        dstEnt.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Aborted')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Aborted',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
      };
}

/// Aborted builder class
///
class AbortedBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Aborted, AbortedBuilder> {
  _$Aborted? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  AbortedBuilder();

  AbortedBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  AbortedBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Aborted.fromJson(json);
    replace(v);
  }

  @override
  AbortedBuilder fromJson(core.Map<String, dynamic> json) =>
      AbortedBuilder.fromJson(json);

  @override
  AbortedBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      AbortedBuilder()..copyFromHeader(headerFrom);

  AbortedBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Aborted other) {
    _$v = other as _$Aborted;
  }

  @override
  void update(void Function(AbortedBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Aborted build() {
    final result = _$v ??
        _$Aborted._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt);
    replace(result);
    return result;
  }
}

/// USBL Angles immutable class
///
class _$UsblAngles extends UsblAngles {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int target;
  @override
  final double bearing;
  @override
  final double elevation;

  factory _$UsblAngles([void Function(UsblAnglesBuilder b)? updates]) =>
      (UsblAnglesBuilder()..update(updates)).build() as _$UsblAngles;

  factory _$UsblAngles.fromJson(core.Map<String, dynamic> json) {
    var val = UsblAnglesBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.target = json.containsKey('target') ? json['target'] as int : 0;
    val.bearing = json.containsKey('bearing') ? json['bearing'] as double : 0;
    val.elevation =
        json.containsKey('elevation') ? json['elevation'] as double : 0;

    return val.build() as _$UsblAngles;
  }

  _$UsblAngles._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.target,
      required this.bearing,
      required this.elevation})
      : super._();

  @override
  UsblAngles rebuild(void Function(UsblAnglesBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  UsblAnglesBuilder toBuilder() => UsblAnglesBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is UsblAngles &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        target == other.target &&
        (bearing == other.bearing || bearing - other.bearing <= 1E-7) &&
        (elevation == other.elevation || elevation - other.elevation <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                target.hashCode),
            bearing.hashCode),
        elevation.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('UsblAngles')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('target', '$target')
          ..add(
              'bearing', '$bearing (rad) [${bearing * 180.0 / math.pi} (deg)]')
          ..add('elevation',
              '$elevation (rad) [${elevation * 180.0 / math.pi} (deg)]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'UsblAngles',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'target': target,
        'bearing': bearing,
        'elevation': elevation,
      };
}

/// USBL Angles builder class
///
class UsblAnglesBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<UsblAngles, UsblAnglesBuilder> {
  _$UsblAngles? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _target = 0;
  int get target => _$this._target;
  set target(int target) => _$this._target = target;

  double _bearing = 0;
  double get bearing => _$this._bearing;
  set bearing(double bearing) => _$this._bearing = bearing;

  double _elevation = 0;
  double get elevation => _$this._elevation;
  set elevation(double elevation) => _$this._elevation = elevation;

  UsblAnglesBuilder();

  UsblAnglesBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  UsblAnglesBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$UsblAngles.fromJson(json);
    replace(v);
  }

  @override
  UsblAnglesBuilder fromJson(core.Map<String, dynamic> json) =>
      UsblAnglesBuilder.fromJson(json);

  @override
  UsblAnglesBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      UsblAnglesBuilder()..copyFromHeader(headerFrom);

  UsblAnglesBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _target = _$v!.target;
      _bearing = _$v!.bearing;
      _elevation = _$v!.elevation;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(UsblAngles other) {
    _$v = other as _$UsblAngles;
  }

  @override
  void update(void Function(UsblAnglesBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  UsblAngles build() {
    final result = _$v ??
        _$UsblAngles._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            target: target,
            bearing: bearing,
            elevation: elevation);
    replace(result);
    return result;
  }
}

/// USBL Position immutable class
///
class _$UsblPosition extends UsblPosition {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int target;
  @override
  final double x;
  @override
  final double y;
  @override
  final double z;

  factory _$UsblPosition([void Function(UsblPositionBuilder b)? updates]) =>
      (UsblPositionBuilder()..update(updates)).build() as _$UsblPosition;

  factory _$UsblPosition.fromJson(core.Map<String, dynamic> json) {
    var val = UsblPositionBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.target = json.containsKey('target') ? json['target'] as int : 0;
    val.x = json.containsKey('x') ? json['x'] as double : 0;
    val.y = json.containsKey('y') ? json['y'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;

    return val.build() as _$UsblPosition;
  }

  _$UsblPosition._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.target,
      required this.x,
      required this.y,
      required this.z})
      : super._();

  @override
  UsblPosition rebuild(void Function(UsblPositionBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  UsblPositionBuilder toBuilder() => UsblPositionBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is UsblPosition &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        target == other.target &&
        (x == other.x || x - other.x <= 1E-7) &&
        (y == other.y || y - other.y <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    target.hashCode),
                x.hashCode),
            y.hashCode),
        z.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('UsblPosition')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('target', '$target')
          ..add('x', '$x (m)')
          ..add('y', '$y (m)')
          ..add('z', '$z (m)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'UsblPosition',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'target': target,
        'x': x,
        'y': y,
        'z': z,
      };
}

/// USBL Position builder class
///
class UsblPositionBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<UsblPosition, UsblPositionBuilder> {
  _$UsblPosition? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _target = 0;
  int get target => _$this._target;
  set target(int target) => _$this._target = target;

  double _x = 0;
  double get x => _$this._x;
  set x(double x) => _$this._x = x;

  double _y = 0;
  double get y => _$this._y;
  set y(double y) => _$this._y = y;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  UsblPositionBuilder();

  UsblPositionBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  UsblPositionBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$UsblPosition.fromJson(json);
    replace(v);
  }

  @override
  UsblPositionBuilder fromJson(core.Map<String, dynamic> json) =>
      UsblPositionBuilder.fromJson(json);

  @override
  UsblPositionBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      UsblPositionBuilder()..copyFromHeader(headerFrom);

  UsblPositionBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _target = _$v!.target;
      _x = _$v!.x;
      _y = _$v!.y;
      _z = _$v!.z;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(UsblPosition other) {
    _$v = other as _$UsblPosition;
  }

  @override
  void update(void Function(UsblPositionBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  UsblPosition build() {
    final result = _$v ??
        _$UsblPosition._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            target: target,
            x: x,
            y: y,
            z: z);
    replace(result);
    return result;
  }
}

/// USBL Fix immutable class
///
class _$UsblFix extends UsblFix {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int target;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final ZUnitsEnum zUnits;
  @override
  final double z;

  factory _$UsblFix([void Function(UsblFixBuilder b)? updates]) =>
      (UsblFixBuilder()..update(updates)).build() as _$UsblFix;

  factory _$UsblFix.fromJson(core.Map<String, dynamic> json) {
    var val = UsblFixBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.target = json.containsKey('target') ? json['target'] as int : 0;
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.zUnits = json.containsKey('z_units') && json['z_units'] != null
        ? ZUnitsEnum(json['z_units'] as int)
        : ZUnitsEnum(0);
    val.z = json.containsKey('z') ? json['z'] as double : 0;

    return val.build() as _$UsblFix;
  }

  _$UsblFix._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.target,
      required this.lat,
      required this.lon,
      required this.zUnits,
      required this.z})
      : super._();

  @override
  UsblFix rebuild(void Function(UsblFixBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  UsblFixBuilder toBuilder() => UsblFixBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is UsblFix &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        target == other.target &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        zUnits == other.zUnits &&
        (z == other.z || z - other.z <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            0,
                                            timestamp?.hashCode ??
                                                null.hashCode),
                                        src.hashCode),
                                    srcEnt.hashCode),
                                dst.hashCode),
                            dstEnt.hashCode),
                        target.hashCode),
                    lat.hashCode),
                lon.hashCode),
            zUnits.hashCode),
        z.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('UsblFix')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('target', '$target')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('zUnits', '$zUnits (Enumerated) [${zUnits.toPrettyString()}]')
          ..add('z', '$z (m)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'UsblFix',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'target': target,
        'lat': lat,
        'lon': lon,
        'z_units': zUnits.value,
        'z': z,
      };
}

/// USBL Fix builder class
///
class UsblFixBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<UsblFix, UsblFixBuilder> {
  _$UsblFix? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _target = 0;
  int get target => _$this._target;
  set target(int target) => _$this._target = target;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  ZUnitsEnum _zUnits = ZUnitsEnum(0);
  ZUnitsEnum get zUnits => _$this._zUnits;
  set zUnits(ZUnitsEnum zUnits) => _$this._zUnits = zUnits;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  UsblFixBuilder();

  UsblFixBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  UsblFixBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$UsblFix.fromJson(json);
    replace(v);
  }

  @override
  UsblFixBuilder fromJson(core.Map<String, dynamic> json) =>
      UsblFixBuilder.fromJson(json);

  @override
  UsblFixBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      UsblFixBuilder()..copyFromHeader(headerFrom);

  UsblFixBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _target = _$v!.target;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _zUnits = _$v!.zUnits;
      _z = _$v!.z;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(UsblFix other) {
    _$v = other as _$UsblFix;
  }

  @override
  void update(void Function(UsblFixBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  UsblFix build() {
    final result = _$v ??
        _$UsblFix._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            target: target,
            lat: lat,
            lon: lon,
            zUnits: zUnits,
            z: z);
    replace(result);
    return result;
  }
}

/// Parameters XML immutable class
///
class _$ParametersXml extends ParametersXml {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String locale;
  @override
  final List<int> config;

  factory _$ParametersXml([void Function(ParametersXmlBuilder b)? updates]) =>
      (ParametersXmlBuilder()..update(updates)).build() as _$ParametersXml;

  factory _$ParametersXml.fromJson(core.Map<String, dynamic> json) {
    var val = ParametersXmlBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.locale = json.containsKey('locale') && json['locale'] != null
        ? json['locale'] as String
        : '';
    val.config = json.containsKey('config')
        ? base64.decode(json['config'] as String)
        : <int>[];

    return val.build() as _$ParametersXml;
  }

  _$ParametersXml._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.locale,
      required this.config})
      : super._();

  @override
  ParametersXml rebuild(void Function(ParametersXmlBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  ParametersXmlBuilder toBuilder() => ParametersXmlBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is ParametersXml &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        locale == other.locale &&
        ListEquality().equals(config, other.config);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            locale.hashCode),
        config.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('ParametersXml')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('locale', locale)
          ..add('config', '$config'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'ParametersXml',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'locale': locale,
        'config': base64.encode(config),
      };
}

/// Parameters XML builder class
///
class ParametersXmlBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<ParametersXml, ParametersXmlBuilder> {
  _$ParametersXml? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _locale = '';
  String get locale => _$this._locale;
  set locale(String locale) => _$this._locale = locale;

  List<int> _config = <int>[];
  List<int> get config => _$this._config;
  set config(List<int> config) => _$this._config = config;

  ParametersXmlBuilder();

  ParametersXmlBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  ParametersXmlBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$ParametersXml.fromJson(json);
    replace(v);
  }

  @override
  ParametersXmlBuilder fromJson(core.Map<String, dynamic> json) =>
      ParametersXmlBuilder.fromJson(json);

  @override
  ParametersXmlBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      ParametersXmlBuilder()..copyFromHeader(headerFrom);

  ParametersXmlBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _locale = _$v!.locale;
      _config = _$v!.config;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(ParametersXml other) {
    _$v = other as _$ParametersXml;
  }

  @override
  void update(void Function(ParametersXmlBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  ParametersXml build() {
    final result = _$v ??
        _$ParametersXml._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            locale: locale,
            config: config);
    replace(result);
    return result;
  }
}

/// Get Parameters XML immutable class
///
class _$GetParametersXml extends GetParametersXml {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  factory _$GetParametersXml(
          [void Function(GetParametersXmlBuilder b)? updates]) =>
      (GetParametersXmlBuilder()..update(updates)).build()
          as _$GetParametersXml;

  factory _$GetParametersXml.fromJson(core.Map<String, dynamic> json) {
    var val = GetParametersXmlBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    return val.build() as _$GetParametersXml;
  }

  _$GetParametersXml._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId})
      : super._();

  @override
  GetParametersXml rebuild(void Function(GetParametersXmlBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GetParametersXmlBuilder toBuilder() =>
      GetParametersXmlBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GetParametersXml &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc($jc($jc(0, timestamp?.hashCode ?? null.hashCode), src.hashCode),
                srcEnt.hashCode),
            dst.hashCode),
        dstEnt.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GetParametersXml')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'GetParametersXml',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
      };
}

/// Get Parameters XML builder class
///
class GetParametersXmlBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<GetParametersXml, GetParametersXmlBuilder> {
  _$GetParametersXml? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  GetParametersXmlBuilder();

  GetParametersXmlBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  GetParametersXmlBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$GetParametersXml.fromJson(json);
    replace(v);
  }

  @override
  GetParametersXmlBuilder fromJson(core.Map<String, dynamic> json) =>
      GetParametersXmlBuilder.fromJson(json);

  @override
  GetParametersXmlBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      GetParametersXmlBuilder()..copyFromHeader(headerFrom);

  GetParametersXmlBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GetParametersXml other) {
    _$v = other as _$GetParametersXml;
  }

  @override
  void update(void Function(GetParametersXmlBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GetParametersXml build() {
    final result = _$v ??
        _$GetParametersXml._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt);
    replace(result);
    return result;
  }
}

/// Set Image Coordinates immutable class
///
class _$SetImageCoords extends SetImageCoords {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int camId;
  @override
  final int x;
  @override
  final int y;

  factory _$SetImageCoords([void Function(SetImageCoordsBuilder b)? updates]) =>
      (SetImageCoordsBuilder()..update(updates)).build() as _$SetImageCoords;

  factory _$SetImageCoords.fromJson(core.Map<String, dynamic> json) {
    var val = SetImageCoordsBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.camId = json.containsKey('camId') ? json['camId'] as int : 0;
    val.x = json.containsKey('x') ? json['x'] as int : 0;
    val.y = json.containsKey('y') ? json['y'] as int : 0;

    return val.build() as _$SetImageCoords;
  }

  _$SetImageCoords._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.camId,
      required this.x,
      required this.y})
      : super._();

  @override
  SetImageCoords rebuild(void Function(SetImageCoordsBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SetImageCoordsBuilder toBuilder() => SetImageCoordsBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is SetImageCoords &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        camId == other.camId &&
        x == other.x &&
        y == other.y;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                camId.hashCode),
            x.hashCode),
        y.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('SetImageCoords')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('camId', '$camId')
          ..add('x', '$x (px)')
          ..add('y', '$y (px)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'SetImageCoords',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'camId': camId,
        'x': x,
        'y': y,
      };
}

/// Set Image Coordinates builder class
///
class SetImageCoordsBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<SetImageCoords, SetImageCoordsBuilder> {
  _$SetImageCoords? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _camId = 0;
  int get camId => _$this._camId;
  set camId(int camId) => _$this._camId = camId;

  int _x = 0;
  int get x => _$this._x;
  set x(int x) => _$this._x = x;

  int _y = 0;
  int get y => _$this._y;
  set y(int y) => _$this._y = y;

  SetImageCoordsBuilder();

  SetImageCoordsBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SetImageCoordsBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$SetImageCoords.fromJson(json);
    replace(v);
  }

  @override
  SetImageCoordsBuilder fromJson(core.Map<String, dynamic> json) =>
      SetImageCoordsBuilder.fromJson(json);

  @override
  SetImageCoordsBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SetImageCoordsBuilder()..copyFromHeader(headerFrom);

  SetImageCoordsBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _camId = _$v!.camId;
      _x = _$v!.x;
      _y = _$v!.y;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(SetImageCoords other) {
    _$v = other as _$SetImageCoords;
  }

  @override
  void update(void Function(SetImageCoordsBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  SetImageCoords build() {
    final result = _$v ??
        _$SetImageCoords._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            camId: camId,
            x: x,
            y: y);
    replace(result);
    return result;
  }
}

/// Get Image Coordinates immutable class
///
class _$GetImageCoords extends GetImageCoords {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int camId;
  @override
  final int x;
  @override
  final int y;

  factory _$GetImageCoords([void Function(GetImageCoordsBuilder b)? updates]) =>
      (GetImageCoordsBuilder()..update(updates)).build() as _$GetImageCoords;

  factory _$GetImageCoords.fromJson(core.Map<String, dynamic> json) {
    var val = GetImageCoordsBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.camId = json.containsKey('camId') ? json['camId'] as int : 0;
    val.x = json.containsKey('x') ? json['x'] as int : 0;
    val.y = json.containsKey('y') ? json['y'] as int : 0;

    return val.build() as _$GetImageCoords;
  }

  _$GetImageCoords._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.camId,
      required this.x,
      required this.y})
      : super._();

  @override
  GetImageCoords rebuild(void Function(GetImageCoordsBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GetImageCoordsBuilder toBuilder() => GetImageCoordsBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GetImageCoords &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        camId == other.camId &&
        x == other.x &&
        y == other.y;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                camId.hashCode),
            x.hashCode),
        y.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GetImageCoords')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('camId', '$camId')
          ..add('x', '$x (px)')
          ..add('y', '$y (px)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'GetImageCoords',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'camId': camId,
        'x': x,
        'y': y,
      };
}

/// Get Image Coordinates builder class
///
class GetImageCoordsBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<GetImageCoords, GetImageCoordsBuilder> {
  _$GetImageCoords? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _camId = 0;
  int get camId => _$this._camId;
  set camId(int camId) => _$this._camId = camId;

  int _x = 0;
  int get x => _$this._x;
  set x(int x) => _$this._x = x;

  int _y = 0;
  int get y => _$this._y;
  set y(int y) => _$this._y = y;

  GetImageCoordsBuilder();

  GetImageCoordsBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  GetImageCoordsBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$GetImageCoords.fromJson(json);
    replace(v);
  }

  @override
  GetImageCoordsBuilder fromJson(core.Map<String, dynamic> json) =>
      GetImageCoordsBuilder.fromJson(json);

  @override
  GetImageCoordsBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      GetImageCoordsBuilder()..copyFromHeader(headerFrom);

  GetImageCoordsBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _camId = _$v!.camId;
      _x = _$v!.x;
      _y = _$v!.y;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GetImageCoords other) {
    _$v = other as _$GetImageCoords;
  }

  @override
  void update(void Function(GetImageCoordsBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GetImageCoords build() {
    final result = _$v ??
        _$GetImageCoords._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            camId: camId,
            x: x,
            y: y);
    replace(result);
    return result;
  }
}

/// Get World Coordinates immutable class
///
class _$GetWorldCoordinates extends GetWorldCoordinates {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final BooleanEnum tracking;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double x;
  @override
  final double y;
  @override
  final double z;

  factory _$GetWorldCoordinates(
          [void Function(GetWorldCoordinatesBuilder b)? updates]) =>
      (GetWorldCoordinatesBuilder()..update(updates)).build()
          as _$GetWorldCoordinates;

  factory _$GetWorldCoordinates.fromJson(core.Map<String, dynamic> json) {
    var val = GetWorldCoordinatesBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.tracking = json.containsKey('tracking') && json['tracking'] != null
        ? BooleanEnum(json['tracking'] as int)
        : BooleanEnum(0);
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.x = json.containsKey('x') ? json['x'] as double : 0;
    val.y = json.containsKey('y') ? json['y'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;

    return val.build() as _$GetWorldCoordinates;
  }

  _$GetWorldCoordinates._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.tracking,
      required this.lat,
      required this.lon,
      required this.x,
      required this.y,
      required this.z})
      : super._();

  @override
  GetWorldCoordinates rebuild(
          void Function(GetWorldCoordinatesBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GetWorldCoordinatesBuilder toBuilder() =>
      GetWorldCoordinatesBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GetWorldCoordinates &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        tracking == other.tracking &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (x == other.x || x - other.x <= 1E-7) &&
        (y == other.y || y - other.y <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                0,
                                                timestamp?.hashCode ??
                                                    null.hashCode),
                                            src.hashCode),
                                        srcEnt.hashCode),
                                    dst.hashCode),
                                dstEnt.hashCode),
                            tracking.hashCode),
                        lat.hashCode),
                    lon.hashCode),
                x.hashCode),
            y.hashCode),
        z.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GetWorldCoordinates')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('tracking',
              '$tracking (Enumerated) [${tracking.toPrettyString()}]')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('x', '$x (m)')
          ..add('y', '$y (m)')
          ..add('z', '$z (m)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'GetWorldCoordinates',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'tracking': tracking.value,
        'lat': lat,
        'lon': lon,
        'x': x,
        'y': y,
        'z': z,
      };
}

/// Get World Coordinates builder class
///
class GetWorldCoordinatesBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<GetWorldCoordinates,
            GetWorldCoordinatesBuilder> {
  _$GetWorldCoordinates? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  BooleanEnum _tracking = BooleanEnum(0);
  BooleanEnum get tracking => _$this._tracking;
  set tracking(BooleanEnum tracking) => _$this._tracking = tracking;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _x = 0;
  double get x => _$this._x;
  set x(double x) => _$this._x = x;

  double _y = 0;
  double get y => _$this._y;
  set y(double y) => _$this._y = y;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  GetWorldCoordinatesBuilder();

  GetWorldCoordinatesBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  GetWorldCoordinatesBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$GetWorldCoordinates.fromJson(json);
    replace(v);
  }

  @override
  GetWorldCoordinatesBuilder fromJson(core.Map<String, dynamic> json) =>
      GetWorldCoordinatesBuilder.fromJson(json);

  @override
  GetWorldCoordinatesBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      GetWorldCoordinatesBuilder()..copyFromHeader(headerFrom);

  GetWorldCoordinatesBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _tracking = _$v!.tracking;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _x = _$v!.x;
      _y = _$v!.y;
      _z = _$v!.z;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GetWorldCoordinates other) {
    _$v = other as _$GetWorldCoordinates;
  }

  @override
  void update(void Function(GetWorldCoordinatesBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GetWorldCoordinates build() {
    final result = _$v ??
        _$GetWorldCoordinates._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            tracking: tracking,
            lat: lat,
            lon: lon,
            x: x,
            y: y,
            z: z);
    replace(result);
    return result;
  }
}

/// USBL Angles Extended immutable class
///
class _$UsblAnglesExtended extends UsblAnglesExtended {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String target;
  @override
  final double lbearing;
  @override
  final double lelevation;
  @override
  final double bearing;
  @override
  final double elevation;
  @override
  final double phi;
  @override
  final double theta;
  @override
  final double psi;
  @override
  final double accuracy;

  factory _$UsblAnglesExtended(
          [void Function(UsblAnglesExtendedBuilder b)? updates]) =>
      (UsblAnglesExtendedBuilder()..update(updates)).build()
          as _$UsblAnglesExtended;

  factory _$UsblAnglesExtended.fromJson(core.Map<String, dynamic> json) {
    var val = UsblAnglesExtendedBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.target = json.containsKey('target') && json['target'] != null
        ? json['target'] as String
        : '';
    val.lbearing =
        json.containsKey('lbearing') ? json['lbearing'] as double : 0;
    val.lelevation =
        json.containsKey('lelevation') ? json['lelevation'] as double : 0;
    val.bearing = json.containsKey('bearing') ? json['bearing'] as double : 0;
    val.elevation =
        json.containsKey('elevation') ? json['elevation'] as double : 0;
    val.phi = json.containsKey('phi') ? json['phi'] as double : 0;
    val.theta = json.containsKey('theta') ? json['theta'] as double : 0;
    val.psi = json.containsKey('psi') ? json['psi'] as double : 0;
    val.accuracy =
        json.containsKey('accuracy') ? json['accuracy'] as double : 0;

    return val.build() as _$UsblAnglesExtended;
  }

  _$UsblAnglesExtended._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.target,
      required this.lbearing,
      required this.lelevation,
      required this.bearing,
      required this.elevation,
      required this.phi,
      required this.theta,
      required this.psi,
      required this.accuracy})
      : super._();

  @override
  UsblAnglesExtended rebuild(
          void Function(UsblAnglesExtendedBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  UsblAnglesExtendedBuilder toBuilder() =>
      UsblAnglesExtendedBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is UsblAnglesExtended &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        target == other.target &&
        (lbearing == other.lbearing || lbearing - other.lbearing <= 1E-7) &&
        (lelevation == other.lelevation ||
            lelevation - other.lelevation <= 1E-7) &&
        (bearing == other.bearing || bearing - other.bearing <= 1E-7) &&
        (elevation == other.elevation || elevation - other.elevation <= 1E-7) &&
        (phi == other.phi || phi - other.phi <= 1E-7) &&
        (theta == other.theta || theta - other.theta <= 1E-7) &&
        (psi == other.psi || psi - other.psi <= 1E-7) &&
        (accuracy == other.accuracy || accuracy - other.accuracy <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            0,
                                                            timestamp
                                                                    ?.hashCode ??
                                                                null.hashCode),
                                                        src.hashCode),
                                                    srcEnt.hashCode),
                                                dst.hashCode),
                                            dstEnt.hashCode),
                                        target.hashCode),
                                    lbearing.hashCode),
                                lelevation.hashCode),
                            bearing.hashCode),
                        elevation.hashCode),
                    phi.hashCode),
                theta.hashCode),
            psi.hashCode),
        accuracy.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('UsblAnglesExtended')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('target', target)
          ..add('lbearing',
              '$lbearing (rad) [${lbearing * 180.0 / math.pi} (deg)]')
          ..add('lelevation',
              '$lelevation (rad) [${lelevation * 180.0 / math.pi} (deg)]')
          ..add(
              'bearing', '$bearing (rad) [${bearing * 180.0 / math.pi} (deg)]')
          ..add('elevation',
              '$elevation (rad) [${elevation * 180.0 / math.pi} (deg)]')
          ..add('phi', '$phi (rad) [${phi * 180.0 / math.pi} (deg)]')
          ..add('theta', '$theta (rad) [${theta * 180.0 / math.pi} (deg)]')
          ..add('psi', '$psi (rad) [${psi * 180.0 / math.pi} (deg)]')
          ..add('accuracy',
              '$accuracy (rad) [${accuracy * 180.0 / math.pi} (deg)]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'UsblAnglesExtended',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'target': target,
        'lbearing': lbearing,
        'lelevation': lelevation,
        'bearing': bearing,
        'elevation': elevation,
        'phi': phi,
        'theta': theta,
        'psi': psi,
        'accuracy': accuracy,
      };
}

/// USBL Angles Extended builder class
///
class UsblAnglesExtendedBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<UsblAnglesExtended, UsblAnglesExtendedBuilder> {
  _$UsblAnglesExtended? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _target = '';
  String get target => _$this._target;
  set target(String target) => _$this._target = target;

  double _lbearing = 0;
  double get lbearing => _$this._lbearing;
  set lbearing(double lbearing) => _$this._lbearing = lbearing;

  double _lelevation = 0;
  double get lelevation => _$this._lelevation;
  set lelevation(double lelevation) => _$this._lelevation = lelevation;

  double _bearing = 0;
  double get bearing => _$this._bearing;
  set bearing(double bearing) => _$this._bearing = bearing;

  double _elevation = 0;
  double get elevation => _$this._elevation;
  set elevation(double elevation) => _$this._elevation = elevation;

  double _phi = 0;
  double get phi => _$this._phi;
  set phi(double phi) => _$this._phi = phi;

  double _theta = 0;
  double get theta => _$this._theta;
  set theta(double theta) => _$this._theta = theta;

  double _psi = 0;
  double get psi => _$this._psi;
  set psi(double psi) => _$this._psi = psi;

  double _accuracy = 0;
  double get accuracy => _$this._accuracy;
  set accuracy(double accuracy) => _$this._accuracy = accuracy;

  UsblAnglesExtendedBuilder();

  UsblAnglesExtendedBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  UsblAnglesExtendedBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$UsblAnglesExtended.fromJson(json);
    replace(v);
  }

  @override
  UsblAnglesExtendedBuilder fromJson(core.Map<String, dynamic> json) =>
      UsblAnglesExtendedBuilder.fromJson(json);

  @override
  UsblAnglesExtendedBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      UsblAnglesExtendedBuilder()..copyFromHeader(headerFrom);

  UsblAnglesExtendedBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _target = _$v!.target;
      _lbearing = _$v!.lbearing;
      _lelevation = _$v!.lelevation;
      _bearing = _$v!.bearing;
      _elevation = _$v!.elevation;
      _phi = _$v!.phi;
      _theta = _$v!.theta;
      _psi = _$v!.psi;
      _accuracy = _$v!.accuracy;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(UsblAnglesExtended other) {
    _$v = other as _$UsblAnglesExtended;
  }

  @override
  void update(void Function(UsblAnglesExtendedBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  UsblAnglesExtended build() {
    final result = _$v ??
        _$UsblAnglesExtended._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            target: target,
            lbearing: lbearing,
            lelevation: lelevation,
            bearing: bearing,
            elevation: elevation,
            phi: phi,
            theta: theta,
            psi: psi,
            accuracy: accuracy);
    replace(result);
    return result;
  }
}

/// USBL Position Extended immutable class
///
class _$UsblPositionExtended extends UsblPositionExtended {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String target;
  @override
  final double x;
  @override
  final double y;
  @override
  final double z;
  @override
  final double n;
  @override
  final double e;
  @override
  final double d;
  @override
  final double phi;
  @override
  final double theta;
  @override
  final double psi;
  @override
  final double accuracy;

  factory _$UsblPositionExtended(
          [void Function(UsblPositionExtendedBuilder b)? updates]) =>
      (UsblPositionExtendedBuilder()..update(updates)).build()
          as _$UsblPositionExtended;

  factory _$UsblPositionExtended.fromJson(core.Map<String, dynamic> json) {
    var val = UsblPositionExtendedBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.target = json.containsKey('target') && json['target'] != null
        ? json['target'] as String
        : '';
    val.x = json.containsKey('x') ? json['x'] as double : 0;
    val.y = json.containsKey('y') ? json['y'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.n = json.containsKey('n') ? json['n'] as double : 0;
    val.e = json.containsKey('e') ? json['e'] as double : 0;
    val.d = json.containsKey('d') ? json['d'] as double : 0;
    val.phi = json.containsKey('phi') ? json['phi'] as double : 0;
    val.theta = json.containsKey('theta') ? json['theta'] as double : 0;
    val.psi = json.containsKey('psi') ? json['psi'] as double : 0;
    val.accuracy =
        json.containsKey('accuracy') ? json['accuracy'] as double : 0;

    return val.build() as _$UsblPositionExtended;
  }

  _$UsblPositionExtended._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.target,
      required this.x,
      required this.y,
      required this.z,
      required this.n,
      required this.e,
      required this.d,
      required this.phi,
      required this.theta,
      required this.psi,
      required this.accuracy})
      : super._();

  @override
  UsblPositionExtended rebuild(
          void Function(UsblPositionExtendedBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  UsblPositionExtendedBuilder toBuilder() =>
      UsblPositionExtendedBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is UsblPositionExtended &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        target == other.target &&
        (x == other.x || x - other.x <= 1E-7) &&
        (y == other.y || y - other.y <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        (n == other.n || n - other.n <= 1E-7) &&
        (e == other.e || e - other.e <= 1E-7) &&
        (d == other.d || d - other.d <= 1E-7) &&
        (phi == other.phi || phi - other.phi <= 1E-7) &&
        (theta == other.theta || theta - other.theta <= 1E-7) &&
        (psi == other.psi || psi - other.psi <= 1E-7) &&
        (accuracy == other.accuracy || accuracy - other.accuracy <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    0,
                                                                    timestamp
                                                                            ?.hashCode ??
                                                                        null.hashCode),
                                                                src.hashCode),
                                                            srcEnt.hashCode),
                                                        dst.hashCode),
                                                    dstEnt.hashCode),
                                                target.hashCode),
                                            x.hashCode),
                                        y.hashCode),
                                    z.hashCode),
                                n.hashCode),
                            e.hashCode),
                        d.hashCode),
                    phi.hashCode),
                theta.hashCode),
            psi.hashCode),
        accuracy.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('UsblPositionExtended')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('target', target)
          ..add('x', '$x (m)')
          ..add('y', '$y (m)')
          ..add('z', '$z (m)')
          ..add('n', '$n (m)')
          ..add('e', '$e (m)')
          ..add('d', '$d (m)')
          ..add('phi', '$phi (rad) [${phi * 180.0 / math.pi} (deg)]')
          ..add('theta', '$theta (rad) [${theta * 180.0 / math.pi} (deg)]')
          ..add('psi', '$psi (rad) [${psi * 180.0 / math.pi} (deg)]')
          ..add('accuracy', '$accuracy (m)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'UsblPositionExtended',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'target': target,
        'x': x,
        'y': y,
        'z': z,
        'n': n,
        'e': e,
        'd': d,
        'phi': phi,
        'theta': theta,
        'psi': psi,
        'accuracy': accuracy,
      };
}

/// USBL Position Extended builder class
///
class UsblPositionExtendedBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<UsblPositionExtended,
            UsblPositionExtendedBuilder> {
  _$UsblPositionExtended? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _target = '';
  String get target => _$this._target;
  set target(String target) => _$this._target = target;

  double _x = 0;
  double get x => _$this._x;
  set x(double x) => _$this._x = x;

  double _y = 0;
  double get y => _$this._y;
  set y(double y) => _$this._y = y;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  double _n = 0;
  double get n => _$this._n;
  set n(double n) => _$this._n = n;

  double _e = 0;
  double get e => _$this._e;
  set e(double e) => _$this._e = e;

  double _d = 0;
  double get d => _$this._d;
  set d(double d) => _$this._d = d;

  double _phi = 0;
  double get phi => _$this._phi;
  set phi(double phi) => _$this._phi = phi;

  double _theta = 0;
  double get theta => _$this._theta;
  set theta(double theta) => _$this._theta = theta;

  double _psi = 0;
  double get psi => _$this._psi;
  set psi(double psi) => _$this._psi = psi;

  double _accuracy = 0;
  double get accuracy => _$this._accuracy;
  set accuracy(double accuracy) => _$this._accuracy = accuracy;

  UsblPositionExtendedBuilder();

  UsblPositionExtendedBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  UsblPositionExtendedBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$UsblPositionExtended.fromJson(json);
    replace(v);
  }

  @override
  UsblPositionExtendedBuilder fromJson(core.Map<String, dynamic> json) =>
      UsblPositionExtendedBuilder.fromJson(json);

  @override
  UsblPositionExtendedBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      UsblPositionExtendedBuilder()..copyFromHeader(headerFrom);

  UsblPositionExtendedBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _target = _$v!.target;
      _x = _$v!.x;
      _y = _$v!.y;
      _z = _$v!.z;
      _n = _$v!.n;
      _e = _$v!.e;
      _d = _$v!.d;
      _phi = _$v!.phi;
      _theta = _$v!.theta;
      _psi = _$v!.psi;
      _accuracy = _$v!.accuracy;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(UsblPositionExtended other) {
    _$v = other as _$UsblPositionExtended;
  }

  @override
  void update(void Function(UsblPositionExtendedBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  UsblPositionExtended build() {
    final result = _$v ??
        _$UsblPositionExtended._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            target: target,
            x: x,
            y: y,
            z: z,
            n: n,
            e: e,
            d: d,
            phi: phi,
            theta: theta,
            psi: psi,
            accuracy: accuracy);
    replace(result);
    return result;
  }
}

/// USBL Fix Extended immutable class
///
class _$UsblFixExtended extends UsblFixExtended {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String target;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final ZUnitsEnum zUnits;
  @override
  final double z;
  @override
  final double accuracy;

  factory _$UsblFixExtended(
          [void Function(UsblFixExtendedBuilder b)? updates]) =>
      (UsblFixExtendedBuilder()..update(updates)).build() as _$UsblFixExtended;

  factory _$UsblFixExtended.fromJson(core.Map<String, dynamic> json) {
    var val = UsblFixExtendedBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.target = json.containsKey('target') && json['target'] != null
        ? json['target'] as String
        : '';
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.zUnits = json.containsKey('z_units') && json['z_units'] != null
        ? ZUnitsEnum(json['z_units'] as int)
        : ZUnitsEnum(0);
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.accuracy =
        json.containsKey('accuracy') ? json['accuracy'] as double : 0;

    return val.build() as _$UsblFixExtended;
  }

  _$UsblFixExtended._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.target,
      required this.lat,
      required this.lon,
      required this.zUnits,
      required this.z,
      required this.accuracy})
      : super._();

  @override
  UsblFixExtended rebuild(void Function(UsblFixExtendedBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  UsblFixExtendedBuilder toBuilder() => UsblFixExtendedBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is UsblFixExtended &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        target == other.target &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        zUnits == other.zUnits &&
        (z == other.z || z - other.z <= 1E-7) &&
        (accuracy == other.accuracy || accuracy - other.accuracy <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                0,
                                                timestamp?.hashCode ??
                                                    null.hashCode),
                                            src.hashCode),
                                        srcEnt.hashCode),
                                    dst.hashCode),
                                dstEnt.hashCode),
                            target.hashCode),
                        lat.hashCode),
                    lon.hashCode),
                zUnits.hashCode),
            z.hashCode),
        accuracy.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('UsblFixExtended')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('target', target)
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('zUnits', '$zUnits (Enumerated) [${zUnits.toPrettyString()}]')
          ..add('z', '$z (m)')
          ..add('accuracy', '$accuracy (m)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'UsblFixExtended',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'target': target,
        'lat': lat,
        'lon': lon,
        'z_units': zUnits.value,
        'z': z,
        'accuracy': accuracy,
      };
}

/// USBL Fix Extended builder class
///
class UsblFixExtendedBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<UsblFixExtended, UsblFixExtendedBuilder> {
  _$UsblFixExtended? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _target = '';
  String get target => _$this._target;
  set target(String target) => _$this._target = target;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  ZUnitsEnum _zUnits = ZUnitsEnum(0);
  ZUnitsEnum get zUnits => _$this._zUnits;
  set zUnits(ZUnitsEnum zUnits) => _$this._zUnits = zUnits;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  double _accuracy = 0;
  double get accuracy => _$this._accuracy;
  set accuracy(double accuracy) => _$this._accuracy = accuracy;

  UsblFixExtendedBuilder();

  UsblFixExtendedBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  UsblFixExtendedBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$UsblFixExtended.fromJson(json);
    replace(v);
  }

  @override
  UsblFixExtendedBuilder fromJson(core.Map<String, dynamic> json) =>
      UsblFixExtendedBuilder.fromJson(json);

  @override
  UsblFixExtendedBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      UsblFixExtendedBuilder()..copyFromHeader(headerFrom);

  UsblFixExtendedBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _target = _$v!.target;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _zUnits = _$v!.zUnits;
      _z = _$v!.z;
      _accuracy = _$v!.accuracy;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(UsblFixExtended other) {
    _$v = other as _$UsblFixExtended;
  }

  @override
  void update(void Function(UsblFixExtendedBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  UsblFixExtended build() {
    final result = _$v ??
        _$UsblFixExtended._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            target: target,
            lat: lat,
            lon: lon,
            zUnits: zUnits,
            z: z,
            accuracy: accuracy);
    replace(result);
    return result;
  }
}

/// USBL Modem Configuration immutable class
///
class _$UsblModem extends UsblModem {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String name;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double z;
  @override
  final ZUnitsEnum zUnits;

  factory _$UsblModem([void Function(UsblModemBuilder b)? updates]) =>
      (UsblModemBuilder()..update(updates)).build() as _$UsblModem;

  factory _$UsblModem.fromJson(core.Map<String, dynamic> json) {
    var val = UsblModemBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.name = json.containsKey('name') && json['name'] != null
        ? json['name'] as String
        : '';
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.z = json.containsKey('z') ? json['z'] as double : 0;
    val.zUnits = json.containsKey('z_units') && json['z_units'] != null
        ? ZUnitsEnum(json['z_units'] as int)
        : ZUnitsEnum(0);

    return val.build() as _$UsblModem;
  }

  _$UsblModem._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.name,
      required this.lat,
      required this.lon,
      required this.z,
      required this.zUnits})
      : super._();

  @override
  UsblModem rebuild(void Function(UsblModemBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  UsblModemBuilder toBuilder() => UsblModemBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is UsblModem &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        name == other.name &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (z == other.z || z - other.z <= 1E-7) &&
        zUnits == other.zUnits;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            0,
                                            timestamp?.hashCode ??
                                                null.hashCode),
                                        src.hashCode),
                                    srcEnt.hashCode),
                                dst.hashCode),
                            dstEnt.hashCode),
                        name.hashCode),
                    lat.hashCode),
                lon.hashCode),
            z.hashCode),
        zUnits.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('UsblModem')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('name', name)
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('z', '$z (m)')
          ..add('zUnits', '$zUnits (Enumerated) [${zUnits.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'UsblModem',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'name': name,
        'lat': lat,
        'lon': lon,
        'z': z,
        'z_units': zUnits.value,
      };
}

/// USBL Modem Configuration builder class
///
class UsblModemBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<UsblModem, UsblModemBuilder> {
  _$UsblModem? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _name = '';
  String get name => _$this._name;
  set name(String name) => _$this._name = name;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _z = 0;
  double get z => _$this._z;
  set z(double z) => _$this._z = z;

  ZUnitsEnum _zUnits = ZUnitsEnum(0);
  ZUnitsEnum get zUnits => _$this._zUnits;
  set zUnits(ZUnitsEnum zUnits) => _$this._zUnits = zUnits;

  UsblModemBuilder();

  UsblModemBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  UsblModemBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$UsblModem.fromJson(json);
    replace(v);
  }

  @override
  UsblModemBuilder fromJson(core.Map<String, dynamic> json) =>
      UsblModemBuilder.fromJson(json);

  @override
  UsblModemBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      UsblModemBuilder()..copyFromHeader(headerFrom);

  UsblModemBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _name = _$v!.name;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _z = _$v!.z;
      _zUnits = _$v!.zUnits;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(UsblModem other) {
    _$v = other as _$UsblModem;
  }

  @override
  void update(void Function(UsblModemBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  UsblModem build() {
    final result = _$v ??
        _$UsblModem._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            name: name,
            lat: lat,
            lon: lon,
            z: z,
            zUnits: zUnits);
    replace(result);
    return result;
  }
}

/// USBL Configuration immutable class
///
class _$UsblConfig extends UsblConfig {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final UsblConfigEnumOp op;
  @override
  final List<UsblModem> modems;

  factory _$UsblConfig([void Function(UsblConfigBuilder b)? updates]) =>
      (UsblConfigBuilder()..update(updates)).build() as _$UsblConfig;

  factory _$UsblConfig.fromJson(core.Map<String, dynamic> json) {
    var val = UsblConfigBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.op = json.containsKey('op') && json['op'] != null
        ? UsblConfigEnumOp(json['op'] as int)
        : UsblConfigEnumOp(0);
    var modems = <UsblModem>[];
    if (json.containsKey('modems') && json['modems'] != null) {
      var listJson = json['modems'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as UsblModem?;
          if (m != null) modems.add(m);
        }
      }
    }
    val.modems = modems;

    return val.build() as _$UsblConfig;
  }

  _$UsblConfig._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.op,
      required this.modems})
      : super._();

  @override
  UsblConfig rebuild(void Function(UsblConfigBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  UsblConfigBuilder toBuilder() => UsblConfigBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is UsblConfig &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        op == other.op &&
        DeepCollectionEquality().equals(modems, other.modems);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            op.hashCode),
        modems.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('UsblConfig')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]')
          ..add('modems', '$modems'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'UsblConfig',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'op': op.value,
        'modems': [
          ...modems.map((m) => m.toJson(false)),
        ],
      };
}

/// USBL Configuration builder class
///
class UsblConfigBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<UsblConfig, UsblConfigBuilder> {
  _$UsblConfig? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  UsblConfigEnumOp _op = UsblConfigEnumOp(0);
  UsblConfigEnumOp get op => _$this._op;
  set op(UsblConfigEnumOp op) => _$this._op = op;

  List<UsblModem> _modems = <UsblModem>[];
  List<UsblModem> get modems => _$this._modems;
  set modems(List<UsblModem> modems) => _$this._modems = modems;

  UsblConfigBuilder();

  UsblConfigBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  UsblConfigBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$UsblConfig.fromJson(json);
    replace(v);
  }

  @override
  UsblConfigBuilder fromJson(core.Map<String, dynamic> json) =>
      UsblConfigBuilder.fromJson(json);

  @override
  UsblConfigBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      UsblConfigBuilder()..copyFromHeader(headerFrom);

  UsblConfigBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _op = _$v!.op;
      _modems = _$v!.modems;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(UsblConfig other) {
    _$v = other as _$UsblConfig;
  }

  @override
  void update(void Function(UsblConfigBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  UsblConfig build() {
    final result = _$v ??
        _$UsblConfig._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            op: op,
            modems: modems);
    replace(result);
    return result;
  }
}

/// Dissolved Organic Matter immutable class
///
class _$DissolvedOrganicMatter extends DissolvedOrganicMatter {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;
  @override
  final DissolvedOrganicMatterEnumType type;

  factory _$DissolvedOrganicMatter(
          [void Function(DissolvedOrganicMatterBuilder b)? updates]) =>
      (DissolvedOrganicMatterBuilder()..update(updates)).build()
          as _$DissolvedOrganicMatter;

  factory _$DissolvedOrganicMatter.fromJson(core.Map<String, dynamic> json) {
    var val = DissolvedOrganicMatterBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;
    val.type = json.containsKey('type') && json['type'] != null
        ? DissolvedOrganicMatterEnumType(json['type'] as int)
        : DissolvedOrganicMatterEnumType(0);

    return val.build() as _$DissolvedOrganicMatter;
  }

  _$DissolvedOrganicMatter._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value,
      required this.type})
      : super._();

  @override
  DissolvedOrganicMatter rebuild(
          void Function(DissolvedOrganicMatterBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DissolvedOrganicMatterBuilder toBuilder() =>
      DissolvedOrganicMatterBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is DissolvedOrganicMatter &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7) &&
        type == other.type;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            value.hashCode),
        type.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('DissolvedOrganicMatter')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (PPB)')
          ..add('type', '$type (Enumerated) [${type.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'DissolvedOrganicMatter',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
        'type': type.value,
      };
}

/// Dissolved Organic Matter builder class
///
class DissolvedOrganicMatterBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<DissolvedOrganicMatter,
            DissolvedOrganicMatterBuilder> {
  _$DissolvedOrganicMatter? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  DissolvedOrganicMatterEnumType _type = DissolvedOrganicMatterEnumType(0);
  DissolvedOrganicMatterEnumType get type => _$this._type;
  set type(DissolvedOrganicMatterEnumType type) => _$this._type = type;

  DissolvedOrganicMatterBuilder();

  DissolvedOrganicMatterBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DissolvedOrganicMatterBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$DissolvedOrganicMatter.fromJson(json);
    replace(v);
  }

  @override
  DissolvedOrganicMatterBuilder fromJson(core.Map<String, dynamic> json) =>
      DissolvedOrganicMatterBuilder.fromJson(json);

  @override
  DissolvedOrganicMatterBuilder newInstance(
          [ImcBuilderHeaderPart? headerFrom]) =>
      DissolvedOrganicMatterBuilder()..copyFromHeader(headerFrom);

  DissolvedOrganicMatterBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _type = _$v!.type;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(DissolvedOrganicMatter other) {
    _$v = other as _$DissolvedOrganicMatter;
  }

  @override
  void update(void Function(DissolvedOrganicMatterBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  DissolvedOrganicMatter build() {
    final result = _$v ??
        _$DissolvedOrganicMatter._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value,
            type: type);
    replace(result);
    return result;
  }
}

/// Optical Backscattering Coefficient immutable class
///
class _$OpticalBackscatter extends OpticalBackscatter {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$OpticalBackscatter(
          [void Function(OpticalBackscatterBuilder b)? updates]) =>
      (OpticalBackscatterBuilder()..update(updates)).build()
          as _$OpticalBackscatter;

  factory _$OpticalBackscatter.fromJson(core.Map<String, dynamic> json) {
    var val = OpticalBackscatterBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$OpticalBackscatter;
  }

  _$OpticalBackscatter._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  OpticalBackscatter rebuild(
          void Function(OpticalBackscatterBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  OpticalBackscatterBuilder toBuilder() =>
      OpticalBackscatterBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is OpticalBackscatter &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('OpticalBackscatter')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (1/m)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'OpticalBackscatter',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Optical Backscattering Coefficient builder class
///
class OpticalBackscatterBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<OpticalBackscatter, OpticalBackscatterBuilder> {
  _$OpticalBackscatter? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  OpticalBackscatterBuilder();

  OpticalBackscatterBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  OpticalBackscatterBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$OpticalBackscatter.fromJson(json);
    replace(v);
  }

  @override
  OpticalBackscatterBuilder fromJson(core.Map<String, dynamic> json) =>
      OpticalBackscatterBuilder.fromJson(json);

  @override
  OpticalBackscatterBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      OpticalBackscatterBuilder()..copyFromHeader(headerFrom);

  OpticalBackscatterBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(OpticalBackscatter other) {
    _$v = other as _$OpticalBackscatter;
  }

  @override
  void update(void Function(OpticalBackscatterBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  OpticalBackscatter build() {
    final result = _$v ??
        _$OpticalBackscatter._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Tachograph immutable class
///
class _$Tachograph extends Tachograph {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double timestampLastService;
  @override
  final double timeNextService;
  @override
  final double timeMotorNextService;
  @override
  final double timeIdleGround;
  @override
  final double timeIdleAir;
  @override
  final double timeIdleWater;
  @override
  final double timeIdleUnderwater;
  @override
  final double timeIdleUnknown;
  @override
  final double timeMotorGround;
  @override
  final double timeMotorAir;
  @override
  final double timeMotorWater;
  @override
  final double timeMotorUnderwater;
  @override
  final double timeMotorUnknown;
  @override
  final int rpmMin;
  @override
  final int rpmMax;
  @override
  final double depthMax;

  factory _$Tachograph([void Function(TachographBuilder b)? updates]) =>
      (TachographBuilder()..update(updates)).build() as _$Tachograph;

  factory _$Tachograph.fromJson(core.Map<String, dynamic> json) {
    var val = TachographBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.timestampLastService = json.containsKey('timestamp_last_service')
        ? json['timestamp_last_service'] as double
        : 0;
    val.timeNextService = json.containsKey('time_next_service')
        ? json['time_next_service'] as double
        : 0;
    val.timeMotorNextService = json.containsKey('time_motor_next_service')
        ? json['time_motor_next_service'] as double
        : 0;
    val.timeIdleGround = json.containsKey('time_idle_ground')
        ? json['time_idle_ground'] as double
        : 0;
    val.timeIdleAir =
        json.containsKey('time_idle_air') ? json['time_idle_air'] as double : 0;
    val.timeIdleWater = json.containsKey('time_idle_water')
        ? json['time_idle_water'] as double
        : 0;
    val.timeIdleUnderwater = json.containsKey('time_idle_underwater')
        ? json['time_idle_underwater'] as double
        : 0;
    val.timeIdleUnknown = json.containsKey('time_idle_unknown')
        ? json['time_idle_unknown'] as double
        : 0;
    val.timeMotorGround = json.containsKey('time_motor_ground')
        ? json['time_motor_ground'] as double
        : 0;
    val.timeMotorAir = json.containsKey('time_motor_air')
        ? json['time_motor_air'] as double
        : 0;
    val.timeMotorWater = json.containsKey('time_motor_water')
        ? json['time_motor_water'] as double
        : 0;
    val.timeMotorUnderwater = json.containsKey('time_motor_underwater')
        ? json['time_motor_underwater'] as double
        : 0;
    val.timeMotorUnknown = json.containsKey('time_motor_unknown')
        ? json['time_motor_unknown'] as double
        : 0;
    val.rpmMin = json.containsKey('rpm_min') ? json['rpm_min'] as int : 0;
    val.rpmMax = json.containsKey('rpm_max') ? json['rpm_max'] as int : 0;
    val.depthMax =
        json.containsKey('depth_max') ? json['depth_max'] as double : 0;

    return val.build() as _$Tachograph;
  }

  _$Tachograph._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.timestampLastService,
      required this.timeNextService,
      required this.timeMotorNextService,
      required this.timeIdleGround,
      required this.timeIdleAir,
      required this.timeIdleWater,
      required this.timeIdleUnderwater,
      required this.timeIdleUnknown,
      required this.timeMotorGround,
      required this.timeMotorAir,
      required this.timeMotorWater,
      required this.timeMotorUnderwater,
      required this.timeMotorUnknown,
      required this.rpmMin,
      required this.rpmMax,
      required this.depthMax})
      : super._();

  @override
  Tachograph rebuild(void Function(TachographBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  TachographBuilder toBuilder() => TachographBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Tachograph &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (timestampLastService == other.timestampLastService ||
            timestampLastService - other.timestampLastService <= 1E-7) &&
        (timeNextService == other.timeNextService ||
            timeNextService - other.timeNextService <= 1E-7) &&
        (timeMotorNextService == other.timeMotorNextService ||
            timeMotorNextService - other.timeMotorNextService <= 1E-7) &&
        (timeIdleGround == other.timeIdleGround ||
            timeIdleGround - other.timeIdleGround <= 1E-7) &&
        (timeIdleAir == other.timeIdleAir ||
            timeIdleAir - other.timeIdleAir <= 1E-7) &&
        (timeIdleWater == other.timeIdleWater ||
            timeIdleWater - other.timeIdleWater <= 1E-7) &&
        (timeIdleUnderwater == other.timeIdleUnderwater ||
            timeIdleUnderwater - other.timeIdleUnderwater <= 1E-7) &&
        (timeIdleUnknown == other.timeIdleUnknown ||
            timeIdleUnknown - other.timeIdleUnknown <= 1E-7) &&
        (timeMotorGround == other.timeMotorGround ||
            timeMotorGround - other.timeMotorGround <= 1E-7) &&
        (timeMotorAir == other.timeMotorAir ||
            timeMotorAir - other.timeMotorAir <= 1E-7) &&
        (timeMotorWater == other.timeMotorWater ||
            timeMotorWater - other.timeMotorWater <= 1E-7) &&
        (timeMotorUnderwater == other.timeMotorUnderwater ||
            timeMotorUnderwater - other.timeMotorUnderwater <= 1E-7) &&
        (timeMotorUnknown == other.timeMotorUnknown ||
            timeMotorUnknown - other.timeMotorUnknown <= 1E-7) &&
        rpmMin == other.rpmMin &&
        rpmMax == other.rpmMax &&
        (depthMax == other.depthMax || depthMax - other.depthMax <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc($jc(0, timestamp?.hashCode ?? null.hashCode), src.hashCode),
                                                                                srcEnt.hashCode),
                                                                            dst.hashCode),
                                                                        dstEnt.hashCode),
                                                                    timestampLastService.hashCode),
                                                                timeNextService.hashCode),
                                                            timeMotorNextService.hashCode),
                                                        timeIdleGround.hashCode),
                                                    timeIdleAir.hashCode),
                                                timeIdleWater.hashCode),
                                            timeIdleUnderwater.hashCode),
                                        timeIdleUnknown.hashCode),
                                    timeMotorGround.hashCode),
                                timeMotorAir.hashCode),
                            timeMotorWater.hashCode),
                        timeMotorUnderwater.hashCode),
                    timeMotorUnknown.hashCode),
                rpmMin.hashCode),
            rpmMax.hashCode),
        depthMax.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('Tachograph')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('timestampLastService', '$timestampLastService (s)')
          ..add('timeNextService', '$timeNextService (s)')
          ..add('timeMotorNextService', '$timeMotorNextService (s)')
          ..add('timeIdleGround', '$timeIdleGround (s)')
          ..add('timeIdleAir', '$timeIdleAir (s)')
          ..add('timeIdleWater', '$timeIdleWater (s)')
          ..add('timeIdleUnderwater', '$timeIdleUnderwater (s)')
          ..add('timeIdleUnknown', '$timeIdleUnknown (s)')
          ..add('timeMotorGround', '$timeMotorGround (s)')
          ..add('timeMotorAir', '$timeMotorAir (s)')
          ..add('timeMotorWater', '$timeMotorWater (s)')
          ..add('timeMotorUnderwater', '$timeMotorUnderwater (s)')
          ..add('timeMotorUnknown', '$timeMotorUnknown (s)')
          ..add('rpmMin', '$rpmMin (rpm)')
          ..add('rpmMax', '$rpmMax (rpm)')
          ..add('depthMax', '$depthMax (m)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'Tachograph',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'timestamp_last_service': timestampLastService,
        'time_next_service': timeNextService,
        'time_motor_next_service': timeMotorNextService,
        'time_idle_ground': timeIdleGround,
        'time_idle_air': timeIdleAir,
        'time_idle_water': timeIdleWater,
        'time_idle_underwater': timeIdleUnderwater,
        'time_idle_unknown': timeIdleUnknown,
        'time_motor_ground': timeMotorGround,
        'time_motor_air': timeMotorAir,
        'time_motor_water': timeMotorWater,
        'time_motor_underwater': timeMotorUnderwater,
        'time_motor_unknown': timeMotorUnknown,
        'rpm_min': rpmMin,
        'rpm_max': rpmMax,
        'depth_max': depthMax,
      };
}

/// Tachograph builder class
///
class TachographBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<Tachograph, TachographBuilder> {
  _$Tachograph? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _timestampLastService = 0;
  double get timestampLastService => _$this._timestampLastService;
  set timestampLastService(double timestampLastService) =>
      _$this._timestampLastService = timestampLastService;

  double _timeNextService = 0;
  double get timeNextService => _$this._timeNextService;
  set timeNextService(double timeNextService) =>
      _$this._timeNextService = timeNextService;

  double _timeMotorNextService = 0;
  double get timeMotorNextService => _$this._timeMotorNextService;
  set timeMotorNextService(double timeMotorNextService) =>
      _$this._timeMotorNextService = timeMotorNextService;

  double _timeIdleGround = 0;
  double get timeIdleGround => _$this._timeIdleGround;
  set timeIdleGround(double timeIdleGround) =>
      _$this._timeIdleGround = timeIdleGround;

  double _timeIdleAir = 0;
  double get timeIdleAir => _$this._timeIdleAir;
  set timeIdleAir(double timeIdleAir) => _$this._timeIdleAir = timeIdleAir;

  double _timeIdleWater = 0;
  double get timeIdleWater => _$this._timeIdleWater;
  set timeIdleWater(double timeIdleWater) =>
      _$this._timeIdleWater = timeIdleWater;

  double _timeIdleUnderwater = 0;
  double get timeIdleUnderwater => _$this._timeIdleUnderwater;
  set timeIdleUnderwater(double timeIdleUnderwater) =>
      _$this._timeIdleUnderwater = timeIdleUnderwater;

  double _timeIdleUnknown = 0;
  double get timeIdleUnknown => _$this._timeIdleUnknown;
  set timeIdleUnknown(double timeIdleUnknown) =>
      _$this._timeIdleUnknown = timeIdleUnknown;

  double _timeMotorGround = 0;
  double get timeMotorGround => _$this._timeMotorGround;
  set timeMotorGround(double timeMotorGround) =>
      _$this._timeMotorGround = timeMotorGround;

  double _timeMotorAir = 0;
  double get timeMotorAir => _$this._timeMotorAir;
  set timeMotorAir(double timeMotorAir) => _$this._timeMotorAir = timeMotorAir;

  double _timeMotorWater = 0;
  double get timeMotorWater => _$this._timeMotorWater;
  set timeMotorWater(double timeMotorWater) =>
      _$this._timeMotorWater = timeMotorWater;

  double _timeMotorUnderwater = 0;
  double get timeMotorUnderwater => _$this._timeMotorUnderwater;
  set timeMotorUnderwater(double timeMotorUnderwater) =>
      _$this._timeMotorUnderwater = timeMotorUnderwater;

  double _timeMotorUnknown = 0;
  double get timeMotorUnknown => _$this._timeMotorUnknown;
  set timeMotorUnknown(double timeMotorUnknown) =>
      _$this._timeMotorUnknown = timeMotorUnknown;

  int _rpmMin = 0;
  int get rpmMin => _$this._rpmMin;
  set rpmMin(int rpmMin) => _$this._rpmMin = rpmMin;

  int _rpmMax = 0;
  int get rpmMax => _$this._rpmMax;
  set rpmMax(int rpmMax) => _$this._rpmMax = rpmMax;

  double _depthMax = 0;
  double get depthMax => _$this._depthMax;
  set depthMax(double depthMax) => _$this._depthMax = depthMax;

  TachographBuilder();

  TachographBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  TachographBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$Tachograph.fromJson(json);
    replace(v);
  }

  @override
  TachographBuilder fromJson(core.Map<String, dynamic> json) =>
      TachographBuilder.fromJson(json);

  @override
  TachographBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      TachographBuilder()..copyFromHeader(headerFrom);

  TachographBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _timestampLastService = _$v!.timestampLastService;
      _timeNextService = _$v!.timeNextService;
      _timeMotorNextService = _$v!.timeMotorNextService;
      _timeIdleGround = _$v!.timeIdleGround;
      _timeIdleAir = _$v!.timeIdleAir;
      _timeIdleWater = _$v!.timeIdleWater;
      _timeIdleUnderwater = _$v!.timeIdleUnderwater;
      _timeIdleUnknown = _$v!.timeIdleUnknown;
      _timeMotorGround = _$v!.timeMotorGround;
      _timeMotorAir = _$v!.timeMotorAir;
      _timeMotorWater = _$v!.timeMotorWater;
      _timeMotorUnderwater = _$v!.timeMotorUnderwater;
      _timeMotorUnknown = _$v!.timeMotorUnknown;
      _rpmMin = _$v!.rpmMin;
      _rpmMax = _$v!.rpmMax;
      _depthMax = _$v!.depthMax;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Tachograph other) {
    _$v = other as _$Tachograph;
  }

  @override
  void update(void Function(TachographBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Tachograph build() {
    final result = _$v ??
        _$Tachograph._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            timestampLastService: timestampLastService,
            timeNextService: timeNextService,
            timeMotorNextService: timeMotorNextService,
            timeIdleGround: timeIdleGround,
            timeIdleAir: timeIdleAir,
            timeIdleWater: timeIdleWater,
            timeIdleUnderwater: timeIdleUnderwater,
            timeIdleUnknown: timeIdleUnknown,
            timeMotorGround: timeMotorGround,
            timeMotorAir: timeMotorAir,
            timeMotorWater: timeMotorWater,
            timeMotorUnderwater: timeMotorUnderwater,
            timeMotorUnknown: timeMotorUnknown,
            rpmMin: rpmMin,
            rpmMax: rpmMax,
            depthMax: depthMax);
    replace(result);
    return result;
  }
}

/// APM Status immutable class
///
class _$ApmStatus extends ApmStatus {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final ApmStatusEnumSeverity severity;
  @override
  final String text;

  factory _$ApmStatus([void Function(ApmStatusBuilder b)? updates]) =>
      (ApmStatusBuilder()..update(updates)).build() as _$ApmStatus;

  factory _$ApmStatus.fromJson(core.Map<String, dynamic> json) {
    var val = ApmStatusBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.severity = json.containsKey('severity') && json['severity'] != null
        ? ApmStatusEnumSeverity(json['severity'] as int)
        : ApmStatusEnumSeverity(0);
    val.text = json.containsKey('text') && json['text'] != null
        ? json['text'] as String
        : '';

    return val.build() as _$ApmStatus;
  }

  _$ApmStatus._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.severity,
      required this.text})
      : super._();

  @override
  ApmStatus rebuild(void Function(ApmStatusBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  ApmStatusBuilder toBuilder() => ApmStatusBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is ApmStatus &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        severity == other.severity &&
        text == other.text;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            severity.hashCode),
        text.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('ApmStatus')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('severity',
              '$severity (Enumerated) [${severity.toPrettyString()}]')
          ..add('text', text))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'ApmStatus',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'severity': severity.value,
        'text': text,
      };
}

/// APM Status builder class
///
class ApmStatusBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<ApmStatus, ApmStatusBuilder> {
  _$ApmStatus? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  ApmStatusEnumSeverity _severity = ApmStatusEnumSeverity(0);
  ApmStatusEnumSeverity get severity => _$this._severity;
  set severity(ApmStatusEnumSeverity severity) => _$this._severity = severity;

  String _text = '';
  String get text => _$this._text;
  set text(String text) => _$this._text = text;

  ApmStatusBuilder();

  ApmStatusBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  ApmStatusBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$ApmStatus.fromJson(json);
    replace(v);
  }

  @override
  ApmStatusBuilder fromJson(core.Map<String, dynamic> json) =>
      ApmStatusBuilder.fromJson(json);

  @override
  ApmStatusBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      ApmStatusBuilder()..copyFromHeader(headerFrom);

  ApmStatusBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _severity = _$v!.severity;
      _text = _$v!.text;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(ApmStatus other) {
    _$v = other as _$ApmStatus;
  }

  @override
  void update(void Function(ApmStatusBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  ApmStatus build() {
    final result = _$v ??
        _$ApmStatus._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            severity: severity,
            text: text);
    replace(result);
    return result;
  }
}

/// SADC Readings immutable class
///
class _$SadcReadings extends SadcReadings {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int channel;
  @override
  final int value;
  @override
  final SadcReadingsEnumGain gain;

  factory _$SadcReadings([void Function(SadcReadingsBuilder b)? updates]) =>
      (SadcReadingsBuilder()..update(updates)).build() as _$SadcReadings;

  factory _$SadcReadings.fromJson(core.Map<String, dynamic> json) {
    var val = SadcReadingsBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.channel = json.containsKey('channel') ? json['channel'] as int : 0;
    val.value = json.containsKey('value') ? json['value'] as int : 0;
    val.gain = json.containsKey('gain') && json['gain'] != null
        ? SadcReadingsEnumGain(json['gain'] as int)
        : SadcReadingsEnumGain(0);

    return val.build() as _$SadcReadings;
  }

  _$SadcReadings._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.channel,
      required this.value,
      required this.gain})
      : super._();

  @override
  SadcReadings rebuild(void Function(SadcReadingsBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  SadcReadingsBuilder toBuilder() => SadcReadingsBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is SadcReadings &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        channel == other.channel &&
        value == other.value &&
        gain == other.gain;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                channel.hashCode),
            value.hashCode),
        gain.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('SadcReadings')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('channel', '$channel')
          ..add('value', '$value')
          ..add('gain', '$gain (Enumerated) [${gain.toPrettyString()}]'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'SadcReadings',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'channel': channel,
        'value': value,
        'gain': gain.value,
      };
}

/// SADC Readings builder class
///
class SadcReadingsBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<SadcReadings, SadcReadingsBuilder> {
  _$SadcReadings? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _channel = 0;
  int get channel => _$this._channel;
  set channel(int channel) => _$this._channel = channel;

  int _value = 0;
  int get value => _$this._value;
  set value(int value) => _$this._value = value;

  SadcReadingsEnumGain _gain = SadcReadingsEnumGain(0);
  SadcReadingsEnumGain get gain => _$this._gain;
  set gain(SadcReadingsEnumGain gain) => _$this._gain = gain;

  SadcReadingsBuilder();

  SadcReadingsBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  SadcReadingsBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$SadcReadings.fromJson(json);
    replace(v);
  }

  @override
  SadcReadingsBuilder fromJson(core.Map<String, dynamic> json) =>
      SadcReadingsBuilder.fromJson(json);

  @override
  SadcReadingsBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      SadcReadingsBuilder()..copyFromHeader(headerFrom);

  SadcReadingsBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _channel = _$v!.channel;
      _value = _$v!.value;
      _gain = _$v!.gain;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(SadcReadings other) {
    _$v = other as _$SadcReadings;
  }

  @override
  void update(void Function(SadcReadingsBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  SadcReadings build() {
    final result = _$v ??
        _$SadcReadings._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            channel: channel,
            value: value,
            gain: gain);
    replace(result);
    return result;
  }
}

/// DMS Detection immutable class
///
class _$DmsDetection extends DmsDetection {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double ch01;
  @override
  final double ch02;
  @override
  final double ch03;
  @override
  final double ch04;
  @override
  final double ch05;
  @override
  final double ch06;
  @override
  final double ch07;
  @override
  final double ch08;
  @override
  final double ch09;
  @override
  final double ch10;
  @override
  final double ch11;
  @override
  final double ch12;
  @override
  final double ch13;
  @override
  final double ch14;
  @override
  final double ch15;
  @override
  final double ch16;

  factory _$DmsDetection([void Function(DmsDetectionBuilder b)? updates]) =>
      (DmsDetectionBuilder()..update(updates)).build() as _$DmsDetection;

  factory _$DmsDetection.fromJson(core.Map<String, dynamic> json) {
    var val = DmsDetectionBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.ch01 = json.containsKey('ch01') ? json['ch01'] as double : 0;
    val.ch02 = json.containsKey('ch02') ? json['ch02'] as double : 0;
    val.ch03 = json.containsKey('ch03') ? json['ch03'] as double : 0;
    val.ch04 = json.containsKey('ch04') ? json['ch04'] as double : 0;
    val.ch05 = json.containsKey('ch05') ? json['ch05'] as double : 0;
    val.ch06 = json.containsKey('ch06') ? json['ch06'] as double : 0;
    val.ch07 = json.containsKey('ch07') ? json['ch07'] as double : 0;
    val.ch08 = json.containsKey('ch08') ? json['ch08'] as double : 0;
    val.ch09 = json.containsKey('ch09') ? json['ch09'] as double : 0;
    val.ch10 = json.containsKey('ch10') ? json['ch10'] as double : 0;
    val.ch11 = json.containsKey('ch11') ? json['ch11'] as double : 0;
    val.ch12 = json.containsKey('ch12') ? json['ch12'] as double : 0;
    val.ch13 = json.containsKey('ch13') ? json['ch13'] as double : 0;
    val.ch14 = json.containsKey('ch14') ? json['ch14'] as double : 0;
    val.ch15 = json.containsKey('ch15') ? json['ch15'] as double : 0;
    val.ch16 = json.containsKey('ch16') ? json['ch16'] as double : 0;

    return val.build() as _$DmsDetection;
  }

  _$DmsDetection._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.ch01,
      required this.ch02,
      required this.ch03,
      required this.ch04,
      required this.ch05,
      required this.ch06,
      required this.ch07,
      required this.ch08,
      required this.ch09,
      required this.ch10,
      required this.ch11,
      required this.ch12,
      required this.ch13,
      required this.ch14,
      required this.ch15,
      required this.ch16})
      : super._();

  @override
  DmsDetection rebuild(void Function(DmsDetectionBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  DmsDetectionBuilder toBuilder() => DmsDetectionBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is DmsDetection &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (ch01 == other.ch01 || ch01 - other.ch01 <= 1E-7) &&
        (ch02 == other.ch02 || ch02 - other.ch02 <= 1E-7) &&
        (ch03 == other.ch03 || ch03 - other.ch03 <= 1E-7) &&
        (ch04 == other.ch04 || ch04 - other.ch04 <= 1E-7) &&
        (ch05 == other.ch05 || ch05 - other.ch05 <= 1E-7) &&
        (ch06 == other.ch06 || ch06 - other.ch06 <= 1E-7) &&
        (ch07 == other.ch07 || ch07 - other.ch07 <= 1E-7) &&
        (ch08 == other.ch08 || ch08 - other.ch08 <= 1E-7) &&
        (ch09 == other.ch09 || ch09 - other.ch09 <= 1E-7) &&
        (ch10 == other.ch10 || ch10 - other.ch10 <= 1E-7) &&
        (ch11 == other.ch11 || ch11 - other.ch11 <= 1E-7) &&
        (ch12 == other.ch12 || ch12 - other.ch12 <= 1E-7) &&
        (ch13 == other.ch13 || ch13 - other.ch13 <= 1E-7) &&
        (ch14 == other.ch14 || ch14 - other.ch14 <= 1E-7) &&
        (ch15 == other.ch15 || ch15 - other.ch15 <= 1E-7) &&
        (ch16 == other.ch16 || ch16 - other.ch16 <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc($jc(0, timestamp?.hashCode ?? null.hashCode), src.hashCode),
                                                                                srcEnt.hashCode),
                                                                            dst.hashCode),
                                                                        dstEnt.hashCode),
                                                                    ch01.hashCode),
                                                                ch02.hashCode),
                                                            ch03.hashCode),
                                                        ch04.hashCode),
                                                    ch05.hashCode),
                                                ch06.hashCode),
                                            ch07.hashCode),
                                        ch08.hashCode),
                                    ch09.hashCode),
                                ch10.hashCode),
                            ch11.hashCode),
                        ch12.hashCode),
                    ch13.hashCode),
                ch14.hashCode),
            ch15.hashCode),
        ch16.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('DmsDetection')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('ch01', '$ch01')
          ..add('ch02', '$ch02')
          ..add('ch03', '$ch03')
          ..add('ch04', '$ch04')
          ..add('ch05', '$ch05')
          ..add('ch06', '$ch06')
          ..add('ch07', '$ch07')
          ..add('ch08', '$ch08')
          ..add('ch09', '$ch09')
          ..add('ch10', '$ch10')
          ..add('ch11', '$ch11')
          ..add('ch12', '$ch12')
          ..add('ch13', '$ch13')
          ..add('ch14', '$ch14')
          ..add('ch15', '$ch15')
          ..add('ch16', '$ch16'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'DmsDetection',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'ch01': ch01,
        'ch02': ch02,
        'ch03': ch03,
        'ch04': ch04,
        'ch05': ch05,
        'ch06': ch06,
        'ch07': ch07,
        'ch08': ch08,
        'ch09': ch09,
        'ch10': ch10,
        'ch11': ch11,
        'ch12': ch12,
        'ch13': ch13,
        'ch14': ch14,
        'ch15': ch15,
        'ch16': ch16,
      };
}

/// DMS Detection builder class
///
class DmsDetectionBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<DmsDetection, DmsDetectionBuilder> {
  _$DmsDetection? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _ch01 = 0;
  double get ch01 => _$this._ch01;
  set ch01(double ch01) => _$this._ch01 = ch01;

  double _ch02 = 0;
  double get ch02 => _$this._ch02;
  set ch02(double ch02) => _$this._ch02 = ch02;

  double _ch03 = 0;
  double get ch03 => _$this._ch03;
  set ch03(double ch03) => _$this._ch03 = ch03;

  double _ch04 = 0;
  double get ch04 => _$this._ch04;
  set ch04(double ch04) => _$this._ch04 = ch04;

  double _ch05 = 0;
  double get ch05 => _$this._ch05;
  set ch05(double ch05) => _$this._ch05 = ch05;

  double _ch06 = 0;
  double get ch06 => _$this._ch06;
  set ch06(double ch06) => _$this._ch06 = ch06;

  double _ch07 = 0;
  double get ch07 => _$this._ch07;
  set ch07(double ch07) => _$this._ch07 = ch07;

  double _ch08 = 0;
  double get ch08 => _$this._ch08;
  set ch08(double ch08) => _$this._ch08 = ch08;

  double _ch09 = 0;
  double get ch09 => _$this._ch09;
  set ch09(double ch09) => _$this._ch09 = ch09;

  double _ch10 = 0;
  double get ch10 => _$this._ch10;
  set ch10(double ch10) => _$this._ch10 = ch10;

  double _ch11 = 0;
  double get ch11 => _$this._ch11;
  set ch11(double ch11) => _$this._ch11 = ch11;

  double _ch12 = 0;
  double get ch12 => _$this._ch12;
  set ch12(double ch12) => _$this._ch12 = ch12;

  double _ch13 = 0;
  double get ch13 => _$this._ch13;
  set ch13(double ch13) => _$this._ch13 = ch13;

  double _ch14 = 0;
  double get ch14 => _$this._ch14;
  set ch14(double ch14) => _$this._ch14 = ch14;

  double _ch15 = 0;
  double get ch15 => _$this._ch15;
  set ch15(double ch15) => _$this._ch15 = ch15;

  double _ch16 = 0;
  double get ch16 => _$this._ch16;
  set ch16(double ch16) => _$this._ch16 = ch16;

  DmsDetectionBuilder();

  DmsDetectionBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  DmsDetectionBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$DmsDetection.fromJson(json);
    replace(v);
  }

  @override
  DmsDetectionBuilder fromJson(core.Map<String, dynamic> json) =>
      DmsDetectionBuilder.fromJson(json);

  @override
  DmsDetectionBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      DmsDetectionBuilder()..copyFromHeader(headerFrom);

  DmsDetectionBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _ch01 = _$v!.ch01;
      _ch02 = _$v!.ch02;
      _ch03 = _$v!.ch03;
      _ch04 = _$v!.ch04;
      _ch05 = _$v!.ch05;
      _ch06 = _$v!.ch06;
      _ch07 = _$v!.ch07;
      _ch08 = _$v!.ch08;
      _ch09 = _$v!.ch09;
      _ch10 = _$v!.ch10;
      _ch11 = _$v!.ch11;
      _ch12 = _$v!.ch12;
      _ch13 = _$v!.ch13;
      _ch14 = _$v!.ch14;
      _ch15 = _$v!.ch15;
      _ch16 = _$v!.ch16;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(DmsDetection other) {
    _$v = other as _$DmsDetection;
  }

  @override
  void update(void Function(DmsDetectionBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  DmsDetection build() {
    final result = _$v ??
        _$DmsDetection._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            ch01: ch01,
            ch02: ch02,
            ch03: ch03,
            ch04: ch04,
            ch05: ch05,
            ch06: ch06,
            ch07: ch07,
            ch08: ch08,
            ch09: ch09,
            ch10: ch10,
            ch11: ch11,
            ch12: ch12,
            ch13: ch13,
            ch14: ch14,
            ch15: ch15,
            ch16: ch16);
    replace(result);
    return result;
  }
}

/// Home Position immutable class
///
class _$HomePosition extends HomePosition {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final HomePositionEnumOp op;
  @override
  final double lat;
  @override
  final double lon;
  @override
  final double height;
  @override
  final double depth;
  @override
  final double alt;

  factory _$HomePosition([void Function(HomePositionBuilder b)? updates]) =>
      (HomePositionBuilder()..update(updates)).build() as _$HomePosition;

  factory _$HomePosition.fromJson(core.Map<String, dynamic> json) {
    var val = HomePositionBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.op = json.containsKey('op') && json['op'] != null
        ? HomePositionEnumOp(json['op'] as int)
        : HomePositionEnumOp(0);
    val.lat = json.containsKey('lat') ? json['lat'] as double : 0;
    val.lon = json.containsKey('lon') ? json['lon'] as double : 0;
    val.height = json.containsKey('height') ? json['height'] as double : 0;
    val.depth = json.containsKey('depth') ? json['depth'] as double : 0;
    val.alt = json.containsKey('alt') ? json['alt'] as double : 0;

    return val.build() as _$HomePosition;
  }

  _$HomePosition._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.op,
      required this.lat,
      required this.lon,
      required this.height,
      required this.depth,
      required this.alt})
      : super._();

  @override
  HomePosition rebuild(void Function(HomePositionBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  HomePositionBuilder toBuilder() => HomePositionBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is HomePosition &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        op == other.op &&
        (lat == other.lat || lat - other.lat <= 1E-7) &&
        (lon == other.lon || lon - other.lon <= 1E-7) &&
        (height == other.height || height - other.height <= 1E-7) &&
        (depth == other.depth || depth - other.depth <= 1E-7) &&
        (alt == other.alt || alt - other.alt <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                0,
                                                timestamp?.hashCode ??
                                                    null.hashCode),
                                            src.hashCode),
                                        srcEnt.hashCode),
                                    dst.hashCode),
                                dstEnt.hashCode),
                            op.hashCode),
                        lat.hashCode),
                    lon.hashCode),
                height.hashCode),
            depth.hashCode),
        alt.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('HomePosition')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('op', '$op (Enumerated) [${op.toPrettyString()}]')
          ..add('lat', '$lat (rad) [${lat * 180.0 / math.pi} (deg)]')
          ..add('lon', '$lon (rad) [${lon * 180.0 / math.pi} (deg)]')
          ..add('height', '$height (m)')
          ..add('depth', '$depth (m)')
          ..add('alt', '$alt (m)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'HomePosition',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'op': op.value,
        'lat': lat,
        'lon': lon,
        'height': height,
        'depth': depth,
        'alt': alt,
      };
}

/// Home Position builder class
///
class HomePositionBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<HomePosition, HomePositionBuilder> {
  _$HomePosition? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  HomePositionEnumOp _op = HomePositionEnumOp(0);
  HomePositionEnumOp get op => _$this._op;
  set op(HomePositionEnumOp op) => _$this._op = op;

  double _lat = 0;
  double get lat => _$this._lat;
  set lat(double lat) => _$this._lat = lat;

  double _lon = 0;
  double get lon => _$this._lon;
  set lon(double lon) => _$this._lon = lon;

  double _height = 0;
  double get height => _$this._height;
  set height(double height) => _$this._height = height;

  double _depth = 0;
  double get depth => _$this._depth;
  set depth(double depth) => _$this._depth = depth;

  double _alt = 0;
  double get alt => _$this._alt;
  set alt(double alt) => _$this._alt = alt;

  HomePositionBuilder();

  HomePositionBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  HomePositionBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$HomePosition.fromJson(json);
    replace(v);
  }

  @override
  HomePositionBuilder fromJson(core.Map<String, dynamic> json) =>
      HomePositionBuilder.fromJson(json);

  @override
  HomePositionBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      HomePositionBuilder()..copyFromHeader(headerFrom);

  HomePositionBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _op = _$v!.op;
      _lat = _$v!.lat;
      _lon = _$v!.lon;
      _height = _$v!.height;
      _depth = _$v!.depth;
      _alt = _$v!.alt;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(HomePosition other) {
    _$v = other as _$HomePosition;
  }

  @override
  void update(void Function(HomePositionBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  HomePosition build() {
    final result = _$v ??
        _$HomePosition._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            op: op,
            lat: lat,
            lon: lon,
            height: height,
            depth: depth,
            alt: alt);
    replace(result);
    return result;
  }
}

/// Current Profile immutable class
///
class _$CurrentProfile extends CurrentProfile {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final int nbeams;
  @override
  final int ncells;
  @override
  final CurrentProfileBitfieldCoordSys coordSys;
  @override
  final List<CurrentProfileCell> profile;

  factory _$CurrentProfile([void Function(CurrentProfileBuilder b)? updates]) =>
      (CurrentProfileBuilder()..update(updates)).build() as _$CurrentProfile;

  factory _$CurrentProfile.fromJson(core.Map<String, dynamic> json) {
    var val = CurrentProfileBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.nbeams = json.containsKey('nbeams') ? json['nbeams'] as int : 0;
    val.ncells = json.containsKey('ncells') ? json['ncells'] as int : 0;
    val.coordSys = json.containsKey('coord_sys') && json['coord_sys'] != null
        ? CurrentProfileBitfieldCoordSys(json['coord_sys'] as int)
        : CurrentProfileBitfieldCoordSys(0);
    var profile = <CurrentProfileCell>[];
    if (json.containsKey('profile') && json['profile'] != null) {
      var listJson = json['profile'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as CurrentProfileCell?;
          if (m != null) profile.add(m);
        }
      }
    }
    val.profile = profile;

    return val.build() as _$CurrentProfile;
  }

  _$CurrentProfile._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.nbeams,
      required this.ncells,
      required this.coordSys,
      required this.profile})
      : super._();

  @override
  CurrentProfile rebuild(void Function(CurrentProfileBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  CurrentProfileBuilder toBuilder() => CurrentProfileBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is CurrentProfile &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        nbeams == other.nbeams &&
        ncells == other.ncells &&
        coordSys == other.coordSys &&
        DeepCollectionEquality().equals(profile, other.profile);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(0,
                                        timestamp?.hashCode ?? null.hashCode),
                                    src.hashCode),
                                srcEnt.hashCode),
                            dst.hashCode),
                        dstEnt.hashCode),
                    nbeams.hashCode),
                ncells.hashCode),
            coordSys.hashCode),
        profile.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('CurrentProfile')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('nbeams', '$nbeams')
          ..add('ncells', '$ncells')
          ..add(
              'coordSys', '$coordSys (Bitfield) [${coordSys.toPrettyString()}]')
          ..add('profile', '$profile'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'CurrentProfile',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'nbeams': nbeams,
        'ncells': ncells,
        'coord_sys': coordSys.value,
        'profile': [
          ...profile.map((m) => m.toJson(false)),
        ],
      };
}

/// Current Profile builder class
///
class CurrentProfileBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<CurrentProfile, CurrentProfileBuilder> {
  _$CurrentProfile? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  int _nbeams = 0;
  int get nbeams => _$this._nbeams;
  set nbeams(int nbeams) => _$this._nbeams = nbeams;

  int _ncells = 0;
  int get ncells => _$this._ncells;
  set ncells(int ncells) => _$this._ncells = ncells;

  CurrentProfileBitfieldCoordSys _coordSys = CurrentProfileBitfieldCoordSys(0);
  CurrentProfileBitfieldCoordSys get coordSys => _$this._coordSys;
  set coordSys(CurrentProfileBitfieldCoordSys coordSys) =>
      _$this._coordSys = coordSys;

  List<CurrentProfileCell> _profile = <CurrentProfileCell>[];
  List<CurrentProfileCell> get profile => _$this._profile;
  set profile(List<CurrentProfileCell> profile) => _$this._profile = profile;

  CurrentProfileBuilder();

  CurrentProfileBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  CurrentProfileBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$CurrentProfile.fromJson(json);
    replace(v);
  }

  @override
  CurrentProfileBuilder fromJson(core.Map<String, dynamic> json) =>
      CurrentProfileBuilder.fromJson(json);

  @override
  CurrentProfileBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      CurrentProfileBuilder()..copyFromHeader(headerFrom);

  CurrentProfileBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _nbeams = _$v!.nbeams;
      _ncells = _$v!.ncells;
      _coordSys = _$v!.coordSys;
      _profile = _$v!.profile;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(CurrentProfile other) {
    _$v = other as _$CurrentProfile;
  }

  @override
  void update(void Function(CurrentProfileBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  CurrentProfile build() {
    final result = _$v ??
        _$CurrentProfile._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            nbeams: nbeams,
            ncells: ncells,
            coordSys: coordSys,
            profile: profile);
    replace(result);
    return result;
  }
}

/// Current Profile Cell immutable class
///
class _$CurrentProfileCell extends CurrentProfileCell {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double cellPosition;
  @override
  final List<ADCPBeam> beams;

  factory _$CurrentProfileCell(
          [void Function(CurrentProfileCellBuilder b)? updates]) =>
      (CurrentProfileCellBuilder()..update(updates)).build()
          as _$CurrentProfileCell;

  factory _$CurrentProfileCell.fromJson(core.Map<String, dynamic> json) {
    var val = CurrentProfileCellBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.cellPosition =
        json.containsKey('cell_position') ? json['cell_position'] as double : 0;
    var beams = <ADCPBeam>[];
    if (json.containsKey('beams') && json['beams'] != null) {
      var listJson = json['beams'];
      for (dynamic lJ in listJson) {
        core.Map<String, dynamic> msgJson = lJ as core.Map<String, dynamic>;
        if (msgJson.containsKey('abbrev') && msgJson['abbrev'] != null) {
          var msgType = msgJson['abbrev'] as String;
          var builder = messagesBuilders[msgType]?.call();
          builder = builder?.fromJson(msgJson);
          var m = builder?.build() as ADCPBeam?;
          if (m != null) beams.add(m);
        }
      }
    }
    val.beams = beams;

    return val.build() as _$CurrentProfileCell;
  }

  _$CurrentProfileCell._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.cellPosition,
      required this.beams})
      : super._();

  @override
  CurrentProfileCell rebuild(
          void Function(CurrentProfileCellBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  CurrentProfileCellBuilder toBuilder() =>
      CurrentProfileCellBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is CurrentProfileCell &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (cellPosition == other.cellPosition ||
            cellPosition - other.cellPosition <= 1E-7) &&
        DeepCollectionEquality().equals(beams, other.beams);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            cellPosition.hashCode),
        beams.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('CurrentProfileCell')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('cellPosition', '$cellPosition (m)')
          ..add('beams', '$beams'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'CurrentProfileCell',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'cell_position': cellPosition,
        'beams': [
          ...beams.map((m) => m.toJson(false)),
        ],
      };
}

/// Current Profile Cell builder class
///
class CurrentProfileCellBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<CurrentProfileCell, CurrentProfileCellBuilder> {
  _$CurrentProfileCell? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _cellPosition = 0;
  double get cellPosition => _$this._cellPosition;
  set cellPosition(double cellPosition) => _$this._cellPosition = cellPosition;

  List<ADCPBeam> _beams = <ADCPBeam>[];
  List<ADCPBeam> get beams => _$this._beams;
  set beams(List<ADCPBeam> beams) => _$this._beams = beams;

  CurrentProfileCellBuilder();

  CurrentProfileCellBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  CurrentProfileCellBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$CurrentProfileCell.fromJson(json);
    replace(v);
  }

  @override
  CurrentProfileCellBuilder fromJson(core.Map<String, dynamic> json) =>
      CurrentProfileCellBuilder.fromJson(json);

  @override
  CurrentProfileCellBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      CurrentProfileCellBuilder()..copyFromHeader(headerFrom);

  CurrentProfileCellBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _cellPosition = _$v!.cellPosition;
      _beams = _$v!.beams;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(CurrentProfileCell other) {
    _$v = other as _$CurrentProfileCell;
  }

  @override
  void update(void Function(CurrentProfileCellBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  CurrentProfileCell build() {
    final result = _$v ??
        _$CurrentProfileCell._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            cellPosition: cellPosition,
            beams: beams);
    replace(result);
    return result;
  }
}

/// ADCP Beam Measurements immutable class
///
class _$ADCPBeam extends ADCPBeam {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double vel;
  @override
  final double amp;
  @override
  final int cor;

  factory _$ADCPBeam([void Function(ADCPBeamBuilder b)? updates]) =>
      (ADCPBeamBuilder()..update(updates)).build() as _$ADCPBeam;

  factory _$ADCPBeam.fromJson(core.Map<String, dynamic> json) {
    var val = ADCPBeamBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.vel = json.containsKey('vel') ? json['vel'] as double : 0;
    val.amp = json.containsKey('amp') ? json['amp'] as double : 0;
    val.cor = json.containsKey('cor') ? json['cor'] as int : 0;

    return val.build() as _$ADCPBeam;
  }

  _$ADCPBeam._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.vel,
      required this.amp,
      required this.cor})
      : super._();

  @override
  ADCPBeam rebuild(void Function(ADCPBeamBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  ADCPBeamBuilder toBuilder() => ADCPBeamBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is ADCPBeam &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (vel == other.vel || vel - other.vel <= 1E-7) &&
        (amp == other.amp || amp - other.amp <= 1E-7) &&
        cor == other.cor;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                                src.hashCode),
                            srcEnt.hashCode),
                        dst.hashCode),
                    dstEnt.hashCode),
                vel.hashCode),
            amp.hashCode),
        cor.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('ADCPBeam')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('vel', '$vel (m/s)')
          ..add('amp', '$amp (dB)')
          ..add('cor', '$cor (%)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'ADCPBeam',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'vel': vel,
        'amp': amp,
        'cor': cor,
      };
}

/// ADCP Beam Measurements builder class
///
class ADCPBeamBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<ADCPBeam, ADCPBeamBuilder> {
  _$ADCPBeam? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _vel = 0;
  double get vel => _$this._vel;
  set vel(double vel) => _$this._vel = vel;

  double _amp = 0;
  double get amp => _$this._amp;
  set amp(double amp) => _$this._amp = amp;

  int _cor = 0;
  int get cor => _$this._cor;
  set cor(int cor) => _$this._cor = cor;

  ADCPBeamBuilder();

  ADCPBeamBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  ADCPBeamBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$ADCPBeam.fromJson(json);
    replace(v);
  }

  @override
  ADCPBeamBuilder fromJson(core.Map<String, dynamic> json) =>
      ADCPBeamBuilder.fromJson(json);

  @override
  ADCPBeamBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      ADCPBeamBuilder()..copyFromHeader(headerFrom);

  ADCPBeamBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _vel = _$v!.vel;
      _amp = _$v!.amp;
      _cor = _$v!.cor;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(ADCPBeam other) {
    _$v = other as _$ADCPBeam;
  }

  @override
  void update(void Function(ADCPBeamBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  ADCPBeam build() {
    final result = _$v ??
        _$ADCPBeam._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            vel: vel,
            amp: amp,
            cor: cor);
    replace(result);
    return result;
  }
}

/// GPIO State immutable class
///
class _$GpioState extends GpioState {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String name;
  @override
  final int value;

  factory _$GpioState([void Function(GpioStateBuilder b)? updates]) =>
      (GpioStateBuilder()..update(updates)).build() as _$GpioState;

  factory _$GpioState.fromJson(core.Map<String, dynamic> json) {
    var val = GpioStateBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.name = json.containsKey('name') && json['name'] != null
        ? json['name'] as String
        : '';
    val.value = json.containsKey('value') ? json['value'] as int : 0;

    return val.build() as _$GpioState;
  }

  _$GpioState._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.name,
      required this.value})
      : super._();

  @override
  GpioState rebuild(void Function(GpioStateBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GpioStateBuilder toBuilder() => GpioStateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GpioState &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        name == other.name &&
        value == other.value;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            name.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GpioState')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('name', name)
          ..add('value', '$value'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'GpioState',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'name': name,
        'value': value,
      };
}

/// GPIO State builder class
///
class GpioStateBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<GpioState, GpioStateBuilder> {
  _$GpioState? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _name = '';
  String get name => _$this._name;
  set name(String name) => _$this._name = name;

  int _value = 0;
  int get value => _$this._value;
  set value(int value) => _$this._value = value;

  GpioStateBuilder();

  GpioStateBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  GpioStateBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$GpioState.fromJson(json);
    replace(v);
  }

  @override
  GpioStateBuilder fromJson(core.Map<String, dynamic> json) =>
      GpioStateBuilder.fromJson(json);

  @override
  GpioStateBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      GpioStateBuilder()..copyFromHeader(headerFrom);

  GpioStateBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _name = _$v!.name;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GpioState other) {
    _$v = other as _$GpioState;
  }

  @override
  void update(void Function(GpioStateBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GpioState build() {
    final result = _$v ??
        _$GpioState._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            name: name,
            value: value);
    replace(result);
    return result;
  }
}

/// Get GPIO State immutable class
///
class _$GpioStateGet extends GpioStateGet {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String name;

  factory _$GpioStateGet([void Function(GpioStateGetBuilder b)? updates]) =>
      (GpioStateGetBuilder()..update(updates)).build() as _$GpioStateGet;

  factory _$GpioStateGet.fromJson(core.Map<String, dynamic> json) {
    var val = GpioStateGetBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.name = json.containsKey('name') && json['name'] != null
        ? json['name'] as String
        : '';

    return val.build() as _$GpioStateGet;
  }

  _$GpioStateGet._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.name})
      : super._();

  @override
  GpioStateGet rebuild(void Function(GpioStateGetBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GpioStateGetBuilder toBuilder() => GpioStateGetBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GpioStateGet &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        name == other.name;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        name.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GpioStateGet')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('name', name))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'GpioStateGet',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'name': name,
      };
}

/// Get GPIO State builder class
///
class GpioStateGetBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<GpioStateGet, GpioStateGetBuilder> {
  _$GpioStateGet? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _name = '';
  String get name => _$this._name;
  set name(String name) => _$this._name = name;

  GpioStateGetBuilder();

  GpioStateGetBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  GpioStateGetBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$GpioStateGet.fromJson(json);
    replace(v);
  }

  @override
  GpioStateGetBuilder fromJson(core.Map<String, dynamic> json) =>
      GpioStateGetBuilder.fromJson(json);

  @override
  GpioStateGetBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      GpioStateGetBuilder()..copyFromHeader(headerFrom);

  GpioStateGetBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _name = _$v!.name;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GpioStateGet other) {
    _$v = other as _$GpioStateGet;
  }

  @override
  void update(void Function(GpioStateGetBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GpioStateGet build() {
    final result = _$v ??
        _$GpioStateGet._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            name: name);
    replace(result);
    return result;
  }
}

/// Set GPIO State immutable class
///
class _$GpioStateSet extends GpioStateSet {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final String name;
  @override
  final int value;

  factory _$GpioStateSet([void Function(GpioStateSetBuilder b)? updates]) =>
      (GpioStateSetBuilder()..update(updates)).build() as _$GpioStateSet;

  factory _$GpioStateSet.fromJson(core.Map<String, dynamic> json) {
    var val = GpioStateSetBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.name = json.containsKey('name') && json['name'] != null
        ? json['name'] as String
        : '';
    val.value = json.containsKey('value') ? json['value'] as int : 0;

    return val.build() as _$GpioStateSet;
  }

  _$GpioStateSet._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.name,
      required this.value})
      : super._();

  @override
  GpioStateSet rebuild(void Function(GpioStateSetBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GpioStateSetBuilder toBuilder() => GpioStateSetBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GpioStateSet &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        name == other.name &&
        value == other.value;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            name.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GpioStateSet')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('name', name)
          ..add('value', '$value'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'GpioStateSet',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'name': name,
        'value': value,
      };
}

/// Set GPIO State builder class
///
class GpioStateSetBuilder extends Object
    with ImcBuilderHeaderPart
    implements BuilderWithInstanciator<GpioStateSet, GpioStateSetBuilder> {
  _$GpioStateSet? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  String _name = '';
  String get name => _$this._name;
  set name(String name) => _$this._name = name;

  int _value = 0;
  int get value => _$this._value;
  set value(int value) => _$this._value = value;

  GpioStateSetBuilder();

  GpioStateSetBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  GpioStateSetBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$GpioStateSet.fromJson(json);
    replace(v);
  }

  @override
  GpioStateSetBuilder fromJson(core.Map<String, dynamic> json) =>
      GpioStateSetBuilder.fromJson(json);

  @override
  GpioStateSetBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      GpioStateSetBuilder()..copyFromHeader(headerFrom);

  GpioStateSetBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _name = _$v!.name;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GpioStateSet other) {
    _$v = other as _$GpioStateSet;
  }

  @override
  void update(void Function(GpioStateSetBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GpioStateSet build() {
    final result = _$v ??
        _$GpioStateSet._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            name: name,
            value: value);
    replace(result);
    return result;
  }
}

/// Colored Dissolved Organic Matter immutable class
///
class _$ColoredDissolvedOrganicMatter extends ColoredDissolvedOrganicMatter {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$ColoredDissolvedOrganicMatter(
          [void Function(ColoredDissolvedOrganicMatterBuilder b)? updates]) =>
      (ColoredDissolvedOrganicMatterBuilder()..update(updates)).build()
          as _$ColoredDissolvedOrganicMatter;

  factory _$ColoredDissolvedOrganicMatter.fromJson(
      core.Map<String, dynamic> json) {
    var val = ColoredDissolvedOrganicMatterBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$ColoredDissolvedOrganicMatter;
  }

  _$ColoredDissolvedOrganicMatter._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  ColoredDissolvedOrganicMatter rebuild(
          void Function(ColoredDissolvedOrganicMatterBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  ColoredDissolvedOrganicMatterBuilder toBuilder() =>
      ColoredDissolvedOrganicMatterBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is ColoredDissolvedOrganicMatter &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('ColoredDissolvedOrganicMatter')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (PPB)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'ColoredDissolvedOrganicMatter',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Colored Dissolved Organic Matter builder class
///
class ColoredDissolvedOrganicMatterBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<ColoredDissolvedOrganicMatter,
            ColoredDissolvedOrganicMatterBuilder> {
  _$ColoredDissolvedOrganicMatter? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  ColoredDissolvedOrganicMatterBuilder();

  ColoredDissolvedOrganicMatterBuilder.fromHeader(
      ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  ColoredDissolvedOrganicMatterBuilder.fromJson(
      core.Map<String, dynamic> json) {
    var v = _$ColoredDissolvedOrganicMatter.fromJson(json);
    replace(v);
  }

  @override
  ColoredDissolvedOrganicMatterBuilder fromJson(
          core.Map<String, dynamic> json) =>
      ColoredDissolvedOrganicMatterBuilder.fromJson(json);

  @override
  ColoredDissolvedOrganicMatterBuilder newInstance(
          [ImcBuilderHeaderPart? headerFrom]) =>
      ColoredDissolvedOrganicMatterBuilder()..copyFromHeader(headerFrom);

  ColoredDissolvedOrganicMatterBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(ColoredDissolvedOrganicMatter other) {
    _$v = other as _$ColoredDissolvedOrganicMatter;
  }

  @override
  void update(void Function(ColoredDissolvedOrganicMatterBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  ColoredDissolvedOrganicMatter build() {
    final result = _$v ??
        _$ColoredDissolvedOrganicMatter._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Fluorescent Dissolved Organic Matter immutable class
///
class _$FluorescentDissolvedOrganicMatter
    extends FluorescentDissolvedOrganicMatter {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$FluorescentDissolvedOrganicMatter(
          [void Function(FluorescentDissolvedOrganicMatterBuilder b)?
              updates]) =>
      (FluorescentDissolvedOrganicMatterBuilder()..update(updates)).build()
          as _$FluorescentDissolvedOrganicMatter;

  factory _$FluorescentDissolvedOrganicMatter.fromJson(
      core.Map<String, dynamic> json) {
    var val = FluorescentDissolvedOrganicMatterBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$FluorescentDissolvedOrganicMatter;
  }

  _$FluorescentDissolvedOrganicMatter._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  FluorescentDissolvedOrganicMatter rebuild(
          void Function(FluorescentDissolvedOrganicMatterBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  FluorescentDissolvedOrganicMatterBuilder toBuilder() =>
      FluorescentDissolvedOrganicMatterBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is FluorescentDissolvedOrganicMatter &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('FluorescentDissolvedOrganicMatter')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value (PPB)'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'FluorescentDissolvedOrganicMatter',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Fluorescent Dissolved Organic Matter builder class
///
class FluorescentDissolvedOrganicMatterBuilder extends Object
    with
        ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<FluorescentDissolvedOrganicMatter,
            FluorescentDissolvedOrganicMatterBuilder> {
  _$FluorescentDissolvedOrganicMatter? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  FluorescentDissolvedOrganicMatterBuilder();

  FluorescentDissolvedOrganicMatterBuilder.fromHeader(
      ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  FluorescentDissolvedOrganicMatterBuilder.fromJson(
      core.Map<String, dynamic> json) {
    var v = _$FluorescentDissolvedOrganicMatter.fromJson(json);
    replace(v);
  }

  @override
  FluorescentDissolvedOrganicMatterBuilder fromJson(
          core.Map<String, dynamic> json) =>
      FluorescentDissolvedOrganicMatterBuilder.fromJson(json);

  @override
  FluorescentDissolvedOrganicMatterBuilder newInstance(
          [ImcBuilderHeaderPart? headerFrom]) =>
      FluorescentDissolvedOrganicMatterBuilder()..copyFromHeader(headerFrom);

  FluorescentDissolvedOrganicMatterBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(FluorescentDissolvedOrganicMatter other) {
    _$v = other as _$FluorescentDissolvedOrganicMatter;
  }

  @override
  void update(
      void Function(FluorescentDissolvedOrganicMatterBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  FluorescentDissolvedOrganicMatter build() {
    final result = _$v ??
        _$FluorescentDissolvedOrganicMatter._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Total Magnetic Field Intensity immutable class
///
class _$TotalMagIntensity extends TotalMagIntensity {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final double value;

  factory _$TotalMagIntensity(
          [void Function(TotalMagIntensityBuilder b)? updates]) =>
      (TotalMagIntensityBuilder()..update(updates)).build()
          as _$TotalMagIntensity;

  factory _$TotalMagIntensity.fromJson(core.Map<String, dynamic> json) {
    var val = TotalMagIntensityBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.value = json.containsKey('value') ? json['value'] as double : 0;

    return val.build() as _$TotalMagIntensity;
  }

  _$TotalMagIntensity._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.value})
      : super._();

  @override
  TotalMagIntensity rebuild(
          void Function(TotalMagIntensityBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  TotalMagIntensityBuilder toBuilder() =>
      TotalMagIntensityBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is TotalMagIntensity &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        (value == other.value || value - other.value <= 1E-7);
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                        src.hashCode),
                    srcEnt.hashCode),
                dst.hashCode),
            dstEnt.hashCode),
        value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('TotalMagIntensity')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('value', '$value'))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'TotalMagIntensity',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'value': value,
      };
}

/// Total Magnetic Field Intensity builder class
///
class TotalMagIntensityBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<TotalMagIntensity, TotalMagIntensityBuilder> {
  _$TotalMagIntensity? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  double _value = 0;
  double get value => _$this._value;
  set value(double value) => _$this._value = value;

  TotalMagIntensityBuilder();

  TotalMagIntensityBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  TotalMagIntensityBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$TotalMagIntensity.fromJson(json);
    replace(v);
  }

  @override
  TotalMagIntensityBuilder fromJson(core.Map<String, dynamic> json) =>
      TotalMagIntensityBuilder.fromJson(json);

  @override
  TotalMagIntensityBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      TotalMagIntensityBuilder()..copyFromHeader(headerFrom);

  TotalMagIntensityBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _value = _$v!.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(TotalMagIntensity other) {
    _$v = other as _$TotalMagIntensity;
  }

  @override
  void update(void Function(TotalMagIntensityBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  TotalMagIntensity build() {
    final result = _$v ??
        _$TotalMagIntensity._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            value: value);
    replace(result);
    return result;
  }
}

/// Communication Restriction immutable class
///
class _$CommRestriction extends CommRestriction {
  @override
  final DateTime? timestamp;
  @override
  final int src;
  @override
  final int srcEnt;
  @override
  final int dst;
  @override
  final int dstEnt;

  @override
  final CommRestrictionBitfieldRestriction restriction;
  @override
  final String reason;

  factory _$CommRestriction(
          [void Function(CommRestrictionBuilder b)? updates]) =>
      (CommRestrictionBuilder()..update(updates)).build() as _$CommRestriction;

  factory _$CommRestriction.fromJson(core.Map<String, dynamic> json) {
    var val = CommRestrictionBuilder();
    val.timestamp = json.containsKey('timestamp') && json['timestamp'] != null
        ? DateTime.fromMillisecondsSinceEpoch(
            ((json['timestamp'] as double) * 1E3).toInt(),
            isUtc: true)
        : DateTime.now();
    if (json.containsKey('src')) val.src = json['src'] as int;
    if (json.containsKey('src_ent')) val.srcEnt = json['src_ent'] as int;
    if (json.containsKey('dst')) val.dst = json['dst'] as int;
    if (json.containsKey('dst_ent')) val.dstEnt = json['dst_ent'] as int;

    val.restriction =
        json.containsKey('restriction') && json['restriction'] != null
            ? CommRestrictionBitfieldRestriction(json['restriction'] as int)
            : CommRestrictionBitfieldRestriction(0);
    val.reason = json.containsKey('reason') && json['reason'] != null
        ? json['reason'] as String
        : '';

    return val.build() as _$CommRestriction;
  }

  _$CommRestriction._(
      {this.timestamp, //Should be DateTime.now() but is not const
      this.src = ImcId.nullId,
      this.srcEnt = ImcEntityId.nullId,
      this.dst = ImcId.nullId,
      this.dstEnt = ImcEntityId.nullId,
      required this.restriction,
      required this.reason})
      : super._();

  @override
  CommRestriction rebuild(void Function(CommRestrictionBuilder b) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  CommRestrictionBuilder toBuilder() => CommRestrictionBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is CommRestriction &&
        timestamp == other.timestamp &&
        src == other.src &&
        srcEnt == other.srcEnt &&
        dst == other.dst &&
        dstEnt == other.dstEnt &&
        restriction == other.restriction &&
        reason == other.reason;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, timestamp?.hashCode ?? null.hashCode),
                            src.hashCode),
                        srcEnt.hashCode),
                    dst.hashCode),
                dstEnt.hashCode),
            restriction.hashCode),
        reason.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('CommRestriction')
          ..add('timestamp', timestamp)
          ..add('src', '0x${src.toRadixString(16)} ($src)')
          ..add('srcEnt', '0x${srcEnt.toRadixString(16)} ($srcEnt)')
          ..add('dst', '0x${dst.toRadixString(16)} ($dst)')
          ..add('dstEnt', '0x${dstEnt.toRadixString(16)} ($dstEnt)')
          ..add('restriction',
              '$restriction (Bitfield) [${restriction.toPrettyString()}]')
          ..add('reason', reason))
        .toString();
  }

  /// To JSON object
  @override
  core.Map<String, dynamic> toJson([bool includeHeader = true]) =>
      _toJson(includeHeader);

  core.Map<String, dynamic> _toJson([bool includeHeader = true]) => {
        'abbrev': 'CommRestriction',
        if (includeHeader)
          'timestamp':
              (timestamp ?? DateTime.now()).millisecondsSinceEpoch / 1E3,
        if (includeHeader) 'src': src,
        if (includeHeader) 'src_ent': srcEnt,
        if (includeHeader) 'dst': dst,
        if (includeHeader) 'dst_ent': dstEnt,
        'restriction': restriction.value,
        'reason': reason,
      };
}

/// Communication Restriction builder class
///
class CommRestrictionBuilder extends Object
    with ImcBuilderHeaderPart
    implements
        BuilderWithInstanciator<CommRestriction, CommRestrictionBuilder> {
  _$CommRestriction? _$v;

  DateTime? _timestamp = DateTime.now();
  @override
  DateTime? get timestamp => _$this._timestamp;
  @override
  set timestamp(DateTime? timestamp) => _$this._timestamp = timestamp;

  int _src = ImcId.nullId;
  @override
  int get src => _$this._src;
  @override
  set src(int src) => _$this._src = src;

  int _srcEnt = ImcEntityId.nullId;
  @override
  int get srcEnt => _$this._srcEnt;
  @override
  set srcEnt(int srcEnt) => _$this._srcEnt = srcEnt;

  int _dst = ImcId.nullId;
  @override
  int get dst => _$this._dst;
  @override
  set dst(int dst) => _$this._dst = dst;

  int _dstEnt = ImcEntityId.nullId;
  @override
  int get dstEnt => _$this._dstEnt;
  @override
  set dstEnt(int dstEnt) => _$this._dstEnt = dstEnt;

  CommRestrictionBitfieldRestriction _restriction =
      CommRestrictionBitfieldRestriction(0);
  CommRestrictionBitfieldRestriction get restriction => _$this._restriction;
  set restriction(CommRestrictionBitfieldRestriction restriction) =>
      _$this._restriction = restriction;

  String _reason = '';
  String get reason => _$this._reason;
  set reason(String reason) => _$this._reason = reason;

  CommRestrictionBuilder();

  CommRestrictionBuilder.fromHeader(ImcBuilderHeaderPart headerFrom) {
    copyFromHeader(headerFrom);
  }

  CommRestrictionBuilder.fromJson(core.Map<String, dynamic> json) {
    var v = _$CommRestriction.fromJson(json);
    replace(v);
  }

  @override
  CommRestrictionBuilder fromJson(core.Map<String, dynamic> json) =>
      CommRestrictionBuilder.fromJson(json);

  @override
  CommRestrictionBuilder newInstance([ImcBuilderHeaderPart? headerFrom]) =>
      CommRestrictionBuilder()..copyFromHeader(headerFrom);

  CommRestrictionBuilder get _$this {
    if (_$v != null) {
      _timestamp = _$v!.timestamp;
      _src = _$v!.src;
      _srcEnt = _$v!.srcEnt;
      _dst = _$v!.dst;
      _dstEnt = _$v!.dstEnt;
      _restriction = _$v!.restriction;
      _reason = _$v!.reason;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(CommRestriction other) {
    _$v = other as _$CommRestriction;
  }

  @override
  void update(void Function(CommRestrictionBuilder b)? updates) {
    if (updates != null) updates(this);
  }

  @override
  CommRestriction build() {
    final result = _$v ??
        _$CommRestriction._(
            timestamp: timestamp ?? DateTime.now(),
            src: src,
            srcEnt: srcEnt,
            dst: dst,
            dstEnt: dstEnt,
            restriction: restriction,
            reason: reason);
    replace(result);
    return result;
  }
}
